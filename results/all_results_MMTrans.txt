0:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename finalize agent ) simplename finalize agent ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( memberaccess ( simplename finalize agent ) simplename finalize agent ( simplename finalize crowdsale ) simplename finalize crowdsale ) memberaccess ( simplename token ) simplename token ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename finalized ) simplename finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename finalized ) simplename finalized ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename in state ) simplename in state ( memberaccess ( simplename state ) simplename state ( simplename success ) simplename success ) memberaccess ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename stop in emergency ) simplename stop in emergency ) modifierinvocation ) functiondefinition
candidate: Finalize a succcesful crowdsale .
ref: Finalize a succcesful crowdsale .

1:
src: ( functiondefinition ( simplename valid purchase ) simplename valid purchase ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token minting finished ) simplename token minting finished ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename minting finished ) simplename minting finished ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within cap ) simplename within cap ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename cap ) simplename cap ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within period ) simplename within period ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename non zero purchase ) simplename non zero purchase ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( simplename token minting finished ) simplename token minting finished ( simplename within cap ) simplename within cap ( simplename within period ) simplename within period ( simplename non zero purchase ) simplename non zero purchase ) returnstatement ) block ) functiondefinition
candidate: true if the transaction can buy tokens .
ref: true if the transaction can buy tokens .

2:
src: ( functiondefinition ( simplename owner add to whitelist ) simplename owner add to whitelist ( visibility external ) visibility external ( variabledeclaration ( simplename participant ) simplename participant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename add to whitelist ) simplename add to whitelist ( simplename participant ) simplename participant ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: add ETH to the whitelist .
ref: Add whitelisted amount .

3:
src: ( functiondefinition ( simplename tokens purchased ) simplename tokens purchased ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Get the amount of tokens purchased by the provided value .
ref: function that will determine how many tokens have been created .

4:
src: ( functiondefinition ( simplename withdraw tokens ) simplename withdraw tokens ( visibility external ) visibility external ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens remaining ) simplename tokens remaining ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename owner ) simplename owner ( simplename tokens remaining ) simplename tokens remaining ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename after crowdsale ) simplename after crowdsale ) modifierinvocation ) functiondefinition
candidate: Function to get the amount of tokens remaining after crowdsale ends .
ref: Remaining tokens withdrawal .

5:
src: ( functiondefinition ( simplename tokens to sell ) simplename tokens to sell ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simplename tokens to sell ) simplename tokens to sell ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename latium ) simplename latium ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: function to get amount of Latium tokens ( with decimals ) of this contract .
ref: function to get current Latium balance of this contract .

6:
src: ( functiondefinition ( simplename update player time periods ) simplename update player time periods ( visibility internal ) visibility internal ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename board ) simplename board ( simpletype ( simplename go board ) simplename go board ) simpletype ) variabledeclaration ( variabledeclaration ( simplename color ) simplename color ( simpletype ( simplename player color ) simplename player color ) simpletype ) variabledeclaration ( variabledeclaration ( simplename time periods used ) simplename time periods used ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename color ) simplename color ( memberaccess ( simplename player color ) simplename player color ( simplename black ) simplename black ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename board ) simplename board ( simplename black periods remaining ) simplename black periods remaining ) memberaccess ( conditional ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename board ) simplename board ( simplename black periods remaining ) simplename black periods remaining ) memberaccess ( simplename time periods used ) simplename time periods used ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename board ) simplename board ( simplename black periods remaining ) simplename black periods remaining ) memberaccess ( simplename time periods used ) simplename time periods used ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename color ) simplename color ( memberaccess ( simplename player color ) simplename player color ( simplename white ) simplename white ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename board ) simplename board ( simplename white periods remaining ) simplename white periods remaining ) memberaccess ( conditional ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename board ) simplename board ( simplename white periods remaining ) simplename white periods remaining ) memberaccess ( simplename time periods used ) simplename time periods used ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename board ) simplename board ( simplename white periods remaining ) simplename white periods remaining ) memberaccess ( simplename time periods used ) simplename time periods used ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Helper function to update the time , but only used if there is no update .
ref: After a player <UNK> we might need to reduce the number of remaining time periods .

7:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( simplename self address ) simplename self address ( block ( returnstatement ( functioncall ( simplename transfer to self ) simplename transfer to self ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( returnstatement ( functioncall ( simplename transfer to contract ) simplename transfer to contract ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) returnstatement ) block ( block ( returnstatement ( functioncall ( simplename transfer to address ) simplename transfer to address ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) ifstatement ) ifstatement ) block ( modifierinvocation ( simplename is running ) simplename is running ) modifierinvocation ( modifierinvocation ( simplename no freeze ) simplename no freeze ) modifierinvocation ) functiondefinition
candidate: Standard function transfer similar to ERC20 transfer with no _data .
ref: Transfer the specified amount to the target address ERC-20 Standard .

8:
src: ( functiondefinition ( simplename <UNK> ) simplename <UNK> ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename move stage ) simplename move stage ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename not started ) simplename not started ) modifierinvocation ) functiondefinition
candidate: this function is used to manually before the end of the game .
ref: Crowdsale external interface .

9:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename greys ) simplename greys ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

10:
src: ( functiondefinition ( simplename player make bet ) simplename player make bet ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename min roll limit ) simplename min roll limit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max roll limit ) simplename max roll limit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dice roll hash ) simplename dice roll hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename player address ) simplename player address ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename casino ) simplename casino ( functioncall ( simplename ecrecover ) simplename ecrecover ( simplename dice roll hash ) simplename dice roll hash ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename temp fullprofit ) simplename temp fullprofit ( functioncall ( simplename get full profit ) simplename get full profit ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename min roll limit ) simplename min roll limit ( simplename max roll limit ) simplename max roll limit ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename player profit ) simplename player profit ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( functioncall ( simplename get profit ) simplename get profit ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename temp fullprofit ) simplename temp fullprofit ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename player to jackpot ) simplename player to jackpot ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( functioncall ( simplename get to jackpot ) simplename get to jackpot ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename temp fullprofit ) simplename temp fullprofit ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( binaryoperation - ) binaryoperation - ( indexaccess ( simplename player profit ) simplename player profit ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( indexaccess ( simplename player to jackpot ) simplename player to jackpot ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( simplename max profit ) simplename max profit ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename player bet dice roll hash ) simplename player bet dice roll hash ( simplename dice roll hash ) simplename dice roll hash ) indexaccess ( simplename dice roll hash ) simplename dice roll hash ) expressionstatement ( expressionstatement ( binaryoperation = )
candidate: public function player submit bet only if game is active bet is valid .
ref: public function player submit bet only if game is active bet is valid .

11:
src: ( functiondefinition ( simplename token drain ) simplename token drain ( visibility external ) visibility external ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end block ) simplename end block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename multisig ) simplename multisig ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to transfer unsold tokens to the any address .
ref: Fail-safe token transfer .

12:
src: ( functiondefinition ( simplename create sale ) simplename create sale ( visibility internal ) visibility internal ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename starting price ) simplename starting price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ending price ) simplename ending price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename seller ) simplename seller ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename sale ) simplename sale ( simpletype ( simplename sale ) simplename sale ) simpletype ) variabledeclaration ( functioncall ( simplename sale ) simplename sale ( simplename seller ) simplename seller ( simplename starting price ) simplename starting price ( simplename ending price ) simplename ending price ( simplename duration ) simplename duration ( simplename now ) simplename now ( tupleexpression ( simplename token id ) simplename token id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename add sale ) simplename add sale ( simplename token id ) simplename token id ( simplename sale ) simplename sale ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Creates a new sale with the given name .
ref: Creates and begins a new sale .

13:
src: ( functiondefinition ( simplename get contract owner ) simplename get contract owner ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( simplename owner address ) simplename owner address ) returnstatement ) block ) functiondefinition
candidate: Get address of owner .
ref: some helper / info getter functions .

14:
src: ( functiondefinition ( simplename <UNK> ) simplename <UNK> ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename valid ) simplename valid ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename main ) simplename main ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fraction ) simplename fraction ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename main ) simplename main ( simplename max daily cosign send ) simplename max daily cosign send ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename fraction ) simplename fraction ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename whole ether ) simplename whole ether ( simplename fraction ether ) simplename fraction ether ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename tx ) simplename tx ( simplename gasprice ) simplename gasprice ) memberaccess ( simplename gas price limit ) simplename gas price limit ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename sendsignature ) simplename sendsignature ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current time ) simplename current time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename valid1 ) simplename valid1 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename valid2 ) simplename valid2 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( indexaccess ( simplename m signatures ) simplename m signatures ( simplename contract signature1 ) simplename contract signature1 ) indexaccess ( simplename cosign max time ) simplename cosign max time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename m amount1 ) simplename m amount1 ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename main ) simplename main ( simplename whole ether ) simplename whole ether ( binaryoperation * ) binaryoperation * ( simplename fraction ) simplename fraction ( simplename fraction ether ) simplename fraction ether ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename valid1 ) simplename valid1 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( indexaccess ( simplename m signatures ) simplename m signatures ( simplename contract signature2 ) simplename
candidate: Create a new failed .
ref: implicitly calls spend - if both signatures have signed we then spend .

15:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename not blacklisted ) simplename not blacklisted ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename not blacklisted ) simplename not blacklisted ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) modifierinvocation ( modifierinvocation ( simplename not blacklisted ) simplename not blacklisted ( simplename from ) simplename from ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

16:
src: ( functiondefinition ( simplename deploy ) simplename deploy ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename setup cost ) simplename setup cost ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename poly token ) simplename poly token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( simplename setup cost ) simplename setup cost ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename count transfer manager ) simplename count transfer manager ( simpletype ( simplename count transfer manager ) simplename count transfer manager ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename count transfer manager ) simplename count transfer manager ) simpletype ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename poly token ) simplename poly token ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename get sig ) simplename get sig ( simplename data ) simplename data ) functioncall ( functioncall ( memberaccess ( simplename count transfer manager ) simplename count transfer manager ( simplename get init function ) simplename get init function ) memberaccess ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename count transfer manager ) simplename count transfer manager ) functioncall ( simplename call ) simplename call ) memberaccess ( simplename data ) simplename data ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log generate module from factory ) simplename log generate module from factory ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename count transfer manager ) simplename count transfer manager ) functioncall ( functioncall ( simplename get name ) simplename get name ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename now ) simplename now ) functioncall ) emitstatement ( returnstatement ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename count transfer manager ) simplename count transfer manager ) functioncall ) returnstatement ) block ) functiondefinition
candidate: used to deploy a new ST .
ref: used to launch the Module with the help of factory .

17:
src: ( functiondefinition ( simplename send tokens to seven addresses ) simplename send tokens to seven addresses ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename dests1 ) simplename dests1 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests2 ) simplename dests2 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests3 ) simplename dests3 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests4 ) simplename dests4 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests5 ) simplename dests5 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests6 ) simplename dests6 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dests7 ) simplename dests7 ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename quantity ) simplename quantity ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename token send start ) simplename token send start ( simplename dests1 ) simplename dests1 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename approve ) simplename approve ) memberaccess ( simplename dests1 ) simplename dests1 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename owner ) simplename owner ( simplename dests1 ) simplename dests1 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token send start ) simplename token send start ( simplename dests2 ) simplename dests2 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename approve ) simplename approve ) memberaccess ( simplename dests2 ) simplename dests2 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename owner ) simplename owner ( simplename dests2 ) simplename dests2 ( binaryoperation * ) binaryoperation * ( simplename quantity ) simplename quantity ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token send
candidate: Send approved tokens to addresses .
ref: Send approved tokens to seven addresses .

18:
src: ( functiondefinition ( simplename <UNK> ) simplename <UNK> ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename token ids ) simplename token ids ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename image hash ) simplename image hash ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename composable ) simplename composable ( simplename <UNK> ) simplename <UNK> ) memberaccess ( simplename token ids ) simplename token ids ( simplename image hash ) simplename image hash ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename set avatar if no avatar is set ) simplename set avatar if no avatar is set ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( indexaccess ( functioncall ( simplename tokens of ) simplename tokens of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename token ids ) simplename token ids ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename withdraw to ) simplename withdraw to ( functioncall ( simplename owner of ) simplename owner of ( indexaccess ( simplename token ids ) simplename token ids ( simplename i ) simplename i ) indexaccess ) functioncall ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Transfers the ownership of a given token .
ref: Mints a composition emoji .

19:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename crowdsale closed ) simplename crowdsale closed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end block ) simplename end block ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename total tokens sent ) simplename total tokens sent ( simplename prior tokens sent ) simplename prior tokens sent ( binaryoperation - ) binaryoperation - ( simplename max cap ) simplename max cap ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale closed ) simplename crowdsale closed ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename team ) simplename team ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename unlock ) simplename unlock ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: This function will finalize the sale .
ref: This function will finalize the sale .

20:
src: ( functiondefinition ( simplename get encrypted resource <UNK> key ) simplename get encrypted resource <UNK> key ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename proposal id ) simplename proposal id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename resource id ) simplename resource id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename proposal id ) simplename proposal id ( simplename proposal count ) simplename proposal count ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename proposal state ) simplename proposal state ( simplename accepted by resource set creator ) simplename accepted by resource set creator ) memberaccess ( indexaccess ( simplename states by proposal id ) simplename states by proposal id ( simplename proposal id ) simplename proposal id ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename resource id ) simplename resource id ( simplename resource count ) simplename resource count ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename valid resource ids ) simplename valid resource ids ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( memberaccess ( indexaccess ( simplename resource sets by id ) simplename resource sets by id ( memberaccess ( indexaccess ( simplename proposals by id ) simplename proposals by id ( simplename proposal id ) simplename proposal id ) indexaccess ( simplename resource set id ) simplename resource set id ) memberaccess ) indexaccess ( simplename unique resource ids sorted <UNK> ) simplename unique resource ids sorted <UNK> ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename valid resource ids ) simplename valid resource ids ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename valid resource ids ) simplename valid resource ids ( simplename length ) simplename length ) memberaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename resource id ) simplename resource id ( indexaccess ( simplename valid resource ids ) simplename valid resource ids ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) functioncall ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename low index ) simplename low index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename high index ) simplename high index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( simplename valid resource ids ) simplename valid resource ids ( simplename length ) simplename length ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation =
candidate: Get the address of an app instance or base implementation .
ref: Retrieve the encrypted key to <UNK> a resource referenced by an accepted proposal .

21:
src: ( functiondefinition ( simplename withdraw ether ) simplename withdraw ether ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename to ) simplename to ( simplename transfer ) simplename transfer ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Withdraws ether from smartcontract to the owner .
ref: withdraw Ether from contract .

22:
src: ( functiondefinition ( simplename push ) simplename push ( visibility default ) visibility default ( variabledeclaration ( simplename buyer ) simplename buyer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename wallet ) simplename wallet ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename wallet ) simplename wallet ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename wallet ) simplename wallet ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename buyer ) simplename buyer ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename buyer ) simplename buyer ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename pre icotoken pushed ) simplename pre icotoken pushed ( simplename buyer ) simplename buyer ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: For pushing pre-ICO records .
ref: For pushing pre-ICO records .

23:
src: ( modifierdefinition ( simplename only controller ) simplename only controller ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename controller ) simplename controller ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: The address of the controller is the only address that can call a function with this modifier .
ref: The address of the controller is the only address that can call a function with this modifier .

24:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename holder data ) simplename holder data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename burn ) simplename burn ) memberaccess ( simplename amount ) simplename amount ( simplename holder data ) simplename holder data ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename can burn ) simplename can burn ) modifierinvocation ) functiondefinition
candidate: Function to burn tokens .
ref: Burns _amount tokens from _tokenHolder .

25:
src: ( functiondefinition ( simplename burn tokens ) simplename burn tokens ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename addr ) simplename addr ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total remain supply ) simplename total remain supply ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename addr ) simplename addr ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( emitstatement ( functioncall ( simplename burn token ) simplename burn token ( simplename addr ) simplename addr ( simplename amount ) simplename amount ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename addr ) simplename addr ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount ) simplename amount ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Destroy tokens from owners account .
ref: Destroy tokens from owners account .

26:
src: ( functiondefinition ( simplename fund ) simplename fund ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename platform ) simplename platform ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename platform id ) simplename platform id ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename do funding ) simplename do funding ( simplename platform ) simplename platform ( simplename platform id ) simplename platform id ( simplename token ) simplename token ( simplename value ) simplename value ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Public function that allows a user to create a fund .
ref: Public function , can only be called from the outside .

27:
src: ( functiondefinition ( simplename register module ) simplename register module ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename module factory ) simplename module factory ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename registry ) simplename registry ( simplename module factory ) simplename module factory ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename module factory ) simplename module factory ( simpletype ( simplename imodule factory ) simplename imodule factory ) simpletype ) variabledeclaration ( functioncall ( simplename imodule factory ) simplename imodule factory ( simplename module factory ) simplename module factory ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( functioncall ( memberaccess ( simplename module factory ) simplename module factory ( simplename get type ) simplename get type ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename registry ) simplename registry ( simplename module factory ) simplename module factory ) indexaccess ( functioncall ( memberaccess ( simplename module factory ) simplename module factory ( simplename get type ) simplename get type ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename module list ) simplename module list ( functioncall ( memberaccess ( simplename module factory ) simplename module factory ( simplename get type ) simplename get type ) memberaccess ) functioncall ) indexaccess ( simplename push ) simplename push ) memberaccess ( simplename module factory ) simplename module factory ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename reputation ) simplename reputation ( simplename module factory ) simplename module factory ) indexaccess ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log module registered ) simplename log module registered ( simplename module factory ) simplename module factory ( functioncall ( memberaccess ( simplename module factory ) simplename module factory ( simplename owner ) simplename owner ) memberaccess ) functioncall ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Registers a module with factory .
ref: Called by <UNK> owner to register new modules for SecurityToken to use .

28:
src: ( functiondefinition ( simplename submit trade ) simplename submit trade ( visibility external ) visibility external ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dest ) simplename dest ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename flash lender ) simplename flash lender ( simplename lender ) simplename lender ) functioncall ( simplename borrow ) simplename borrow ) memberaccess ( simplename token ) simplename token ( simplename amount ) simplename amount ( simplename dest ) simplename dest ( simplename data ) simplename data ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allow the owner to submit a given address .
ref: Borrow from flash lender to execute arbitrage trade .

29:
src: ( functiondefinition ( simplename attack ) simplename attack ( visibility internal ) visibility internal ( variabledeclaration ( simplename hero id ) simplename hero id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename genes ) simplename genes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hero strength ) simplename hero strength ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hero current health ) simplename hero current health ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename monster ) simplename monster ( simpletype ( simplename monster ) simplename monster ) simpletype ) variabledeclaration ( indexaccess ( simplename hero id to monster ) simplename hero id to monster ( simplename hero id ) simplename hero id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current level ) simplename current level ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( memberaccess ( simplename monster ) simplename monster ( simplename level ) simplename level ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename hero power ) simplename hero power ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename hero power ) simplename hero power ) tupleexpression ( functioncall ( memberaccess ( simplename ed core contract ) simplename ed core contract ( simplename get hero power ) simplename get hero power ) memberaccess ( simplename genes ) simplename genes ( simplename dungeon difficulty ) simplename dungeon difficulty ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename damage by monster ) simplename damage by monster ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename damage by hero ) simplename damage by hero ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename damage by hero ) simplename damage by hero ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename hero strength ) simplename hero strength ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename hero power ) simplename hero power ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( tupleexpression ( binaryoperation + ) binaryoperation + ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simplename get random number ) simplename get random number ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ) tupleexpression ) tupleexpression ( memberaccess ( simplename tx ) simplename tx ( simplename gasprice ) simplename gasprice ) memberaccess ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is monster defeated ) simplename is monster defeated ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation >= ) binaryoperation >= ( simplename damage by hero ) simplename damage by hero ( memberaccess ( simplename monster ) simplename monster ( simplename health ) simplename health ) memberaccess ) variabledeclarationstatement ( ifstatement ( simplename is monster defeated ) simplename is monster defeated ( block ( variabledeclarationstatement ( variabledeclaration ( simplename rewards ) simplename rewards ( simpletype
candidate: Internal function of attack , assume all parameter checking is done .
ref: Internal function of attack , assume all parameter checking is done .

30:
src: ( functiondefinition ( simplename extended asset <UNK> ) simplename extended asset <UNK> ( visibility internal ) visibility internal ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename current entity state ) simplename current entity state ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename proposals entity ) simplename proposals entity ( simplename process ) simplename process ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Update the DApp state of the 2 stages of the 3 .
ref: use this when extending asset state <UNK> .

31:
src: ( functiondefinition ( simplename get current sale rate ) simplename get current sale rate ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename get sale rate ) simplename get sale rate ( simplename base tokens sold ) simplename base tokens sold ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the current rate .
ref: Convenience method for users .

32:
src: ( functiondefinition ( simplename transfer ownership ) simplename transfer ownership ( visibility public ) visibility public ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( simplename owner ) simplename owner ) expressionstatement ( emitstatement ( functioncall ( simplename ownership transferred ) simplename ownership transferred ( simplename owner ) simplename owner ( simplename owner ) simplename owner ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the current owner to transfer control of the contract to a newOwner .
ref: Allows the current owner to transfer control of the contract to a new owner .

33:
src: ( functiondefinition ( simplename get token amount ) simplename get token amount ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename mul ) simplename mul ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ( simplename div ) simplename div ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename rate decimals ) simplename rate decimals ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Override to extend the way in which ether is converted to tokens .
ref: Overrides parent method taking into account variable rate .

34:
src: ( functiondefinition ( simplename transfer to contract ) simplename transfer to contract ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename move tokens ) simplename move tokens ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename erc223 receiver <UNK> ) simplename erc223 receiver <UNK> ( simplename to ) simplename to ) functioncall ( simplename token fallback ) simplename token fallback ) memberaccess ( simplename from ) simplename from ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer the specified amount of tokens to the specified address .
ref: function that is called when transaction target is a contract .

35:
src: ( functiondefinition ( simplename get game lock ) simplename get game lock ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename game address ) simplename game address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename is game locked ) simplename is game locked ( simplename game address ) simplename game address ) indexaccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename game lock ) simplename game lock ( simpletype ( simplename game lock ) simplename game lock ) simpletype ) variabledeclaration ( indexaccess ( simplename game locks ) simplename game locks ( simplename game address ) simplename game address ) indexaccess ) variabledeclarationstatement ( returnstatement ( tupleexpression ( memberaccess ( simplename game lock ) simplename game lock ( simplename amount ) simplename amount ) memberaccess ( memberaccess ( simplename game lock ) simplename game lock ( simplename lock duration ) simplename lock duration ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Gets game lock state .
ref: Get <UNK> parameters : CRB amount locked , CRB lock duration .

36:
src: ( functiondefinition ( simplename valid purchase ) simplename valid purchase ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within cap ) simplename within cap ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename hard cap ) simplename hard cap ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename valid purchase ) simplename valid purchase ) memberaccess ) functioncall ( simplename within cap ) simplename within cap ) returnstatement ) block ) functiondefinition
candidate: true if investors can buy at the moment .
ref: true if investors can buy at the moment .

37:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename burner ) simplename burner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename burn ) simplename burn ( simplename burner ) simplename burner ( simplename value ) simplename value ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename burner ) simplename burner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename value ) simplename value ) functioncall ) emitstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename addresses ) simplename addresses ( indexaccess ( simplename indexes ) simplename indexes ( simplename burner ) simplename burner ) indexaccess ) indexaccess ( indexaccess ( simplename addresses ) simplename addresses ( simplename last index ) simplename last index ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename indexes ) simplename indexes ( indexaccess ( simplename addresses ) simplename addresses ( simplename last index ) simplename last index ) indexaccess ) indexaccess ( indexaccess ( simplename indexes ) simplename indexes ( simplename burner ) simplename burner ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename indexes ) simplename indexes ( simplename burner ) simplename burner ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename addresses ) simplename addresses ( simplename last index ) simplename last index ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( simplename last index ) simplename last index ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Burns a specific amount of tokens .
ref: Burns a specific amount of tokens .

38:
src: ( functiondefinition ( simplename get collectible details ) simplename get collectible details ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename is attached ) simplename is attached ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sequence id ) simplename sequence id ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team id ) simplename team id ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename position id ) simplename position id ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename creation time ) simplename creation time ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename attributes ) simplename attributes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename player override id ) simplename player override id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename mlb game id ) simplename mlb game id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current game card id ) simplename current game card id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename mlb player id ) simplename mlb player id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename earned by ) simplename earned by ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename generation season ) simplename generation season ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename obj ) simplename obj ( simpletype ( simplename nft ) simplename nft ) simpletype ) variabledeclaration ( functioncall ( simplename get attributes of token ) simplename get attributes of token ( simplename token id ) simplename token id ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename attributes ) simplename attributes ( memberaccess ( simplename obj ) simplename obj ( simplename attributes ) simplename attributes ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current game card id ) simplename current game card id ( memberaccess ( simplename obj ) simplename obj ( simplename current game card id ) simplename current game card id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mlb game id ) simplename mlb game id ( memberaccess ( simplename obj ) simplename obj ( simplename mlb game id ) simplename mlb game id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename player override id ) simplename player override id ( memberaccess ( simplename obj ) simplename obj ( simplename player override id ) simplename player override id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mlb player id ) simplename mlb player id ( memberaccess ( simplename obj ) simplename obj ( simplename mlb player id ) simplename mlb player id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename creation time ) simplename creation time ( functioncall ( simpletypeexpression
candidate: Returns the details of a collectible .
ref: Get details about your collectible .

39:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility internal ) visibility internal ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ert value ) simplename ert value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename started ) simplename started ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename ert value ) simplename ert value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename sold ) simplename sold ( simplename ert value ) simplename ert value ( simplename tokens for sale ) simplename tokens for sale ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename ert ) simplename ert ( simplename mint ) simplename mint ) memberaccess ( simplename investor ) simplename investor ( simplename ert value ) simplename ert value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sold ) simplename sold ( functioncall ( memberaccess ( simplename sold ) simplename sold ( simplename add ) simplename add ) memberaccess ( simplename ert value ) simplename ert value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Send tokens to investors who paid in the investor and then freeze the contract .
ref: internal function for buying tokens .

40:
src: ( functiondefinition ( simplename transfer basic ) simplename transfer basic ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens owed sender ) simplename tokens owed sender ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens owed receiver ) simplename tokens owed receiver ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bal sender ) simplename bal sender ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of basic ) simplename balance of basic ( simplename from ) simplename from ) functioncall ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename reward generation complete ) simplename reward generation complete ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens owed sender ) simplename tokens owed sender ( functioncall ( simplename tokens owed ) simplename tokens owed ( simplename from ) simplename from ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( tupleexpression ( functioncall ( memberaccess ( simplename bal sender ) simplename bal sender ( simplename add ) simplename add ) memberaccess ( simplename tokens owed sender ) simplename tokens owed sender ) functioncall ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens owed receiver ) simplename tokens owed receiver ( functioncall ( simplename tokens owed ) simplename tokens owed ( simplename to ) simplename to ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( tupleexpression ( functioncall ( memberaccess ( simplename tokens owed sender ) simplename tokens owed sender ( simplename add ) simplename add ) memberaccess ( simplename tokens owed receiver ) simplename tokens owed receiver ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename increase total supply ) simplename increase total supply ( functioncall ( memberaccess ( simplename tokens owed sender ) simplename tokens owed sender ( simplename add ) simplename add ) memberaccess ( simplename tokens owed receiver ) simplename tokens owed receiver ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pending rewards to mint ) simplename pending rewards to mint ( functioncall ( memberaccess ( simplename pending rewards to mint ) simplename pending rewards to mint ( simplename sub ) simplename sub ) memberaccess ( functioncall ( memberaccess ( simplename tokens owed sender ) simplename tokens owed sender ( simplename add ) simplename add ) memberaccess ( simplename tokens owed receiver ) simplename tokens owed receiver ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename raise event if minted ) simplename raise event if minted ( simplename from ) simplename from ( simplename tokens owed sender ) simplename tokens owed sender ) functioncall ) expressionstatement ( expressionstatement ( functioncall
candidate: This method is used to verify the settings of a .
ref: This function is called by both transfer and transferFrom .

41:
src: ( functiondefinition ( simplename finalise ico ) simplename finalise ico ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename token sale active ) simplename token sale active ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens left ) simplename tokens left ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename ico total amount ) simplename ico total amount ( simplename sub ) simplename sub ) memberaccess ( simplename total sold token ) simplename total sold token ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token sale active ) simplename token sale active ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens left ) simplename tokens left ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename contributors address ) simplename contributors address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename contributors address ) simplename contributors address ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename tokens left ) simplename tokens left ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token sale finished ) simplename token sale finished ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename contributors address ) simplename contributors address ( simplename ico total amount ) simplename ico total amount ( simplename total sold token ) simplename total sold token ( simplename tokens left ) simplename tokens left ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total sold token ) simplename total sold token ( simplename ico total amount ) simplename ico total amount ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Mint the specified amount of tokens for the ICO and redistribute tokens ( if any ) .
ref: send the rest of the tokens after the crowdsale end and send to contributors address .

42:
src: ( functiondefinition ( simplename distribute airdrop ) simplename distribute airdrop ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addresses ) simplename addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename addresses ) simplename addresses ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename frozen account ) simplename frozen account ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral false ) booleanliteral false ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( indexaccess ( simplename unlock unix time ) simplename unlock unix time ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total amount ) simplename total amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename addresses ) simplename addresses ( simplename length ) simplename length ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename total amount ) simplename total amount ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename j ) simplename j ( memberaccess ( simplename addresses ) simplename addresses ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename j ) simplename j ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename addresses ) simplename addresses ( simplename j ) simplename j ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename frozen account ) simplename frozen account ( indexaccess ( simplename addresses ) simplename addresses ( simplename j ) simplename j ) indexaccess ) indexaccess ( booleanliteral false ) booleanliteral false ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( indexaccess ( simplename unlock unix time )
candidate: Function to distribute tokens to the list of addresses by the provided amount .
ref: Function to distribute tokens to the list of addresses by the provided amount .

43:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( returnstatement ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Gets the balance of the specified address .
ref: To get the token balance of a user .

44:
src: ( functiondefinition ( simplename claim token ownership ) simplename claim token ownership ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename <UNK> i ) simplename <UNK> i ( simplename token ) simplename token ) functioncall ( simplename transfer ownership to ) simplename transfer ownership to ) memberaccess ( simplename to ) simplename to ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to claim the token to the trading .
ref: transfer token <UNK> .

45:
src: ( functiondefinition ( simplename set can claim partner bonus tokens phase1 ) simplename set can claim partner bonus tokens phase1 ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename can claim tokens ) simplename can claim tokens ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old can claim ) simplename old can claim ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( simplename can claim partner bonus tokens phase1 ) simplename can claim partner bonus tokens phase1 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename can claim partner bonus tokens phase1 ) simplename can claim partner bonus tokens phase1 ( simplename can claim tokens ) simplename can claim tokens ) expressionstatement ( expressionstatement ( functioncall ( simplename can claim tokens updated ) simplename can claim tokens updated ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename old can claim ) simplename old can claim ( simplename can claim tokens ) simplename can claim tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Updates the can claim period of the token swap at the moment .
ref: Updates the canClaimBonusTokens property with the new _canClaimTokens value .

46:
src: ( functiondefinition ( simplename power ) simplename power ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename base n ) simplename base n ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename base d ) simplename base d ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename exp n ) simplename exp n ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename exp d ) simplename exp d ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename precision ) simplename precision ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename logbase ) simplename logbase ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename ln ) simplename ln ( simplename base n ) simplename base n ( simplename base d ) simplename base d ( simplename precision ) simplename precision ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename fixed exp ) simplename fixed exp ( binaryoperation / ) binaryoperation / ( functioncall ( simplename safe mul ) simplename safe mul ( simplename logbase ) simplename logbase ( simplename exp n ) simplename exp n ) functioncall ( simplename exp d ) simplename exp d ( simplename precision ) simplename precision ) functioncall ) returnstatement ) block ) functiondefinition
candidate: General Description : .
ref: Calculates an integer <UNK> of ( _baseN / _baseD ) ( _expN / _expD ) * 2 <UNK> .

47:
src: ( functiondefinition ( simplename get first buyer address ) simplename get first buyer address ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename first buyer index ) simplename first buyer index ( simplename index ) simplename index ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: The index of the first node in the tree .
ref: get address of first buyer by index .

48:
src: ( functiondefinition ( simplename claim ) simplename claim ( visibility public ) visibility public ( variabledeclaration ( simplename channel id ) simplename channel id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payment ) simplename payment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename signature ) simplename signature ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename can claim ) simplename can claim ( simplename channel id ) simplename channel id ( simplename payment ) simplename payment ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename signature ) simplename signature ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename channel ) simplename channel ( simpletype ( simplename payment channel ) simplename payment channel ) simpletype ) variabledeclaration ( indexaccess ( simplename channels ) simplename channels ( simplename channel id ) simplename channel id ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename payment ) simplename payment ( memberaccess ( simplename channel ) simplename channel ( simplename value ) simplename value ) memberaccess ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename channel ) simplename channel ( simplename receiver ) simplename receiver ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename channel ) simplename channel ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename channel ) simplename channel ( simplename receiver ) simplename receiver ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename payment ) simplename payment ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename channel ) simplename channel ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename channel ) simplename channel ( simplename value ) simplename value ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename payment ) simplename payment ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename channels ) simplename channels ( simplename channel id ) simplename channel id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename did claim ) simplename did claim ( simplename channel id ) simplename channel id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Claim all msg . sender .
ref: Claim the funds , and close the channel .

49:
src: ( functiondefinition ( simplename update purchasing state ) simplename update purchasing state ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename update purchasing state ) simplename update purchasing state ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename cap reached ) simplename cap reached ) functioncall ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename private sale ) simplename private sale ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename finalised private sale ) simplename finalised private sale ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token cap ) simplename token cap ( functioncall ( simplename get current tier hardcap ) simplename get current tier hardcap ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename increment tiered state ) simplename increment tiered state ( functioncall ( simplename get state ) simplename get state ) functioncall ) functioncall ) emitstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename pre sale ) simplename pre sale ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename finalised pre sale ) simplename finalised pre sale ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token cap ) simplename token cap ( functioncall ( simplename get current tier hardcap ) simplename get current tier hardcap ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename increment tiered state ) simplename increment tiered state ( functioncall ( simplename get state ) simplename get state ) functioncall ) functioncall ) emitstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename public sale tier1 ) simplename public sale tier1 ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename sale state ) simplename sale state ( simplename public sale tier2 ) simplename public sale tier2 ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token cap ) simplename token cap ( functioncall ( simplename get current tier hardcap ) simplename get current tier hardcap ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename increment tiered state ) simplename increment tiered state ( functioncall ( simplename get state ) simplename get state ) functioncall ) functioncall ) emitstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation ==
candidate: Update the state of the crowdsale .
ref: only allow onwer to modify the current SaleState .

50:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename unlock owner date ) simplename unlock owner date ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ( simplename amount locked ) simplename amount locked ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: Transfers token for a specified address .

51:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( simplename owner ) simplename owner ( simplename byuout active ) simplename byuout active ( binaryoperation > ) binaryoperation > ( simplename byuout count ) simplename byuout count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus ) simplename bonus ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( simplename byuout count ) simplename byuout count ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus ) simplename bonus ( functioncall ( memberaccess ( simplename byuout count ) simplename byuout count ( simplename mul ) simplename mul ) memberaccess ( simplename price for base part ) simplename price for base part ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus ) simplename bonus ( functioncall ( memberaccess ( simplename value ) simplename value ( simplename mul ) simplename mul ) memberaccess ( simplename price for base part ) simplename price for base part ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename byuout count ) simplename byuout count ( functioncall ( memberaccess ( simplename byuout count ) simplename byuout count ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename bonus ) simplename bonus ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename add token holder ) simplename add token holder ( simplename to ) simplename to ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) functiondefinition
candidate: transfer action , only owner can transfer with ERC20 transaction .
ref: transfer method , with byuout .

52:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename pixel id ) simplename pixel id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename pixel to owner ) simplename pixel to owner ( simplename pixel id ) simplename pixel id ) indexaccess ) variabledeclarationstatement ( returnstatement ( simplename owner ) simplename owner ) returnstatement ) block ) functiondefinition
candidate: returns the owner of a pixel .
ref: returns the owner of a pixel .

53:
src: ( functiondefinition ( simplename referral sale ) simplename referral sale ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename referrer ) simplename referrer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename sale ) simplename sale ( simplename beneficiary ) simplename beneficiary ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename referrer ) simplename referrer ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: sale of this referrer .
ref: Sell tokens via <UNK> contract .

54:
src: ( functiondefinition ( simplename get approved ) simplename get approved ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename approved transfers ) simplename approved transfers ( simplename token id ) simplename token id ) indexaccess ) returnstatement ) block ( modifierinvocation ( simplename only valid token ) simplename only valid token ( simplename token id ) simplename token id ) modifierinvocation ) functiondefinition
candidate: Get the approved address for a single NFT .
ref: Get approved address for given token .

55:
src: ( functiondefinition ( simplename create proxy address ) simplename create proxy address ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename proxy ) simplename proxy ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename crowdsale proxy ) simplename crowdsale proxy ) simpletype ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename target crowdsale ) simplename target crowdsale ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename proxy created ) simplename proxy created ( simplename proxy ) simplename proxy ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( simplename proxy ) simplename proxy ) returnstatement ) block ) functiondefinition
candidate: The address of the proxy which should be called by the proxy .
ref: The address of the deposit address .

56:
src: ( functiondefinition ( simplename reset beneficiary list ) simplename reset beneficiary list ( visibility default ) visibility default ( block ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( simplename m beneficiaries ) simplename m beneficiaries ) expressionstatement ) block ( modifierinvocation ( simplename admin only ) simplename admin only ) modifierinvocation ) functiondefinition
candidate: Reset the beneficiary address .
ref: reset beneficiary list .

57:
src: ( functiondefinition ( simplename return rate ) simplename return rate ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename start block ) simplename start block ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end block ) simplename end block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: return the number of tokens which will return the price of tokens based on the current ether .
ref: Return rate of token against ether .

58:
src: ( functiondefinition ( simplename sell cards ) simplename sell cards ( visibility external ) visibility external ( variabledeclaration ( simplename unit id ) simplename unit id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename cards ) simplename cards ( simplename get game started ) simplename get game started ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename existing ) simplename existing ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename cards ) simplename cards ( simplename get owned count ) simplename get owned count ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename unit id ) simplename unit id ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename existing ) simplename existing ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename existing ) simplename existing ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename existing ) simplename existing ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename coin change ) simplename coin change ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename decrease coin ) simplename decrease coin ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename schema unit id ) simplename schema unit id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename coin production ) simplename coin production ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename coin cost ) simplename coin cost ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename eth cost ) simplename eth cost ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename sellable ) simplename sellable ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename unit id ) simplename unit id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename schema unit id ) simplename schema unit id ( simplename coin cost ) simplename coin cost ( simplename eth cost ) simplename eth cost ( simplename sellable ) simplename sellable ) tupleexpression ( functioncall ( memberaccess ( simplename schema ) simplename schema ( simplename get battle card info ) simplename get battle card info ) memberaccess ( simplename unit id ) simplename unit id ( simplename existing ) simplename existing ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename schema unit id )
candidate: Allows a user to buy with a game .
ref: sell out cards , upgrade cards can not be sold .

59:
src: ( modifierdefinition ( simplename only irnnode ) simplename only irnnode ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( indexaccess ( simplename network ) simplename network ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is irnnode ) simplename is irnnode ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Only allow the execution of the function if it's comming from crowdsale .
ref: only <UNK> <UNK> can call , otherwise throw .

60:
src: ( functiondefinition ( simplename set core ) simplename set core ( visibility default ) visibility default ( variabledeclaration ( simplename core ) simplename core ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename core address ) simplename core address ( simplename core ) simplename core ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename core ) simplename core ( functioncall ( simplename dragon crowdsale core ) simplename dragon crowdsale core ( simplename core ) simplename core ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: set the limit for a smart contract .
ref: set the dragon crowdsalecore contract .

61:
src: ( functiondefinition ( simplename prepare ) simplename prepare ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename rand ) simplename rand ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename token ) simplename token ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename rand ) simplename rand ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( functioncall ( memberaccess ( functioncall ( simplename erc20 ) simplename erc20 ( simplename token ) simplename token ) functioncall ( simplename allowance ) simplename allowance ) memberaccess ( simplename from ) simplename from ( simplename this ) simplename this ) functioncall ( simplename value ) simplename value ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename rand ) simplename rand ( memberaccess ( simplename drop token addrs ) simplename drop token addrs ( simplename length ) simplename length ) memberaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename drop token contract ) simplename drop token contract ( simpletype ( simplename simple fly drop token ) simplename simple fly drop token ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename simple fly drop token ) simplename simple fly drop token ) simpletype ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename drop token addrs ) simplename drop token addrs ( simplename push ) simplename push ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename drop token contract ) simplename drop token contract ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current drop token contract ) simplename current drop token contract ( simplename drop token contract ) simplename drop token contract ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current drop token contract ) simplename current drop token contract ( functioncall ( simplename simple fly drop token ) simplename simple fly drop token ( indexaccess ( simplename drop token addrs ) simplename drop token addrs ( functioncall ( memberaccess ( simplename rand ) simplename rand ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess
candidate: can be used only by the client .
ref: Send tokens to other multi addresses in one function .

62:
src: ( functiondefinition ( simplename supply ) simplename supply ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation - ) binaryoperation - ( simplename total supply ) simplename total supply ( indexaccess ( simplename balance of ) simplename balance of ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get the total supply of CTN coins .
ref: Shows the total supply of token on the ethereum blockchain .

63:
src: ( functiondefinition ( simplename set hard cap ) simplename set hard cap ( visibility public ) visibility public ( variabledeclaration ( simplename hard cap ) simplename hard cap ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename hard cap ) simplename hard cap ( functioncall ( simplename hard cap ) simplename hard cap ( simplename hard cap ) simplename hard cap ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set hard cap .
ref: Allows the owner to set the hardcap contract .

64:
src: ( functiondefinition ( simplename collect tokens ) simplename collect tokens ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename collected tokens ) simplename collected tokens ( simplename add ) simplename add ) memberaccess ( simplename balance ) simplename balance ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename finalized time ) simplename finalized time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename crowdsale ) simplename crowdsale ( simplename finish time ) simplename finish time ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename finalized time ) simplename finalized time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( functioncall ( simplename get time ) simplename get time ) functioncall ( functioncall ( memberaccess ( simplename finalized time ) simplename finalized time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename can extract ) simplename can extract ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename total ) simplename total ( simplename mul ) simplename mul ) memberaccess ( functioncall ( memberaccess ( functioncall ( simplename get time ) simplename get time ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename finalized time ) simplename finalized time ) functioncall ) functioncall ( simplename div ) simplename div ) memberaccess ( functioncall ( simplename months ) simplename months ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename can extract ) simplename can extract ( functioncall ( memberaccess ( simplename can extract ) simplename can extract ( simplename sub ) simplename sub ) memberaccess ( simplename collected tokens ) simplename collected tokens ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename can extract ) simplename can extract ( simplename balance ) simplename balance ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename can extract ) simplename can extract ( simplename balance ) simplename balance ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename collected tokens ) simplename collected tokens ( functioncall ( memberaccess ( simplename collected tokens ) simplename collected tokens ( simplename add ) simplename add ) memberaccess ( simplename can extract ) simplename can extract ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename owner ) simplename owner ( simplename can extract ) simplename can extract ) functioncall
candidate: The Dev ( Owner ) will call this method to extract the tokens .
ref: The Dev ( Owner ) will call this method to extract the tokens .

65:
src: ( functiondefinition ( simplename send token ) simplename send token ( visibility external ) visibility external ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename send to ) simplename send to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename token ) simplename token ) simpletype ) variabledeclaration ( functioncall ( simplename token ) simplename token ( simplename token address ) simplename token address ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename send to ) simplename send to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Send all ERC20 compatible tokens .
ref: standard erc20 transfer / send function .

66:
src: ( functiondefinition ( simplename is un locked account ) simplename is un locked account ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename is unlocked account ) simplename is unlocked account ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( indexaccess ( simplename unlock unix time ) simplename unlock unix time ( simplename addr ) simplename addr ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Function to check the amount of tokens that an owner allowed to a certain account .
ref: check if the given account is not locked up .

67:
src: ( functiondefinition ( simplename remove approved game ) simplename remove approved game ( visibility public ) visibility public ( variabledeclaration ( simplename game address ) simplename game address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename approved games ) simplename approved games ( simplename game address ) simplename game address ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename remove item ) simplename remove item ( simplename game address ) simplename game address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Remove game from the approved address .
ref: Manually remove approved game .

68:
src: ( functiondefinition ( simplename do call ) simplename do call ( visibility public ) visibility public ( variabledeclaration ( simplename call key ) simplename call key ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename scheduled call lib ) simplename scheduled call lib ( simplename do call ) simplename do call ) memberaccess ( simplename call database ) simplename call database ( simplename call key ) simplename call key ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: call methods for calling sender .
ref: Call execution API .

69:
src: ( functiondefinition ( simplename set public release ) simplename set public release ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename date ) simplename date ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename public release ) simplename public release ( binaryoperation > ) binaryoperation > ( simplename date ) simplename date ( simplename public release ) simplename public release ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename date ) simplename date ( simplename sub ) simplename sub ) memberaccess ( simplename public release ) simplename public release ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename public release ) simplename public release ( simplename date ) simplename date ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( simplename public release ) simplename public release ( simplename partners release ) simplename partners release ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename updated public release date ) simplename updated public release date ( simplename date ) simplename date ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the release date for owner .
ref: Set a new release date for investor's transfers .

70:
src: ( functiondefinition ( simplename ether to send jackpot ) simplename ether to send jackpot ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename total eth jackpot collected ) simplename total eth jackpot collected ( simplename total eth jackpot recieved ) simplename total eth jackpot recieved ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Function for the frontend to dynamically retrieve the price scaling of buy orders .
ref: Function for the frontend to show ether waiting to be sent to Jackpot in contract .

71:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename has icoended ) simplename has icoended ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( simplename has ended ) simplename has ended ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename has icoended ) simplename has icoended ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( binaryoperation * ) binaryoperation * ( simplename soft cap ) simplename soft cap ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename refund to buyers ) simplename refund to buyers ( booleanliteral true ) booleanliteral true ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename has icoended ) simplename has icoended ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( binaryoperation * ) binaryoperation * ( simplename hard cap ) simplename hard cap ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename burn remaining tokens ) simplename burn remaining tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename is hard cap reached ) simplename is hard cap reached ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate per wei ) simplename rate per wei ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus ) simplename bonus ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename determine bonus ) simplename determine bonus ( simplename tokens ) simplename tokens ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename add ) simplename add ) memberaccess ( simplename bonus ) simplename bonus ) functioncall ) expressionstatement
candidate: low level token purchase function .
ref: low level token purchase function .

72:
src: ( functiondefinition ( simplename deposit eth ) simplename deposit eth ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename official address ) simplename official address ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename top total supply ) simplename top total supply ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: deposit ETH to contract .
ref: only owner can deposit ether into put option contract .

73:
src: ( functiondefinition ( simplename get job status ) simplename get job status ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename job id ) simplename job id ( simpletype ( simplename bytes16 ) simplename bytes16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hirer ) simplename hirer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename contractor ) simplename contractor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename job hash ) simplename job hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename get job hash ) simplename get job hash ( simplename job id ) simplename job id ( simplename hirer ) simplename hirer ( simplename contractor ) simplename contractor ( simplename value ) simplename value ( simplename fee ) simplename fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename status ) simplename status ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( simplename status job not exist ) simplename status job not exist ) variabledeclarationstatement ( ifstatement ( memberaccess ( indexaccess ( simplename job escrows ) simplename job escrows ( simplename job hash ) simplename job hash ) indexaccess ( simplename exists ) simplename exists ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename status ) simplename status ( memberaccess ( indexaccess ( simplename job escrows ) simplename job escrows ( simplename job hash ) simplename job hash ) indexaccess ( simplename status ) simplename status ) memberaccess ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename status ) simplename status ) returnstatement ) block ) functiondefinition
candidate: returns the status of the requested job .
ref: returns the status of the requested job .

74:
src: ( functiondefinition ( simplename transfer any <UNK> token ) simplename transfer any <UNK> token ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename transfer tokens ) simplename transfer tokens ( simplename token address ) simplename token address ( simplename owner ) simplename owner ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Owner can transfer out any accidentally sent ERC20 tokens .
ref: Owner can transfer out any accidentally sent <UNK> tokens .

75:
src: ( functiondefinition ( simplename set minimum funding limit ) simplename set minimum funding limit ( visibility default ) visibility default ( variabledeclaration ( simplename chf ) simplename chf ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimum funding chf ) simplename minimum funding chf ( simplename chf ) simplename chf ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Owner can set minimum funding cap .
ref: Allow reset the threshold .

76:
src: ( functiondefinition ( simplename verify balance proof ) simplename verify balance proof ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename receiver address ) simplename receiver address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename open block number ) simplename open block number ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint192 ) simplename uint192 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename balance msg sig ) simplename balance msg sig ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename message hash ) simplename message hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename receiver address ) simplename receiver address ( simplename open block number ) simplename open block number ( simplename balance ) simplename balance ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename signer ) simplename signer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename ecverify ) simplename ecverify ( simplename ecverify ) simplename ecverify ) memberaccess ( simplename message hash ) simplename message hash ( simplename balance msg sig ) simplename balance msg sig ) functioncall ) variabledeclarationstatement ( returnstatement ( simplename signer ) simplename signer ) returnstatement ) block ) functiondefinition
candidate: Verifies that an order signature is set .
ref: Returns the sender address extracted from the balance proof .

77:
src: ( functiondefinition ( simplename create district omni ) simplename create district omni ( visibility public ) visibility public ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename z ) simplename z ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dx ) simplename dx ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dz ) simplename dz ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename districts ) simplename districts ( simplename length ) simplename length ) memberaccess ( simplename district limit ) simplename district limit ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename create district ) simplename create district ( simplename x ) simplename x ( simplename z ) simplename z ( simplename dx ) simplename dx ( simplename dz ) simplename dz ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only coo ) simplename only coo ) modifierinvocation ) functiondefinition
candidate: Create a new Approve using and should be called by the owner before the end of CrowdSale .
ref: Creation of district properties , up to a limit .

78:
src: ( functiondefinition ( simplename withdraw mint tokens ) simplename withdraw mint tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous lock tokens ) simplename previous lock tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation - ) binaryoperation - ( simplename previous lock tokens ) simplename previous lock tokens ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ( functioncall ( memberaccess ( simplename previous lock tokens ) simplename previous lock tokens ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( binaryoperation - ) binaryoperation - ( simplename previous lock tokens ) simplename previous lock tokens ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename block number ) simplename block number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename withdraw mint tokens ) simplename withdraw mint tokens ( simplename owner ) simplename owner ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename non zero address ) simplename non zero address ( simplename owner ) simplename owner ) modifierinvocation ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ( modifierinvocation ( simplename only ) simplename only ( simplename messi community ) simplename messi community ) modifierinvocation ) functiondefinition
candidate: Function to mint tokens .
ref: Withdraw approval of minting _amount tokens that are assigned to _owner .

79:
src: ( functiondefinition ( simplename set data factory ) simplename set data factory ( visibility public ) visibility public ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename data ) simplename data ( functioncall ( simplename data ) simplename data ( simplename data ) simplename data ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the data for the contract .
ref: set data factory .

80:
src: ( functiondefinition ( simplename blacklist party ) simplename blacklist party ( visibility public ) visibility public ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename motion ) simplename motion ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename blacklist ) simplename blacklist ( simplename address ) simplename address ) indexaccess ( simplename motion ) simplename motion ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The owner can call function for the specified address .
ref: This allows the owner to stop a <UNK> party from <UNK> the orderbook .

81:
src: ( functiondefinition ( simplename valid purchase ) simplename valid purchase ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename is btc ) simplename is btc ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within period ) simplename within period ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename non zero purchase ) simplename non zero purchase ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation || ) binaryoperation || ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename is btc ) simplename is btc ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( simplename within period ) simplename within period ( simplename non zero purchase ) simplename non zero purchase ) returnstatement ) block ) functiondefinition
candidate: true if the transaction can buy tokens .
ref: true if the transaction can buy tokens .

82:
src: ( functiondefinition ( simplename forward funds ) simplename forward funds ( visibility internal ) visibility internal ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename data ) simplename data ) memberaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename referrer address ) simplename referrer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename bytes to <UNK> ) simplename bytes to <UNK> ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( memberaccess ( simplename msg ) simplename msg ( simplename data ) simplename data ) memberaccess ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename referrer address ) simplename referrer address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename token ) simplename token ) functioncall ( binaryoperation != ) binaryoperation != ( simplename referrer address ) simplename referrer address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename referrer amount ) simplename referrer amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( simplename referrer percent ) simplename referrer percent ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename referrers ) simplename referrers ( simplename referrer address ) simplename referrer address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename referrers ) simplename referrers ( simplename referrer address ) simplename referrer address ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename referrer amount ) simplename referrer amount ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( binaryoperation + ) binaryoperation + ( simplename opening time ) simplename opening time ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( block ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename vault ) simplename vault ( simplename deposit ) simplename deposit ) memberaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Determines how ETH is stored / forwarded on purchases .
ref: Determines how ETH is stored / forwarded on purchases .

83:
src: ( functiondefinition ( simplename bonus ) simplename bonus ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( functioncall ( memberaccess ( simplename start time ) simplename start time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) returnstatement ) ifstatement ( returnstatement ( simplename amount ) simplename amount ) returnstatement ) block ) functiondefinition
candidate: Compute the bonus according to the investment period .
ref: Compute the VenusCoin bonus according to the bonus period .

84:
src: ( functiondefinition ( simplename deposit ) simplename deposit ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log deposit ) simplename log deposit ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This function is used for the default function , allowing contracts to deposit .
ref: Deposit and withdraw .

85:
src: ( functiondefinition ( simplename distribute internal ) simplename distribute internal ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename spcdatasets event returns ) simplename spcdatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys ) simplename keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename spcdatasets event returns ) simplename spcdatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename fees ) simplename fees ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dust ) simplename dust ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename update masks ) simplename update masks ( simplename r id ) simplename r id ( simplename p id ) simplename p id ( simplename gen ) simplename gen ( simplename keys ) simplename keys ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename add ) simplename add ) memberaccess ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename event data ) simplename event data ( simplename gen amount ) simplename gen amount ) memberaccess ( functioncall ( memberaccess ( simplename gen ) simplename gen ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename gen amount ) simplename gen amount ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename event data ) simplename event data ( simplename pot amount ) simplename pot amount ) memberaccess ( simplename pot ) simplename pot
candidate: distributes eth based on fees to gen and pot .
ref: distributes eth based on fees to gen and pot .

86:
src: ( functiondefinition ( simplename get battle card info ) simplename get battle card info ( visibility external ) visibility external ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename card id ) simplename card id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename existing ) simplename existing ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename battlecard info ) simplename battlecard info ( simplename card id ) simplename card id ) indexaccess ( simplename card id ) simplename card id ) memberaccess ( functioncall ( simplename get cost for battle cards ) simplename get cost for battle cards ( simplename card id ) simplename card id ( simplename existing ) simplename existing ( simplename amount ) simplename amount ) functioncall ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename battlecard info ) simplename battlecard info ( simplename card id ) simplename card id ) indexaccess ( simplename eth cost ) simplename eth cost ) memberaccess ( simplename amount ) simplename amount ) functioncall ( memberaccess ( indexaccess ( simplename battlecard info ) simplename battlecard info ( simplename card id ) simplename card id ) indexaccess ( simplename unit sellable ) simplename unit sellable ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Get info about a specific card .
ref: for battle card .

87:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename tokens ) simplename tokens ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename tokens ) simplename tokens ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename tokens ) simplename tokens ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename tokens )
candidate: Transfer tokens from the from account to the to account .
ref: Transfer tokens from the from account to the to account .

88:
src: ( functiondefinition ( simplename receive approval ) simplename receive approval ( visibility public ) visibility public ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename token address ) simplename token address ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token value ) simplename token value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename calculate token sell ) simplename calculate token sell ( simplename tokens ) simplename tokens ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( simplename this ) simplename this ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename from ) simplename from ( simplename transfer ) simplename transfer ) memberaccess ( simplename token value ) simplename token value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Receive approved ERC20 tokens .
ref: Tokens are sold by sending them to this contract with ApproveAndCall .

89:
src: ( functiondefinition ( simplename get mining reward ) simplename get mining reward ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename digest ) simplename digest ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( indexaccess ( simplename solution for challenge ) simplename solution for challenge ( simplename challenge number ) simplename challenge number ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename decimals ) simplename decimals ) functioncall ) tupleexpression ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename epoch count ) simplename epoch count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement
candidate: Get the number of mining coins can be withdrawn from other than the mining coins .
ref: There's no limit to the coin supply reward follows more or less the same emmission rate as Dogecoins' .

90:
src: ( functiondefinition ( simplename create auction ) simplename create auction ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename auctions enabled ) simplename auctions enabled ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename token id ) simplename token id ) functioncall ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename authority address ) simplename authority address ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename token id to auction ) simplename token id to auction ( simplename token id ) simplename token id ) indexaccess ( simplename live ) simplename live ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename start price ) simplename start price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename pixel price ) simplename pixel price ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename authority address ) simplename authority address ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename start price ) simplename start price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename start price ) simplename start price ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pixel index to approved ) simplename pixel index to approved ( simplename token id ) simplename token id ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token id to auction ) simplename token id to auction ( simplename token id ) simplename token id ) indexaccess ( functioncall ( simplename auction ) simplename auction ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename start price ) simplename start price ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename duration ) simplename duration ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename auction started ) simplename auction started ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: The function that creates a new auction for the given token .
ref: create a new auctions for a given pixel , only owner or authority can do this .

91:
src: ( modifierdefinition ( simplename when not paused ) simplename when not paused ( block ( ifstatement ( simplename paused public ) simplename paused public ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename paused owner admin ) simplename paused owner admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier to make a function callable based on pause states .
ref: Modifier to make a function callable based on pause states .

92:
src: ( functiondefinition ( simplename change exchange rate ) simplename change exchange rate ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename rate ) simplename rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename exchange rate ) simplename exchange rate ( simplename rate ) simplename rate ) expressionstatement ( expressionstatement ( functioncall ( simplename change rate of token ) simplename change rate of token ( simplename now ) simplename now ( simplename rate ) simplename rate ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ( modifierinvocation ( simplename onlyfounder ) simplename onlyfounder ) modifierinvocation ) functiondefinition
candidate: Function to change the exchange rate of token .
ref: Function to change the exchange rate .

93:
src: ( functiondefinition ( simplename set sale period ) simplename set sale period ( visibility public ) visibility public ( variabledeclaration ( simplename start time ) simplename start time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename end time ) simplename end time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is finalized ) simplename is finalized ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename end time ) simplename end time ( simplename start time ) simplename start time ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename start time ) simplename start time ( simplename start time ) simplename start time ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename end time ) simplename end time ( simplename end time ) simplename end time ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: set the new sale start time .
ref: update startTime , endTime for <UNK> .

94:
src: ( functiondefinition ( simplename calc token amount ) simplename calc token amount ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename deadline one ) simplename deadline one ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename first rate ) simplename first rate ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename deadline one ) simplename deadline one ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename deadline two ) simplename deadline two ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename second rate ) simplename second rate ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename deadline two ) simplename deadline two ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename deadline three ) simplename deadline three ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename third rate ) simplename third rate ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename deadline three ) simplename deadline three ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename final rate ) simplename final rate ) expressionstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe mul ) simplename safe mul ( simplename price ) simplename price ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename decimal cut ) simplename decimal cut ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( conditional ( binaryoperation > ) binaryoperation > ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( memberaccess ( simplename ipc ) simplename ipc ( simplename decimals ) simplename decimals ) memberaccess ) functioncall ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( memberaccess ( simplename ipc ) simplename ipc ( simplename decimals ) simplename decimals ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename safe div ) simplename safe div ( simplename tokens ) simplename tokens ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype
candidate: calculates the amount of tokens which should be called from the contract .
ref: Calculate the token amount from the donated ETH <UNK> the bonus system .

95:
src: ( functiondefinition ( simplename total promotions ) simplename total promotions ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename all promotions ) simplename all promotions ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: return the total number of pixels owned by the caller .
ref: Returns the total number of promotions .

96:
src: ( functiondefinition ( simplename settle bet ) simplename settle bet ( visibility external ) visibility external ( variabledeclaration ( simplename maker bet id ) simplename maker bet id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename maker ) simplename maker ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename outcome ) simplename outcome ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename outcome ) simplename outcome ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( simplename outcome ) simplename outcome ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( simplename outcome ) simplename outcome ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( simplename outcome ) simplename outcome ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename maker bet ) simplename maker bet ( simpletype ( simplename maker bet ) simplename maker bet ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename maker bets ) simplename maker bets ( simplename maker bet id ) simplename maker bet id ) indexaccess ( simplename maker ) simplename maker ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename maker bet id ) simplename maker bet id ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename trusted verifier ) simplename trusted verifier ) memberaccess ( simplename addr ) simplename addr ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename total stake ) simplename total stake ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename bet status ) simplename bet status ( simplename settled ) simplename settled ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bet outcome ) simplename bet outcome ( simpletype ( simplename bet outcome ) simplename bet outcome ) simpletype ) variabledeclaration ( functioncall ( simplename bet outcome ) simplename bet outcome ( simplename outcome ) simplename outcome ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename outcome ) simplename outcome ) memberaccess ( simplename bet outcome ) simplename bet outcome ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename maker bet ) simplename maker bet ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename bet status ) simplename bet status ( simplename
candidate: Allows the owner to manually finalize the outcome of a bet .
ref: Settle a bet by trusted verifier .

97:
src: ( functiondefinition ( simplename set positive growth ) simplename set positive growth ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new block reward ) simplename new block reward ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename new block reward ) simplename new block reward ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename block reward changed ) simplename block reward changed ( simplename block reward ) simplename block reward ( simplename new block reward ) simplename new block reward ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename block reward ) simplename block reward ( simplename new block reward ) simplename new block reward ) expressionstatement ) block ( modifierinvocation ( simplename only gdporacle ) simplename only gdporacle ) modifierinvocation ) functiondefinition
candidate: Can only be called by the period when time has passed .
ref: Chnage block reward according to GDP .

98:
src: ( modifierdefinition ( simplename only admin ) simplename only admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename role admin address ) simplename role admin address ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to scope access to admins .
ref: Access modifier for Admin-only .

99:
src: ( modifierdefinition ( simplename within bounds ) simplename within bounds ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename x ) simplename x ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename x ) simplename x ( simplename global width ) simplename global width ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename y ) simplename y ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename y ) simplename y ( simplename global height ) simplename global height ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: checks that an address is calling .
ref: modifier to check if point is in bounds .

100:
src: ( functiondefinition ( simplename is whitelisted address ) simplename is whitelisted address ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename beneficiary ) simplename beneficiary ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Returns if address is whitelisted .
ref: Checks whether _beneficiary in whitelisted for the Presale And sale .

101:
src: ( functiondefinition ( simplename confirm ) simplename confirm ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename o success ) simplename o success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename h ) simplename h ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename to ) simplename to ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename data ) simplename data ) memberaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( variabledeclaration ( simplename created ) simplename created ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename to ) simplename to ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename created ) simplename created ( functioncall ( simplename create ) simplename create ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename data ) simplename data ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( functioncall ( memberaccess ( memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename to ) simplename to ) memberaccess ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename value ) simplename value ) memberaccess ) functioncall ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename data ) simplename data ) memberaccess ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename multi transact ) simplename multi transact ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename h ) simplename h ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h ) indexaccess ( simplename to ) simplename to ) memberaccess ( memberaccess ( indexaccess ( simplename m txs ) simplename m txs ( simplename h ) simplename h
candidate: confirm a transaction through just the hash .
ref: confirm a transaction through just the hash .

102:
src: ( functiondefinition ( simplename finished ) simplename finished ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename remainder ) simplename remainder ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log beneficiary paid ) simplename log beneficiary paid ( simplename owner ) simplename owner ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename transfer ) simplename transfer ) memberaccess ( simplename owner ) simplename owner ( simplename remainder ) simplename remainder ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log contributors payout ) simplename log contributors payout ( simplename owner ) simplename owner ( simplename remainder ) simplename remainder ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename successful ) simplename successful ) memberaccess ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to resume the crowdsale .
ref: To close the ICO and mark as <UNK> .

103:
src: ( functiondefinition ( simplename set investor whitelist ) simplename set investor whitelist ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename status ) simplename status ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename whitelister ) simplename whitelister ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename investor whitelist ) simplename investor whitelist ( simplename addr ) simplename addr ) indexaccess ( simplename status ) simplename status ) expressionstatement ( expressionstatement ( functioncall ( simplename whitelisted ) simplename whitelisted ( simplename addr ) simplename addr ( simplename status ) simplename status ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allow addresses to do early participation .
ref: Allow addresses to do early participation .

104:
src: ( functiondefinition ( simplename set consolation rewards required faith ) simplename set consolation rewards required faith ( visibility external ) visibility external ( variabledeclaration ( simplename new consolation rewards required faith ) simplename new consolation rewards required faith ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename consolation rewards required faith ) simplename consolation rewards required faith ( simplename new consolation rewards required faith ) simplename new consolation rewards required faith ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Changes required golds to level up a player and set their rewards .
ref: Updates the required amount of faith to get a portion of the consolation rewards .

105:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility external ) visibility external ( block ( ifstatement ( simplename is finalized ) simplename is finalized ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename funding end block ) simplename funding end block ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename total supply ) simplename total supply ( simplename token creation min ) simplename token creation min ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename bat fund deposit ) simplename bat fund deposit ( throwstatement throw ) throwstatement throw ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bat val ) simplename bat val ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename bat val ) simplename bat val ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename safe subtract ) simplename safe subtract ( simplename total supply ) simplename total supply ( simplename bat val ) simplename bat val ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eth val ) simplename eth val ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename bat val ) simplename bat val ( simplename token exchange rate ) simplename token exchange rate ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename log refund ) simplename log refund ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename eth val ) simplename eth val ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( simplename eth val ) simplename eth val ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ) block ) functiondefinition
candidate: Investors can claim refund .
ref: Allows contributors to recover their ether in the case of a failed funding campaign .

106:
src: ( functiondefinition ( simplename pay carnita ) simplename pay carnita ( visibility public ) visibility public ( variabledeclaration ( simplename gas used ) simplename gas used ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename winner ) simplename winner ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simplename rand ) simplename rand ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename address manager ) simplename address manager ( simplename transfer ) simplename transfer ) memberaccess ( simplename gas used ) simplename gas used ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename <UNK> ) simplename <UNK> ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename bitso address ) simplename bitso address ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation * ) binaryoperation * ( memberaccess ( memberaccess ( indexaccess ( simplename carnitas ) simplename carnitas ( simplename last carnita ) simplename last carnita ) indexaccess ( simplename participants ) simplename participants ) memberaccess ( simplename length ) simplename length ) memberaccess ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( simplename bitso address ) simplename bitso address ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation * ) binaryoperation * ( memberaccess ( memberaccess ( indexaccess ( simplename carnitas ) simplename carnitas ( simplename last carnita ) simplename last carnita ) indexaccess ( simplename participants ) simplename participants ) memberaccess ( simplename length ) simplename length ) memberaccess ( simplename to <UNK> ) simplename to <UNK> ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( memberaccess ( indexaccess ( simplename carnitas ) simplename carnitas ( simplename last carnita ) simplename last carnita ) indexaccess ( simplename participants ) simplename participants ) memberaccess ( simplename winner ) simplename winner ) indexaccess ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename halted ) simplename halted ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename new carnita ) simplename new carnita ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ) functiondefinition
candidate: Pay with additional gas .
ref: pay the <UNK> .

107:
src: ( functiondefinition ( simplename get rate ) simplename get rate ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename phase 1 remaining tokens ) simplename phase 1 remaining tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename phase 1 rate ) simplename phase 1 rate ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename phase 2 remaining tokens ) simplename phase 2 remaining tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename phase 2 rate ) simplename phase 2 rate ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename phase 3 remaining tokens ) simplename phase 3 remaining tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename phase 3 rate ) simplename phase 3 rate ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename phase 4 remaining tokens ) simplename phase 4 remaining tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename phase 4 rate ) simplename phase 4 rate ) functioncall ) returnstatement ) block ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: check token sale rate .
ref: return specific rate .

108:
src: ( functiondefinition ( simplename propose ) simplename propose ( visibility public ) visibility public ( variabledeclaration ( simplename proposed address ) simplename proposed address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is proposed ) simplename is proposed ( simplename proposed address ) simplename proposed address ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename p ) simplename p ( simpletype ( simplename proposal ) simplename proposal ) simpletype ) variabledeclaration ( indexaccess ( simplename proposals ) simplename proposals ( simplename proposed address ) simplename proposed address ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename p ) simplename p ( simplename created timestamp ) simplename created timestamp ) memberaccess ( simplename now ) simplename now ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename p ) simplename p ( simplename index ) simplename index ) memberaccess ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename proposal index ) simplename proposal index ( simplename push ) simplename push ) memberaccess ( simplename proposed address ) simplename proposed address ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename only at stage ) simplename only at stage ( memberaccess ( simplename stages ) simplename stages ( simplename deployed ) simplename deployed ) memberaccess ) modifierinvocation ) functiondefinition
candidate: onlyOwner can propose a new proposal .
ref: Propose the transfer token ownership and all funds to _proposedAddress .

109:
src: ( functiondefinition ( simplename change deadline ) simplename change deadline ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new deadline ) simplename new deadline ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( tupleexpression ( unaryoperation ! ) unaryoperation ! ( simplename provider locked ) simplename provider locked ) tupleexpression ( tupleexpression ( unaryoperation ! ) unaryoperation ! ( simplename provider disputed ) simplename provider disputed ) tupleexpression ( tupleexpression ( unaryoperation ! ) unaryoperation ! ( simplename provider completed ) simplename provider completed ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ) simplename status ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename deadline changed ) simplename deadline changed ( simplename new deadline ) simplename new deadline ( simplename deadline ) simplename deadline ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename deadline ) simplename deadline ( simplename new deadline ) simplename new deadline ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only requester ) simplename only requester ) modifierinvocation ) functiondefinition
candidate: Change the goal of the contract .
ref: adjusts the Deadline of the Escrow contract by which completion is needed .

110:
src: ( functiondefinition ( simplename chk admin ) simplename chk admin ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename admins ) simplename admins ( simplename address ) simplename address ) indexaccess ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Check is KYC contract .
ref: Check is the address is in Admin list .

111:
src: ( functiondefinition ( simplename cancel sell to black market ) simplename cancel sell to black market ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename num orders canceled ) simplename num orders canceled ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename quantity ) simplename quantity ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ratio ) simplename price ratio ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename continue after first match ) simplename continue after first match ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename exists ) simplename exists ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename match found ) simplename match found ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( booleanliteral false ) booleanliteral false ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename offer node index ) simplename offer node index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename offer node index to process ) simplename offer node index to process ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename exists ) simplename exists ( simplename offer node index ) simplename offer node index ) tupleexpression ( functioncall ( memberaccess ( simplename black market offers sorted ) simplename black market offers sorted ( simplename get adjacent ) simplename get adjacent ) memberaccess ( simplename head ) simplename head ( simplename next ) simplename next ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename exists ) simplename exists ( returnstatement ( tupleexpression ( booleanliteral false ) booleanliteral false ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) returnstatement ) ifstatement ( dowhilestatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename offer node index ) simplename offer node index ( simplename null ) simplename null ( simplename exists ) simplename exists ( tupleexpression ( binaryoperation || ) binaryoperation || ( unaryoperation ! ) unaryoperation ! ( simplename match found ) simplename match found ( simplename continue after first match ) simplename continue after first match ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename offer node index to process ) simplename offer node index to process ( simplename offer node index ) simplename offer node index ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename exists ) simplename exists ( simplename offer node index ) simplename offer node index ) tupleexpression ( functioncall ( memberaccess ( simplename black market offers sorted ) simplename black market offers sorted ( simplename get adjacent ) simplename get adjacent ) memberaccess ( simplename offer node index ) simplename offer node index ( simplename next ) simplename next ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename black market offers map ) simplename black market offers map ( simplename offer node index to process )
candidate: Put the offer on the black list .
ref: Cancel order on the blackmarket to sell a certain quantity of coke at a certain price .

112:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility external ) visibility external ( variabledeclaration ( simplename percent of total ) simplename percent of total ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename master ) simplename master ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( simplename funding ) simplename funding ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename funding ) simplename funding ( booleanliteral false ) booleanliteral false ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename additional tokens ) simplename additional tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename total tokens ) simplename total tokens ( simplename percent of total ) simplename percent of total ( tupleexpression ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename percent of total ) simplename percent of total ) tupleexpression ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total tokens ) simplename total tokens ( simplename additional tokens ) simplename additional tokens ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename master ) simplename master ) indexaccess ( simplename additional tokens ) simplename additional tokens ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename master ) simplename master ( simplename additional tokens ) simplename additional tokens ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename master ) simplename master ( simplename send ) simplename send ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ) block ) functiondefinition
candidate: called by the owner to close the crowdsale .
ref: called after the crodsale ended needed to allow everyone to send their LNC around .

113:
src: ( functiondefinition ( simplename get price ) simplename get price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename timestamp ) simplename timestamp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename timestamp ) simplename timestamp ( simplename sub ) simplename sub ) memberaccess ( simplename start time ) simplename start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> ) simplename <UNK> ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename mul ) simplename mul ) memberaccess ( simplename step for price ) simplename step for price ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename <UNK> ) simplename <UNK> ( simplename max <UNK> ) simplename max <UNK> ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> ) simplename <UNK> ( simplename max <UNK> ) simplename max <UNK> ) expressionstatement ) ifstatement ( returnstatement ( binaryoperation * ) binaryoperation * ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename start price for hlpmt ) simplename start price for hlpmt ( simplename <UNK> ) simplename <UNK> ) tupleexpression ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Get the price for a single NFT .
ref: uint256 the current HLPMT token price in HLT ( without decimals ) .

114:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename p idx addr ) simplename p idx addr ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename withdraw fee ) simplename withdraw fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename ended ) simplename ended ) memberaccess ( booleanliteral false ) booleanliteral false ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename ended ) simplename ended ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename event data ) simplename event data ( functioncall ( simplename end round ) simplename end round ( simplename event data ) simplename event data ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename eth ) simplename eth ( functioncall ( simplename withdraw earnings ) simplename withdraw earnings ( simplename p id ) simplename p id ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename withdraw fee ) simplename withdraw fee ( binaryoperation / ) binaryoperation / ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p1 ) simplename p1 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename withdraw fee ) simplename withdraw fee ( numberliteral 「NUM」 )
candidate: withdraws all of your earnings .
ref: withdraws all of your earnings .

115:
src: ( functiondefinition ( simplename process public purchase ) simplename process public purchase ( visibility private ) visibility private ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename current stage ) simplename current stage ( memberaccess ( simplename stage ) simplename stage ( simplename private ) simplename private ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current stage ) simplename current stage ( memberaccess ( simplename stage ) simplename stage ( simplename discount40 ) simplename discount40 ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token pools ) simplename token pools ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename stage ) simplename stage ( simplename discount40 ) simplename discount40 ) memberaccess ) functioncall ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename token pools ) simplename token pools ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename stage ) simplename stage ( simplename discount40 ) simplename discount40 ) memberaccess ) functioncall ) indexaccess ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename token pools ) simplename token pools ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename stage ) simplename stage ( simplename private ) simplename private ) memberaccess ) functioncall ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token pools ) simplename token pools ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename stage ) simplename stage ( simplename private ) simplename private ) memberaccess ) functioncall ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename stage ) simplename stage ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( simplename current stage ) simplename current stage ) functioncall ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename stage ) simplename stage ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename stage ) simplename stage ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens to buy ) simplename tokens to buy ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( indexaccess ( simplename stage rates ) simplename stage rates ( simplename stage ) simplename stage ) indexaccess ) functioncall ) tupleexpression ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename tokens to buy ) simplename tokens to buy ( indexaccess ( simplename token pools ) simplename token pools ( simplename stage ) simplename stage ) indexaccess ( block ( expressionstatement ( functioncall ( simplename payout tokens ) simplename payout tokens
candidate: Overrides parent by storing balances instead of issuing tokens right away .
ref: function for processing purchase in public sale .

116:
src: ( modifierdefinition ( simplename only owners ) simplename only owners ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename owners ) simplename owners ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the owners .
ref: Modifier to check is message sender contains in mapping 'owners' .

117:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename buy price ) simplename buy price ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename this ) simplename this ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename tokens sold ) simplename tokens sold ( simplename amount ) simplename amount ) expressionstatement ) block ) functiondefinition
candidate: Buy tokens from contract by sending ether .
ref: Buy tokens from contract by sending ether .

118:
src: ( functiondefinition ( simplename deposit ) simplename deposit ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename refundee ) simplename refundee ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename active ) simplename active ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename deposit ) simplename deposit ) memberaccess ( simplename refundee ) simplename refundee ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows the owner to deposit and transfers the funds .
ref: Stores funds that may later be refunded .

119:
src: ( functiondefinition ( simplename get all buyers ) simplename get all buyers ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( block ( returnstatement ( simplename buyers ) simplename buyers ) returnstatement ) block ) functiondefinition
candidate: return list of all registered participants .
ref: get all buyer .

120:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint112 ) simplename uint112 ) simpletype ) simpletypeexpression ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ( simplename to uint112 ) simplename to uint112 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sold token ) simplename sold token ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( simplename sold token ) simplename sold token ) functioncall ( simplename to uint112 ) simplename to uint112 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Transfer the balance from owner's account to another account .
ref: Transfer the balance from owner's account to another account .

121:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: Transfers sender's tokens to a given address .

122:
src: ( functiondefinition ( simplename get fashions attrs ) simplename get fashions attrs ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename attrs ) simplename attrs ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename tokens ) simplename tokens ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( array ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename attrs ) simplename attrs ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) array ( binaryoperation * ) binaryoperation * ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename length ) simplename length ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token id ) simplename token id ( indexaccess ( simplename tokens ) simplename tokens ( simplename i ) simplename i ) indexaccess ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename fashion id to owner ) simplename fashion id to owner ( simplename token id ) simplename token id ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename index ) simplename index ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename fs ) simplename fs ( simpletype ( simplename fashion ) simplename fashion ) simpletype ) variabledeclaration ( indexaccess ( simplename fashion array ) simplename fashion array ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename attrs ) simplename attrs ( simplename index ) simplename index ) indexaccess ( memberaccess ( simplename fs ) simplename fs ( simplename health ) simplename health ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename attrs ) simplename attrs ( binaryoperation + ) binaryoperation + ( simplename index ) simplename index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( memberaccess
candidate: Get all token details by the id .
ref: WAR token info returned based on Token ID transfered ( 64 at most ) .

123:
src: ( functiondefinition ( simplename get points ) simplename get points ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simplename points given ) simplename points given ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename points to attack power ) simplename points to attack power ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename points given ) simplename points given ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( simplename points given ) simplename points given ( functioncall ( simplename rand mod ) simplename rand mod ( binaryoperation + ) binaryoperation + ( simplename points given ) simplename points given ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Return the points for a given type .
ref: Gets <UNK> and <UNK> .

124:
src: ( functiondefinition ( simplename receive approval ) simplename receive approval ( visibility external ) visibility external ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token contract ) simplename token contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename token contract ) simplename token contract ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename ndc ) simplename ndc ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename this ) simplename this ( simplename call ) simplename call ) memberaccess ( simplename extra data ) simplename extra data ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Receive approved ERC20 tokens .
ref: receiveApproval calls function encoded as extra data .

125:
src: ( functiondefinition ( simplename decrease approval ) simplename decrease approval ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename subtracted value ) simplename subtracted value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old value ) simplename old value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename subtracted value ) simplename subtracted value ( simplename old value ) simplename old value ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( functioncall ( memberaccess ( simplename old value ) simplename old value ( simplename sub ) simplename sub ) memberaccess ( simplename subtracted value ) simplename subtracted value ) functioncall ) expressionstatement ) block ) ifstatement ( emitstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Decrease the amount of tokens that an owner allowed to a spender .
ref: Decrease the amount of tokens that an owner allowed to a spender .

126:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only unlocked ) simplename only unlocked ) modifierinvocation ) functiondefinition
candidate: transfer tokens from given address to another address .
ref: transfer tokens from given address to another address .

127:
src: ( modifierdefinition ( simplename no contracts ) simplename no contracts ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename tx ) simplename tx ( simplename origin ) simplename origin ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: This modifier will be used in contracts .
ref: don't allow smart contracts to play .

128:
src: ( functiondefinition ( simplename get new lottery created at ) simplename get new lottery created at ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename lotteries ) simplename lotteries ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( simplename now ) simplename now ) returnstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename latest end at ) simplename latest end at ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( memberaccess ( indexaccess ( simplename lotteries ) simplename lotteries ( binaryoperation - ) binaryoperation - ( simplename lottery count ) simplename lottery count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename created at ) simplename created at ) memberaccess ( memberaccess ( memberaccess ( indexaccess ( simplename lotteries ) simplename lotteries ( binaryoperation - ) binaryoperation - ( simplename lottery count ) simplename lottery count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename params ) simplename params ) memberaccess ( simplename game duration ) simplename game duration ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename next end at ) simplename next end at ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename latest end at ) simplename latest end at ( memberaccess ( simplename default params ) simplename default params ( simplename game duration ) simplename game duration ) memberaccess ) variabledeclarationstatement ( whilestatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename next end at ) simplename next end at ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename next end at ) simplename next end at ( memberaccess ( simplename default params ) simplename default params ( simplename game duration ) simplename game duration ) memberaccess ) expressionstatement ) block ) whilestatement ( returnstatement ( binaryoperation - ) binaryoperation - ( simplename next end at ) simplename next end at ( memberaccess ( simplename default params ) simplename default params ( simplename game duration ) simplename game duration ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Returns number of lottery .
ref: Returns new lottery created at .

129:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename minimum amount ) simplename minimum amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename minimum amount ) simplename minimum amount ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total eth ) simplename total eth ( functioncall ( memberaccess ( simplename total eth ) simplename total eth ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: only owner can withdraw ethers from contract .
ref: withDraw amount ETH to contract .

130:
src: ( functiondefinition ( simplename withdraw token ) simplename withdraw token ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename params ) simplename params ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token return ) simplename token return ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename token ) simplename token ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( simplename fee ) simplename fee ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename params ) simplename params ( simpletype ( simplename drcwallet mgr params ) simplename drcwallet mgr params ) simpletype ) variabledeclaration ( functioncall ( simplename drcwallet mgr params ) simplename drcwallet mgr params ( simplename params ) simplename params ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( functioncall ( memberaccess ( simplename params ) simplename params ( simplename single withdraw ) simplename single withdraw ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename days count ) simplename days count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename time ) simplename time ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename days count ) simplename days count ( memberaccess ( simplename day withdraw rec ) simplename day withdraw rec ( simplename mul ) simplename mul ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename day withdraw rec ) simplename day withdraw rec ( simplename count ) simplename count ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename day withdraw rec ) simplename day withdraw rec ( simplename count ) simplename count ) memberaccess ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename day withdraw rec ) simplename day withdraw rec ( simplename
candidate: withdraw tokens , send tokens to target default wallet .
ref: withdraw tokens , send tokens to target .

131:
src: ( functiondefinition ( simplename recharge deposit ) simplename recharge deposit ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename deposit ) simplename deposit ( functioncall ( memberaccess ( simplename deposit ) simplename deposit ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: If the soft cap is reached , the deposit , this function .
ref: anyone could recharge deposit .

132:
src: ( functiondefinition ( simplename add owner ) simplename add owner ( visibility public ) visibility public ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename is owner ) simplename is owner ( simplename owner ) simplename owner ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owners ) simplename owners ( simplename push ) simplename push ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename owner addition ) simplename owner addition ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only wallet ) simplename only wallet ) modifierinvocation ( modifierinvocation ( simplename only valid ) simplename only valid ( simplename owner ) simplename owner ) modifierinvocation ( modifierinvocation ( simplename only owner does not exist ) simplename only owner does not exist ( simplename owner ) simplename owner ) modifierinvocation ( modifierinvocation ( simplename only valid requirement ) simplename only valid requirement ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename owners ) simplename owners ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename required ) simplename required ) modifierinvocation ) functiondefinition
candidate: Allows to add a new owner .
ref: Add a new owner .

133:
src: ( functiondefinition ( simplename bid on breeding auction tutorial ) simplename bid on breeding auction tutorial ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename dad id ) simplename dad id ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename is tutorial pet used ) simplename is tutorial pet used ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get breeding fee ) simplename get breeding fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename dad id ) simplename dad id ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename fee ) simplename fee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename breeding market ) simplename breeding market ( simplename bid ) simplename bid ) memberaccess ( simplename value ) simplename value ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename fee ) simplename fee ) functioncall ( simplename dad id ) simplename dad id ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename dad ) simplename dad ( simpletype ( simplename cutie ) simplename cutie ) simpletype ) variabledeclaration ( indexaccess ( simplename cuties ) simplename cuties ( simplename dad id ) simplename dad id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename trigger cooldown ) simplename trigger cooldown ( simplename dad id ) simplename dad id ( simplename dad ) simplename dad ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename sire allowed to address ) simplename sire allowed to address ( simplename dad id ) simplename dad id ) indexaccess ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename baby gen ) simplename baby gen ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename config ) simplename config ( simplename get tutorial baby gen ) simplename get tutorial baby gen ) memberaccess ( memberaccess ( simplename dad ) simplename dad ( simplename generation ) simplename generation ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename child genes ) simplename child genes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename gene mixer ) simplename gene mixer ( simplename mix genes ) simplename mix genes ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename dad ) simplename dad ( simplename genes ) simplename genes ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cutie id ) simplename cutie id ( simpletype ( simplename uint40 ) simplename uint40
candidate: An internal method that creates a new auction and stores it .
ref: Completes a breeding tutorial cutie ( non existing in blockchain ) with auction by bidding .

134:
src: ( functiondefinition ( simplename request foundation transfer ) simplename request foundation transfer ( visibility external ) visibility external ( variabledeclaration ( simplename new foundation candidate ) simplename new foundation candidate ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename foundation hashed ) simplename foundation hashed ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new foundation candidate ) simplename new foundation candidate ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new foundation candidate ) simplename new foundation candidate ( simplename foundation ) simplename foundation ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename new foundation candidate ) simplename new foundation candidate ( simplename new foundation candidate ) simplename new foundation candidate ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename foundation hashed ) simplename foundation hashed ( simplename foundation hashed ) simplename foundation hashed ) expressionstatement ( expressionstatement ( functioncall ( simplename foundation requested ) simplename foundation requested ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename new foundation candidate ) simplename new foundation candidate ( simplename foundation hashed ) simplename foundation hashed ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only foundation ) simplename only foundation ) modifierinvocation ) functiondefinition
candidate: Same ERC20 behavior , but require the token to be called .
ref: Proposes to transfer control of the contract to a <UNK> .

135:
src: ( functiondefinition ( simplename withdrawal t4 t ) simplename withdrawal t4 t ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename total raised ) simplename total raised ( simplename soft cap ) simplename soft cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename forward t4 t ) simplename forward t4 t ( functioncall ( memberaccess ( simplename t4t token ) simplename t4t token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Transfer tokens to the wallet address .
ref: Withdrawal T4T tokens from contract .

136:
src: ( functiondefinition ( simplename get animal by id ) simplename get animal by id ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename aid ) simplename aid ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename egg phase ) simplename egg phase ) memberaccess ( booleanliteral true ) booleanliteral true ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename name ) simplename name ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename desc ) simplename desc ) memberaccess ( binaryoperation - ) binaryoperation - ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename price for sale ) simplename price for sale ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename price for mating ) simplename price for mating ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename parent id1 ) simplename parent id1 ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename parent id2 ) simplename parent id2 ) memberaccess ) tupleexpression ) returnstatement ) block ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename name ) simplename name ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename desc ) simplename desc ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename id ) simplename id ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename price for sale ) simplename price for sale ) memberaccess ( memberaccess ( indexaccess ( simplename animal against id ) simplename animal against id ( simplename aid ) simplename aid ) indexaccess ( simplename price for mating ) simplename price for mating ) memberaccess ( memberaccess ( indexaccess ( simplename
candidate: Get an animal of an animal with id .
ref: function to get animal details by id .

137:
src: ( functiondefinition ( simplename load rate ) simplename load rate ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename gas limit ) simplename gas limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename get rate usd ) simplename get rate usd ( simplename gas limit ) simplename gas limit ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This should be used if the Crowdsale fails , to receive the refuld money .
ref: initiates Oraclize call for ETHUSD rate .

138:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename try finialize last proposal ) simplename try finialize last proposal ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename team withdraw ) simplename team withdraw ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename current plan ) simplename current plan ( simpletype ( simplename budget plan ) simplename budget plan ) simpletype ) variabledeclaration ( indexaccess ( simplename budget plans ) simplename budget plans ( simplename current budget plan id ) simplename current budget plan id ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( simplename current plan ) simplename current plan ( simplename end time ) simplename end time ) memberaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is next budget plan made ) simplename is next budget plan made ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename current budget plan id ) simplename current budget plan id ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename in withdraw state ) simplename in withdraw state ) modifierinvocation ) functiondefinition
candidate: Withdraw your funds .
ref: Withdraw the wei to team wallet .

139:
src: ( functiondefinition ( simplename change settings ) simplename change settings ( visibility public ) visibility public ( variabledeclaration ( simplename min bet ) simplename min bet ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max bet ) simplename max bet ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename pay table id ) simplename pay table id ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename max bet ) simplename max bet ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename pay table id ) simplename pay table id ( memberaccess ( simplename settings ) simplename settings ( simplename num pay tables ) simplename num pay tables ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename settings ) simplename settings ( simplename min bet ) simplename min bet ) memberaccess ( simplename min bet ) simplename min bet ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename settings ) simplename settings ( simplename max bet ) simplename max bet ) memberaccess ( simplename max bet ) simplename max bet ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename settings ) simplename settings ( simplename cur pay table id ) simplename cur pay table id ) memberaccess ( simplename pay table id ) simplename pay table id ) expressionstatement ( emitstatement ( functioncall ( simplename settings changed ) simplename settings changed ( simplename now ) simplename now ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename from admin ) simplename from admin ) modifierinvocation ) functiondefinition
candidate: Allows a change settings request .
ref: Allows admin to change minBet , maxBet , and <UNK> .

140:
src: ( modifierdefinition ( simplename if general partner ) simplename if general partner ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename shareholders ) simplename shareholders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename limited ) simplename limited ) memberaccess ( booleanliteral true ) booleanliteral true ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: checks that Oraclize address is calling .
ref: This modifier is used to check if the user is a general partner .

141:
src: ( functiondefinition ( simplename valid purchase ) simplename valid purchase ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within period ) simplename within period ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename start sale ) simplename start sale ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end block ) simplename end block ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename non zero purchase ) simplename non zero purchase ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total wei raised ) simplename total wei raised ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei raised pre sale ) simplename wei raised pre sale ( simplename add ) simplename add ) memberaccess ( simplename wei raised ) simplename wei raised ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within cap ) simplename within cap ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename total wei raised ) simplename total wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename cap ) simplename cap ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( simplename within cap ) simplename within cap ( simplename within period ) simplename within period ( simplename non zero purchase ) simplename non zero purchase ) returnstatement ) block ) functiondefinition
candidate: true if the transaction can buy tokens .
ref: Override of the validPurchase function so that the new sale periode start at StartSale instead of Startblock .

142:
src: ( functiondefinition ( simplename get beneficiary develop ) simplename get beneficiary develop ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( simplename beneficiary develop ) simplename beneficiary develop ) returnstatement ) block ) functiondefinition
candidate: Returns the beneficiary address .
ref: get address of development team .

143:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename burn ) simplename burn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename value ) simplename value ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Burns a specific amount of tokens .
ref: internal burn function .

144:
src: ( functiondefinition ( simplename set additional owners ) simplename set additional owners ( visibility default ) visibility default ( variabledeclaration ( simplename owners ) simplename owners ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename set additional owners ) simplename set additional owners ( simplename additional owners list ) simplename additional owners list ( simplename owners ) simplename owners ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename additional owners list ) simplename additional owners list ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename additional owners ) simplename additional owners ( indexaccess ( simplename additional owners list ) simplename additional owners list ( simplename i ) simplename i ) indexaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) forstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename owners ) simplename owners ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename additional owners ) simplename additional owners ( indexaccess ( simplename owners ) simplename owners ( simplename i ) simplename i ) indexaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename additional owners list ) simplename additional owners list ( simplename owners ) simplename owners ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to set owners addresses .
ref: Define array and mapping of addresses that will be additional owners .

145:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from other address .

146:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename countries ) simplename countries ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Total amount of country tokens .

147:
src: ( functiondefinition ( simplename set air drop destination ) simplename set air drop destination ( visibility external ) visibility external ( variabledeclaration ( simplename destination ) simplename destination ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename destination ) simplename destination ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename air drop destinations ) simplename air drop destinations ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename destination ) simplename destination ) expressionstatement ( expressionstatement ( functioncall ( simplename set destination ) simplename set destination ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename destination ) simplename destination ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Set the airDrop to msg . sender .
ref: set <UNK> to 0x0 if want to self airdrop .

148:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename order id ) simplename order id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename order ) simplename order ( simpletype ( simplename order ) simplename order ) simpletype ) variabledeclaration ( indexaccess ( simplename orders ) simplename orders ( simplename order id ) simplename order id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename order ) simplename order ( simplename price ) simplename price ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename order ) simplename order ( simplename maker ) simplename maker ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename order ) simplename order ( simplename asset ) simplename asset ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename order ) simplename order ( simplename amount ) simplename amount ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename order ) simplename order ( simplename price ) simplename price ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename blacklist ) simplename blacklist ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename maker ) simplename maker ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename order ) simplename order ( simplename maker ) simplename maker ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 interface ) simplename erc20 interface ) simpletype ) variabledeclaration ( functioncall ( simplename erc20 interface ) simplename erc20 interface ( memberaccess ( simplename order ) simplename order ( simplename asset ) simplename asset ) memberaccess ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename allowance ) simplename allowance ) memberaccess ( memberaccess ( simplename order ) simplename order ( simplename maker ) simplename maker ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ( memberaccess ( simplename order ) simplename order ( simplename amount ) simplename amount ) memberaccess ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename
candidate: Buy an order by sending this contract .
ref: buy allows a party to fill an order .

149:
src: ( functiondefinition ( simplename contribute ) simplename contribute ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simplename res ) simplename res ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename backer ) simplename backer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename affiliate tokens ) simplename affiliate tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is white listed ) simplename is white listed ) variabledeclaration ( variabledeclaration ( simplename affiliate ) simplename affiliate ) variabledeclaration ( functioncall ( memberaccess ( simplename white list ) simplename white list ( simplename is white listed and affiliate ) simplename is white listed and affiliate ) memberaccess ( simplename backer ) simplename backer ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename is white listed ) simplename is white listed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename current step ) simplename current step ( memberaccess ( simplename step ) simplename step ( simplename funding pre sale ) simplename funding pre sale ) memberaccess ( binaryoperation == ) binaryoperation == ( simplename current step ) simplename current step ( memberaccess ( simplename step ) simplename step ( simplename funding public sale ) simplename funding public sale ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename min invest eth ) simplename min invest eth ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens to send ) simplename tokens to send ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename determine purchase ) simplename determine purchase ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename affiliate ) simplename affiliate ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename affiliate tokens ) simplename affiliate tokens ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename tokens to send ) simplename tokens to send ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename affiliates ) simplename affiliates ( simplename affiliate ) simplename affiliate ) indexaccess ( simplename affiliate tokens ) simplename affiliate tokens ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename referrer ) simplename referrer ( simpletype ( simplename backer ) simplename backer ) simpletype ) variabledeclaration ( indexaccess ( simplename backers ) simplename backers ( simplename affiliate ) simplename affiliate ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename referrer ) simplename referrer ( simplename tokens to send ) simplename tokens to send ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename referrer ) simplename referrer ( simplename tokens to send ) simplename tokens to send ) memberaccess ( simplename add ) simplename add
candidate: It will be called by fallback function whenever ether is sent to it .
ref: It will be called by fallback function whenever ether is sent to it .

150:
src: ( functiondefinition ( simplename transfer tokens ) simplename transfer tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename amount ) simplename amount ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( indexaccess ( simplename to ) simplename to ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename amount ) simplename amount ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename is owner or additional owner ) simplename is owner or additional owner ) modifierinvocation ) functiondefinition
candidate: Transfer an amount of tokens to multiple addresses .
ref: Transfer specified amount of tokens to the specified list of addresses .

151:
src: ( functiondefinition ( simplename string ends with ) simplename string ends with ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename a ) simplename a ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename a ) simplename a ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename b ) simplename b ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename b ) simplename b ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename a ) simplename a ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length diff ) simplename length diff ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename a ) simplename a ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename a ) simplename a ( binaryoperation + ) binaryoperation + ( simplename i ) simplename i ( simplename length diff ) simplename length diff ) indexaccess ( indexaccess ( simplename b ) simplename b ( simplename i ) simplename i ) indexaccess ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) forstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Returns the slice with the same id .
ref: returns true if string _a ends with string _b .

152:
src: ( functiondefinition ( simplename register ) simplename register ( visibility default ) visibility default ( variabledeclaration ( simplename of asset ) simplename of asset ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename symbol ) simplename symbol ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename decimal ) simplename decimal ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename url ) simplename url ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ipfs hash ) simplename ipfs hash ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename chain id ) simplename chain id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename break in ) simplename break in ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename break out ) simplename break out ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename asset ) simplename asset ( simpletype ( simplename asset ) simplename asset ) simpletype ) variabledeclaration ( indexaccess ( simplename information ) simplename information ( simplename of asset ) simplename of asset ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename name ) simplename name ) memberaccess ( simplename name ) simplename name ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename symbol ) simplename symbol ) memberaccess ( simplename symbol ) simplename symbol ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename decimal ) simplename decimal ) memberaccess ( simplename decimal ) simplename decimal ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename url ) simplename url ) memberaccess ( simplename url ) simplename url ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename ipfs hash ) simplename ipfs hash ) memberaccess ( simplename ipfs hash ) simplename ipfs hash ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename break in ) simplename break in ) memberaccess ( simplename break in ) simplename break in ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename break out ) simplename break out ) memberaccess ( simplename break out ) simplename break out ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename asset ) simplename asset ( simplename exists ) simplename exists ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( memberaccess ( indexaccess ( simplename information ) simplename information ( simplename of asset ) simplename of asset ) indexaccess ( simplename exists ) simplename exists ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename pre cond ) simplename pre cond ( functioncall ( simplename is owner ) simplename is owner ) functioncall ) modifierinvocation ( modifierinvocation ( simplename pre cond ) simplename pre cond
candidate: Register a new Asset information .
ref: Registers an Asset <UNK> in a chain .

153:
src: ( functiondefinition ( simplename get current rate ) simplename get current rate ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( functioncall ( memberaccess ( simplename opening time ) simplename opening time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( returnstatement ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename add ) simplename add ) memberaccess ( binaryoperation / ) binaryoperation / ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( functioncall ( memberaccess ( simplename opening time ) simplename opening time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( functioncall ( memberaccess ( simplename opening time ) simplename opening time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( returnstatement ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename add ) simplename add ) memberaccess ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) ifstatement ) block ) functiondefinition
candidate: Returns the rate of tokens per wei at the present time .
ref: Returns the rate of tokens per wei at the present time .

154:
src: ( functiondefinition ( simplename unfreeze transfers ) simplename unfreeze transfers ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( simplename frozen ) simplename frozen ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename frozen ) simplename frozen ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename unfreeze ) simplename unfreeze ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Unfreeze ALL token transfers .
ref: Unfreeze token transfers .

155:
src: ( functiondefinition ( simplename get end time ) simplename get end time ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename m bonuses ) simplename m bonuses ( simplename get last time ) simplename get last time ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Gets the time of the specified amount of bonuses by time .
ref: end time of the ICO , inclusive .

156:
src: ( functiondefinition ( simplename calculate roi ) simplename calculate roi ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: calculate 10 000 .
ref: calculate ROI based on investor value .

157:
src: ( functiondefinition ( simplename get poo ) simplename get poo ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename poo name ) simplename poo name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename selling price ) simplename selling price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename poo ) simplename poo ( simpletype ( simplename poo ) simplename poo ) simpletype ) variabledeclaration ( indexaccess ( simplename poos ) simplename poos ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename poo name ) simplename poo name ( memberaccess ( simplename poo ) simplename poo ( simplename name ) simplename name ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename selling price ) simplename selling price ( indexaccess ( simplename poo index to price ) simplename poo index to price ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename poo index to owner ) simplename poo index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) functiondefinition
candidate: Returns all the relevant information about a specific meme .
ref: Returns all the relevant information about a specific poo .

158:
src: ( functiondefinition ( simplename refund to buyers ) simplename refund to buyers ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( simplename soft cap for pre ico ) simplename soft cap for pre ico ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename wei raised in pre ico ) simplename wei raised in pre ico ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename token buyers ) simplename token buyers ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ether amount ) simplename ether amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename ethers sent by buyers ) simplename ethers sent by buyers ( indexaccess ( simplename token buyers ) simplename token buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename ether amount ) simplename ether amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename token buyers ) simplename token buyers ( simplename i ) simplename i ) indexaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename ether amount ) simplename ether amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename ethers sent by buyers ) simplename ethers sent by buyers ( indexaccess ( simplename token buyers ) simplename token buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: this is called by owner to get back ethers .
ref: Refund the tokens to buyers of presale if soft cap not reached .

159:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename sun ) simplename sun ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename can sun ) simplename can sun ) modifierinvocation ) functiondefinition
candidate: Function to mint tokens .
ref: Function to mint tokens .

160:
src: ( functiondefinition ( simplename set issuer ) simplename set issuer ( visibility public ) visibility public ( variabledeclaration ( simplename new issuer ) simplename new issuer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new issuer ) simplename new issuer ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename rocket storage ) simplename rocket storage ( simplename set address ) simplename set address ) memberaccess ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ( simplename new issuer ) simplename new issuer ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename issuer transferred ) simplename issuer transferred ( functioncall ( simplename issuer ) simplename issuer ) functioncall ( simplename new issuer ) simplename new issuer ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the current issuer to set the issuer address .
ref: Allows the current owner to explicity assign a new issuer .

161:
src: ( functiondefinition ( simplename final unlock transfer ) simplename final unlock transfer ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename can change locked ) simplename can change locked ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename locked ) simplename locked ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename can change locked ) simplename can change locked ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) functiondefinition
candidate: Checks whether it can transfer or otherwise throws .
ref: final unlock transfer token ( <UNK> and <UNK> ) .

162:
src: ( functiondefinition ( simplename stop team token transfer ) simplename stop team token transfer ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename released team ) simplename released team ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only release agent ) simplename only release agent ) modifierinvocation ) functiondefinition
candidate: One way function to release the tokens to the wild .
ref: Resume locking state for team member / advisor .

163:
src: ( functiondefinition ( simplename set destroy threshold ) simplename set destroy threshold ( visibility external ) visibility external ( variabledeclaration ( simplename new threshold ) simplename new threshold ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename destroy threshold ) simplename destroy threshold ( simplename new threshold ) simplename new threshold ) expressionstatement ) block ( modifierinvocation ( simplename only cfo ) simplename only cfo ) modifierinvocation ) functiondefinition
candidate: Set the threshold .
ref: Allows owner to change <UNK> .

164:
src: ( functiondefinition ( simplename bonus take ) simplename bonus take ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename bonus times ) simplename bonus times ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename bonus num ) simplename bonus num ( block ( variabledeclarationstatement ( variabledeclaration ( simplename send count ) simplename send count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename addrs ) simplename addrs ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename bonus times ) simplename bonus times ( simplename addrs ) simplename addrs ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename bonus num ) simplename bonus num ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename send count ) simplename send count ( tupleexpression ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename bonus per ) simplename bonus per ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename addrs ) simplename addrs ) indexaccess ) tupleexpression ) expressionstatement ) block ) forstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename bonus pool ) simplename bonus pool ( simplename send count ) simplename send count ( block ( ifstatement ( functioncall ( memberaccess ( simplename addrs ) simplename addrs ( simplename send ) simplename send ) memberaccess ( simplename send count ) simplename send count ) functioncall ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename bonus pool ) simplename bonus pool ( simplename send count ) simplename send count ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename bonus times ) simplename bonus times ( simplename addrs ) simplename addrs ) indexaccess ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Allow addresses to do early participation .
ref: AnimatedProject : Take Bonus By Token .

165:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename meal index to approved ) simplename meal index to approved ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Grant another address the right to transfer token via takeOwnership ( ) and transferFrom ( ) .
ref: Grant another address the right to transfer token via takeOwnership ( ) and transferFrom ( ) .

166:
src: ( functiondefinition ( simplename manually process transaction ) simplename manually process transaction ( visibility public ) visibility public ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename value ) simplename value ( simplename leaf price ) simplename leaf price ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( functioncall ( simplename ierc20 token ) simplename ierc20 token ( simplename token address ) simplename token address ) functioncall ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ( binaryoperation + ) binaryoperation + ( simplename value ) simplename value ( simplename total participation amount ) simplename total participation amount ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename game state ) simplename game state ( memberaccess ( simplename state ) simplename state ( simplename running ) simplename running ) memberaccess ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename game duration ) simplename game duration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens to take ) simplename tokens to take ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename process transaction ) simplename process transaction ( simplename from ) simplename from ( simplename value ) simplename value ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename ierc20 token ) simplename ierc20 token ( simplename token address ) simplename token address ) functioncall ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename tokens to take ) simplename tokens to take ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Return the transaction , status from the contract .
ref: Manually send tokens to this .

167:
src: ( modifierdefinition ( simplename bancor network only ) simplename bancor network only ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bancor network ) simplename bancor network ( simpletype ( simplename ibancor network ) simplename ibancor network ) simpletype ) variabledeclaration ( functioncall ( simplename ibancor network ) simplename ibancor network ( functioncall ( memberaccess ( simplename registry ) simplename registry ( simplename address of ) simplename address of ) memberaccess ( memberaccess ( simplename contract ids ) simplename contract ids ( simplename bancor network ) simplename bancor network ) memberaccess ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename bancor network ) simplename bancor network ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: allows execution by the contract only .
ref: allows execution by the BancorNetwork contract only .

168:
src: ( functiondefinition ( simplename balance ) simplename balance ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Amount of tokens that players of this contract .
ref: Get the remain MTC on the contract .

169:
src: ( functiondefinition ( simplename set ico token supply ) simplename set ico token supply ( visibility default ) visibility default ( variabledeclaration ( simplename ico token supply ) simplename ico token supply ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename start date ) simplename start date ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename ico token supply ) simplename ico token supply ( simplename total token supply ) simplename total token supply ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico token supply ) simplename ico token supply ( simplename ico token supply ) simplename ico token supply ) expressionstatement ( expressionstatement ( functioncall ( simplename log ico token supply updated ) simplename log ico token supply updated ( simplename ico token supply ) simplename ico token supply ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set ICO date of ico token .
ref: Owner can change the number available tokens for the ICO ( must be below 70 million ) .

170:
src: ( functiondefinition ( simplename frozen of ) simplename frozen of ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename frozen ) simplename frozen ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: get the frozen amount of frozen tokens .
ref: get the frozen balance of account .

171:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) tupleexpression ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename erc223 receiving contract ) simplename erc223 receiving contract ) simpletype ) variabledeclaration ( functioncall ( simplename erc223 receiving contract ) simplename erc223 receiving contract ( simplename to ) simplename to ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename receiver ) simplename receiver ( simplename token fallback ) simplename token fallback ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) expressionstatement ( returnstatement
candidate: Transfer the specified amount of tokens to the specified address .
ref: Transfer sender's token to a given address .

172:
src: ( functiondefinition ( simplename check claim entitlement ) simplename check claim entitlement ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename claimants ) simplename claimants ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant address ) simplename claimant address ) memberaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant has claimed ) simplename claimant has claimed ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( returnstatement ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant amount ) simplename claimant amount ) memberaccess ) returnstatement ) block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ) block ) forstatement ) block ) functiondefinition
candidate: check claim data after the claim period has ended .
ref: public view Functions .

173:
src: ( functiondefinition ( simplename get balance ) simplename get balance ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Retrieve the token balance of any single address .
ref: Retrieve the token balance of any single address .

174:
src: ( functiondefinition ( simplename get linglong cat ) simplename get linglong cat ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename is gestating ) simplename is gestating ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is ready ) simplename is ready ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cooldown index ) simplename cooldown index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename next action at ) simplename next action at ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename siring with id ) simplename siring with id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename birth time ) simplename birth time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename matron id ) simplename matron id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sire id ) simplename sire id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename generation ) simplename generation ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename genes ) simplename genes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename cat ) simplename cat ( simpletype ( simplename linglong cat ) simplename linglong cat ) simpletype ) variabledeclaration ( indexaccess ( simplename linglong cats ) simplename linglong cats ( simplename id ) simplename id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is gestating ) simplename is gestating ( tupleexpression ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename cat ) simplename cat ( simplename siring with id ) simplename siring with id ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is ready ) simplename is ready ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown end block ) simplename cooldown end block ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) tupleexpression ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cooldown index ) simplename cooldown index ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown index ) simplename cooldown index ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename next action at ) simplename next action at ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown end block ) simplename cooldown end block ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename siring with id ) simplename siring with id ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename cat ) simplename cat ( simplename
candidate: Returns all the relevant information about a specific LinglongCat .
ref: Returns all the relevant information about a specific LinglongCat .

175:
src: ( functiondefinition ( simplename request number ) simplename request number ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename requestor ) simplename requestor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max ) simplename max ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wait time ) simplename wait time ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename white list ) simplename white list ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( tupleexpression ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename cost ) simplename cost ) tupleexpression ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is request pending ) simplename is request pending ( simplename requestor ) simplename requestor ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( functioncall ( simplename pending number ) simplename pending number ( simplename request proxy ) simplename request proxy ( simplename rendered number ) simplename rendered number ( simplename max ) simplename max ( simplename origin block ) simplename origin block ( simplename wait time ) simplename wait time ( memberaccess ( simplename tx ) simplename tx ( simplename origin ) simplename origin ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename max ) simplename max ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename wait time ) simplename wait time ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename max ) simplename max ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename max ) simplename max ) memberaccess ( simplename max ) simplename max ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename wait time ) simplename wait time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename wait time ) simplename wait time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename wait time ) simplename wait time ) memberaccess ( simplename wait time ) simplename wait time ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename event random ledger requested ) simplename event random ledger requested ( simplename requestor ) simplename requestor ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename max ) simplename max ) memberaccess ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename origin block ) simplename origin block
candidate: Request a Number . . . .
ref: Request a Number . . .

176:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename politician index to owner ) simplename politician index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

177:
src: ( functiondefinition ( simplename is burner ) simplename is burner ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( conditional ( simplename burn allowed ) simplename burn allowed ( indexaccess ( simplename burners ) simplename burners ( simplename address ) simplename address ) indexaccess ( booleanliteral false ) booleanliteral false ) conditional ) returnstatement ) block ) functiondefinition
candidate: Checks if the provided address has already been approved .
ref: Checks if the provided contract can burn tokens .

178:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility default ) visibility default ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pay to withdraw ) simplename pay to withdraw ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename pay claimed ) simplename pay claimed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pay claimed ) simplename pay claimed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total pay claimed ) simplename total pay claimed ( simplename pay to withdraw ) simplename pay to withdraw ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename pay to withdraw ) simplename pay to withdraw ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows any user to withdraw his tokens .
ref: Withdraws PAY claimed by the user .

179:
src: ( functiondefinition ( simplename check available tokens ) simplename check available tokens ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token addr ) simplename token addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename c ) simplename c ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename contributors ) simplename contributors ( simplename addr ) simplename addr ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename d ) simplename d ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename distribution ) simplename distribution ( simplename token addr ) simplename token addr ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename d ) simplename d ( simplename claim round ) simplename claim round ) memberaccess ( indexaccess ( memberaccess ( simplename c ) simplename c ( simplename tokens claimed ) simplename tokens claimed ) memberaccess ( simplename token addr ) simplename token addr ) indexaccess ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( returnstatement ( functioncall ( simplename apply pct ) simplename apply pct ( memberaccess ( simplename c ) simplename c ( simplename balance ) simplename balance ) memberaccess ( memberaccess ( simplename d ) simplename d ( simplename pct ) simplename pct ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: This callable function returns the token balance that a contributor can currently claim .
ref: This callable function returns the token balance that a contributor can currently claim .

180:
src: ( functiondefinition ( simplename allocate tokens ) simplename allocate tokens ( visibility default ) visibility default ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ( simplename total supply ) simplename total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allocate tokens to the users .
ref: Allocate tokens to the users .

181:
src: ( functiondefinition ( simplename release ) simplename release ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename transfered amount ) simplename transfered amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename check for received tokens ) simplename check for received tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount to transfer ) simplename amount to transfer ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename releasing schedule interface ) simplename releasing schedule interface ( simplename releasing schedule contract ) simplename releasing schedule contract ) functioncall ( simplename get releasable funds ) simplename get releasable funds ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount to transfer ) simplename amount to transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename already released amount ) simplename already released amount ( functioncall ( memberaccess ( simplename already released amount ) simplename already released amount ( simplename add ) simplename add ) memberaccess ( simplename amount to transfer ) simplename amount to transfer ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename internal balance ) simplename internal balance ( functioncall ( memberaccess ( simplename internal balance ) simplename internal balance ( simplename sub ) simplename sub ) memberaccess ( simplename amount to transfer ) simplename amount to transfer ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename vesting master interface ) simplename vesting master interface ( simplename owner ) simplename owner ) functioncall ( simplename substract locked amount ) simplename substract locked amount ) memberaccess ( simplename amount to transfer ) simplename amount to transfer ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename erc20 token interface ) simplename erc20 token interface ( simplename token address ) simplename token address ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename amount to transfer ) simplename amount to transfer ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename released ) simplename released ( simplename amount to transfer ) simplename amount to transfer ) functioncall ) emitstatement ( returnstatement ( simplename amount to transfer ) simplename amount to transfer ) returnstatement ) block ) functiondefinition
candidate: release the locked tokens owned by this contract .
ref: release tokens that are already vested / releasable .

182:
src: ( functiondefinition ( simplename double bonus array ) simplename double bonus array ( visibility public ) visibility public ( variabledeclaration ( simplename adr ) simplename adr ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( whilestatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename adr ) simplename adr ( simplename length ) simplename length ) memberaccess ( block ( expressionstatement ( functioncall ( simplename double bonus ) simplename double bonus ( indexaccess ( simplename adr ) simplename adr ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ) block ) whilestatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Increase an array of addresses with provided an array .
ref: Same as <UNK> - just for array of addresses .

183:
src: ( functiondefinition ( simplename update phase times ) simplename update phase times ( visibility internal ) visibility internal ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase not started ) simplename phase not started ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase finished ) simplename phase finished ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 1 ) simplename phase ico 1 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 1 end ) simplename ico phase 1 end ( functioncall ( memberaccess ( simplename ico start ) simplename ico start ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename seconds in day ) simplename seconds in day ( simplename mul ) simplename mul ) memberaccess ( simplename ico phase 1 days ) simplename ico phase 1 days ) functioncall ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 2 ) simplename phase ico 2 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 2 end ) simplename ico phase 2 end ( functioncall ( memberaccess ( simplename ico phase 1 end ) simplename ico phase 1 end ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename seconds in day ) simplename seconds in day ( simplename mul ) simplename mul ) memberaccess ( simplename ico phase 2 days ) simplename ico phase 2 days ) functioncall ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 3 ) simplename phase ico 3 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 3 end ) simplename ico phase 3 end ( functioncall ( memberaccess ( simplename ico phase 2 end ) simplename ico phase 2 end ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename seconds in day ) simplename seconds in day ( simplename mul ) simplename mul ) memberaccess ( simplename ico phase 3 days ) simplename ico phase 3 days ) functioncall ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 4 ) simplename phase ico 4 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 4 end ) simplename ico phase 4 end ( functioncall ( memberaccess ( simplename ico phase 3 end ) simplename ico phase 3 end ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename seconds in day ) simplename seconds in day ( simplename mul ) simplename mul ) memberaccess ( simplename ico phase 4 days ) simplename ico phase 4 days ) functioncall ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 5 ) simplename phase ico 5 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 5 end ) simplename ico phase 5 end ( functioncall ( memberaccess ( simplename ico phase 4 end ) simplename ico phase 4 end ( simplename
candidate: Update phase times .
ref: Update phase end times .

184:
src: ( functiondefinition ( simplename remove from whitelist ) simplename remove from whitelist ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename beneficiary ) simplename beneficiary ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner or executor ) simplename only owner or executor ) modifierinvocation ) functiondefinition
candidate: Removes single address from whitelist .
ref: Removes single address from whitelist .

185:
src: ( functiondefinition ( simplename get token name ) simplename get token name ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token interface ) simplename token interface ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( indexaccess ( simplename token names ) simplename token names ( simplename token interface ) simplename token interface ) indexaccess ( simplename token id ) simplename token id ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: returns current token name .
ref: get name of specified token , .

186:
src: ( functiondefinition ( simplename destroy contract ) simplename destroy contract ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename selfdestruct ) simplename selfdestruct ( simplename developer ) simplename developer ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only developer ) simplename only developer ) modifierinvocation ( modifierinvocation ( simplename should gate guard for effective time ) simplename should gate guard for effective time ) modifierinvocation ) functiondefinition
candidate: Destroy the contract and refund the ETH transaction .
ref: only be called in case the contract may need to be destroyed .

187:
src: ( modifierdefinition ( simplename only admin ) simplename only admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename role admin address ) simplename role admin address ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to scope access to admins .
ref: Access modifier for Admin-only .

188:
src: ( functiondefinition ( simplename <UNK> client ) simplename <UNK> client ( visibility default ) visibility default ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename trusted clients ) simplename trusted clients ( simplename addr ) simplename addr ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename multisig ) simplename multisig ( functioncall ( simplename sha3 ) simplename sha3 ( memberaccess ( simplename msg ) simplename msg ( simplename data ) simplename data ) memberaccess ) functioncall ) modifierinvocation ) functiondefinition
candidate: called by customer or service provider to unhold subscription .
ref: remove contract addr from the list of trusted contracts .

189:
src: ( functiondefinition ( simplename createship ) simplename createship ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wsic ) simplename wsic ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename warship ) simplename warship ( simpletype ( simplename warship ) simplename warship ) simpletype ) variabledeclaration ( functioncall ( simplename translate wsic ) simplename translate wsic ( simplename wsic ) simplename wsic ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> id ) simplename <UNK> id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename ships ) simplename ships ( simplename push ) simplename push ) memberaccess ( simplename warship ) simplename warship ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename new ship ) simplename new ship ( simplename owner ) simplename owner ( simplename <UNK> id ) simplename <UNK> id ( simplename wsic ) simplename wsic ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename ship id to status ) simplename ship id to status ( simplename <UNK> id ) simplename <UNK> id ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename owner ) simplename owner ( simplename <UNK> id ) simplename <UNK> id ) functioncall ) expressionstatement ( returnstatement ( simplename <UNK> id ) simplename <UNK> id ) returnstatement ) block ) functiondefinition
candidate: An internal method that creates a new card and stores it .
ref: An internal method that creates a new ship and stores it .

190:
src: ( functiondefinition ( simplename icoopen ) simplename icoopen ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename funding ) simplename funding ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename funding start ) simplename funding start ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: returns if the crowdsale has been finalized .
ref: returns if the crowd sale is still open .

191:
src: ( functiondefinition ( simplename start round ) simplename start round ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( binaryoperation - ) binaryoperation - ( simplename current round ) simplename current round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( binaryoperation - ) binaryoperation - ( simplename current round ) simplename current round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename finished ) simplename finished ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( simplename current round ) simplename current round ) indexaccess ( simplename start minimum time ) simplename start minimum time ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( simplename current round ) simplename current round ) indexaccess ( simplename start minimum time ) simplename start minimum time ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename current round ) simplename current round ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( binaryoperation - ) binaryoperation - ( simplename current round ) simplename current round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename active ) simplename active ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Start round round .
ref: Function to start new round .

192:
src: ( functiondefinition ( simplename publish result ) simplename publish result ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename mose events ) simplename mose events ( simplename id ) simplename id ) indexaccess ( simplename id ) simplename id ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename mose events ) simplename mose events ( simplename id ) simplename id ) indexaccess ( simplename finish ) simplename finish ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename mose events ) simplename mose events ( simplename id ) simplename id ) indexaccess ( simplename result ) simplename result ) memberaccess ( simplename result ) simplename result ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename mose events ) simplename mose events ( simplename id ) simplename id ) indexaccess ( simplename finish ) simplename finish ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename publish result ) simplename publish result ( simplename id ) simplename id ( simplename result ) simplename result ( booleanliteral true ) booleanliteral true ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add a new deed to the specified address .
ref: Publish forecast event results .

193:
src: ( functiondefinition ( simplename contributor cap ) simplename contributor cap ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename contributor ) simplename contributor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cap ) simplename cap ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename list ) simplename list ( simplename get cap ) simplename get cap ) memberaccess ( simplename contributor ) simplename contributor ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename higher cap ) simplename higher cap ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename cap ) simplename cap ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename first round time ) simplename first round time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename higher cap ) simplename higher cap ( functioncall ( memberaccess ( simplename cap ) simplename cap ( simplename mul ) simplename mul ) memberaccess ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename higher cap ) simplename higher cap ) returnstatement ) block ) functiondefinition
candidate: Return the cap of a individual cap .
ref: this is a seperate function so user could query it before crowdsale starts .

194:
src: ( functiondefinition ( simplename finalize crowdsale ) simplename finalize crowdsale ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename crowdsale ) simplename crowdsale ) functioncall ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename release token transfer ) simplename release token transfer ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Finalize a succcesful crowdsale .
ref: Called once by crowdsale finalize ( ) if the sale was success .

195:
src: ( functiondefinition ( simplename get identifier from section index ) simplename get identifier from section index ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename index ) simplename index ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename map width ) simplename map width ( simplename map height ) simplename map height ) tupleexpression ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename x ) simplename x ( binaryoperation % ) binaryoperation % ( simplename index ) simplename index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename y ) simplename y ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename index ) simplename index ( tupleexpression ( binaryoperation % ) binaryoperation % ( simplename index ) simplename index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: Get the index for an NFT on one index .
ref: Get x , y <UNK> from a section index .

196:
src: ( functiondefinition ( simplename activate <UNK> ) simplename activate <UNK> ( visibility internal ) visibility internal ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename <UNK> active ) simplename <UNK> active ( simplename addr ) simplename addr ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename <UNK> active ) simplename <UNK> active ( simplename addr ) simplename addr ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename <UNK> index ) simplename <UNK> index ( simplename push ) simplename push ) memberaccess ( simplename addr ) simplename addr ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Approve the passed address to spend the specified address .
ref: methods for siphoning , <UNK> .

197:
src: ( functiondefinition ( simplename get token lock type ) simplename get token lock type ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename token lock type ) simplename token lock type ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename lock type ) simplename lock type ( simpletype ( simplename token lock type ) simplename token lock type ) simpletype ) variabledeclaration ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type not lock ) simplename type not lock ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename wei amount ) simplename wei amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename lock type ) simplename lock type ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type seed investor ) simplename type seed investor ) memberaccess ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename current phase ) simplename current phase ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename lock type ) simplename lock type ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type pre sale ) simplename type pre sale ) memberaccess ) expressionstatement ) block ) ifstatement ) ifstatement ( returnstatement ( simplename lock type ) simplename lock type ) returnstatement ) block ) functiondefinition
candidate: The type : be called by owner to lock the provided type .
ref: get the token lock type .

198:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wallet advisor ) simplename wallet advisor ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename end time locked tokens advisor ) simplename end time locked tokens advisor ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wallet team ) simplename wallet team ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename end time locked tokens team ) simplename end time locked tokens team ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

199:
src: ( functiondefinition ( simplename calc tokens per eth ) simplename calc tokens per eth ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename nth ether ) simplename nth ether ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename share of sale ) simplename share of sale ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename wdiv ) simplename wdiv ( simplename nth ether ) simplename nth ether ( simplename max funding ) simplename max funding ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename share of bonus ) simplename share of bonus ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename sub ) simplename sub ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename share of sale ) simplename share of sale ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename actual bonus ) simplename actual bonus ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename wmul ) simplename wmul ( simplename share of bonus ) simplename share of bonus ( simplename bonus ) simplename bonus ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename wmul ) simplename wmul ( simplename ending tokens per eth ) simplename ending tokens per eth ( functioncall ( simplename add ) simplename add ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename actual bonus ) simplename actual bonus ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculates number of tokens which should be withdrawn using the buy and sell bonus .
ref: return tokensPerEth for <UNK> of total contribution ( <UNK> ) .

200:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility public ) visibility public ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename amount of tokens ) simplename amount of tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( unaryoperation ! ) unaryoperation ! ( simplename only ambassadors ) simplename only ambassadors ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename ambassadors ) simplename ambassadors ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ethereum ) simplename ethereum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename tokens to ethereum ) simplename tokens to ethereum ( simplename tokens ) simplename tokens ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename ethereum ) simplename ethereum ( simplename dividend fee ) simplename dividend fee ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dev fund ) simplename dev fund ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename ethereum ) simplename ethereum ( simplename developer fee ) simplename developer fee ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taxed ethereum ) simplename taxed ethereum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub )
candidate: Liquifies tokens to ethereum .
ref: Liquifies tokens to ethereum .

201:
src: ( functiondefinition ( simplename close ) simplename close ( visibility public ) visibility public ( variabledeclaration ( simplename refund ) simplename refund ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is finalized ) simplename is finalized ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename goal ) simplename goal ( conditional ( simplename refund ) simplename refund ( functioncall ( memberaccess ( simplename goal ) simplename goal ( simplename max256 ) simplename max256 ) memberaccess ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ( functioncall ( memberaccess ( simplename goal ) simplename goal ( simplename min256 ) simplename min256 ) memberaccess ( simplename wei raised ) simplename wei raised ) functioncall ) conditional ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename end time ) simplename end time ( functioncall ( memberaccess ( simplename end time ) simplename end time ( simplename min256 ) simplename min256 ) memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename finalize ) simplename finalize ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Close the crowdsale .
ref: allows the owner to <UNK> the token sale early and claim the contents of the vault .

202:
src: ( functiondefinition ( simplename same class axies price ) simplename same class axies price ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total price ) simplename total price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current increment ) simplename current increment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current price ) simplename current price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename class ) simplename class ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename quantity ) simplename quantity ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current increment ) simplename current increment ( indexaccess ( simplename price increment ) simplename price increment ( simplename class ) simplename class ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current price ) simplename current price ( indexaccess ( simplename current price ) simplename current price ( simplename class ) simplename class ) indexaccess ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename next price ) simplename next price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename quantity ) simplename quantity ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total price ) simplename total price ( functioncall ( memberaccess ( simplename total price ) simplename total price ( simplename add ) simplename add ) memberaccess ( simplename current price ) simplename current price ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename next price ) simplename next price ( functioncall ( memberaccess ( simplename current price ) simplename current price ( simplename add ) simplename add ) memberaccess ( simplename current increment ) simplename current increment ) functioncall ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( binaryoperation / ) binaryoperation / ( simplename next price ) simplename next price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation / ) binaryoperation / ( simplename current price ) simplename current price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation >>= ) binaryoperation >>= ( simplename current increment ) simplename current increment ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current price ) simplename current price ( simplename next price ) simplename next price ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: Calculate price of one token .
ref: Calculate price of Axies from the same class .

203:
src: ( functiondefinition ( simplename get registration ) simplename get registration ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename song title ) simplename song title ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename digital ) simplename digital ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename type ) simplename type ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename professional name ) simplename professional name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename arr royalty address ) simplename arr royalty address ) variabledeclaration ( variabledeclaration ( simplename arr royalty percent ) simplename arr royalty percent ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename address ) simplename address ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( simplename owner ) simplename owner ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename song title ) simplename song title ( simplename song title ) simplename song title ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename hash ) simplename hash ( simplename hash ) simplename hash ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename digital ) simplename digital ( simplename digital signature ) simplename digital signature ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename type ) simplename type ( simplename rtype ) simplename rtype ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename duration ) simplename duration ( simplename duration ) simplename duration ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename professional name ) simplename professional name ( simplename professional name ) simplename professional name ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename arr royalty address ) simplename arr royalty address ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename royalty index ) simplename royalty index ( simplename i ) simplename i ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename arr royalty percent ) simplename arr royalty percent ( simplename i ) simplename i ) indexaccess ( memberaccess ( indexaccess ( simplename royalty partners ) simplename royalty partners ( indexaccess ( simplename arr royalty address ) simplename arr royalty address ( simplename i ) simplename i ) indexaccess ) indexaccess ( simplename percent ) simplename percent ) memberaccess ) expressionstatement ) block
candidate: Get address of an existing who has been verified .
ref: param1 address The address of the song owner .

204:
src: ( functiondefinition ( simplename make order ) simplename make order ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename on exchange ) simplename on exchange ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sell asset ) simplename sell asset ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename buy asset ) simplename buy asset ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sell quantity ) simplename sell quantity ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename buy quantity ) simplename buy quantity ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename id ) simplename id ( functioncall ( memberaccess ( functioncall ( simplename simple market ) simplename simple market ( simplename on exchange ) simplename on exchange ) functioncall ( simplename offer ) simplename offer ) memberaccess ( simplename sell quantity ) simplename sell quantity ( functioncall ( simplename asset ) simplename asset ( simplename sell asset ) simplename sell asset ) functioncall ( simplename buy quantity ) simplename buy quantity ( functioncall ( simplename asset ) simplename asset ( simplename buy asset ) simplename buy asset ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename order updated ) simplename order updated ( simplename id ) simplename id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Add an order to the exchange .
ref: Makes an order on the given exchange .

205:
src: ( functiondefinition ( simplename set oraclize query ) simplename set oraclize query ( visibility default ) visibility default ( variabledeclaration ( simplename new query ) simplename new query ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( tupleexpression ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) tupleexpression ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename query ) simplename query ( simplename new query ) simplename new query ) expressionstatement ) block ) functiondefinition
candidate: sets the oraclize query .
ref: sets the amount of gas to be sent to oraclize .

206:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename new oraclize query ) simplename new oraclize query ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) emitstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename query id ) simplename query id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename oraclize query ) simplename oraclize query ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to beneficiary ) simplename id to beneficiary ( simplename query id ) simplename query id ) indexaccess ( simplename beneficiary ) simplename beneficiary ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to wei amount ) simplename id to wei amount ( simplename query id ) simplename query id ) indexaccess ( simplename wei amount ) simplename wei amount ) expressionstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: low level token purchase function .
ref: low level token purchase function .

207:
src: ( functiondefinition ( simplename deed of owner by index ) simplename deed of owner by index ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename deed id ) simplename deed id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename index ) simplename index ( memberaccess ( indexaccess ( simplename owned deeds ) simplename owned deeds ( simplename owner ) simplename owner ) indexaccess ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename deed id ) simplename deed id ( indexaccess ( indexaccess ( simplename owned deeds ) simplename owned deeds ( simplename owner ) simplename owner ) indexaccess ( simplename index ) simplename index ) indexaccess ) expressionstatement ) block ) functiondefinition
candidate: Queries the a deed ID at a given index of a specific address .
ref: Gets the deed ID of the specified address at the specified index .

208:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename refund allowed ) simplename refund allowed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename soft cap reached ) simplename soft cap reached ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename wei balances ) simplename wei balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current balance ) simplename current balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename wei balances ) simplename wei balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename wei balances ) simplename wei balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename current balance ) simplename current balance ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Refund ether back if minimum cap is reached .
ref: <UNK> token balance as is .

209:
src: ( functiondefinition ( simplename soft mtc transfer ) simplename soft mtc transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation *= ) binaryoperation *= ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename mtc last day ) simplename mtc last day ( functioncall ( simplename to days ) simplename to days ( simplename now ) simplename now ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mtc daily spent ) simplename mtc daily spent ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mtc last day ) simplename mtc last day ( functioncall ( simplename to days ) simplename to days ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename mtc daily spent ) simplename mtc daily spent ( simplename value ) simplename value ) tupleexpression ( simplename mtc daily limit ) simplename mtc daily limit ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename mtc ) simplename mtc ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename mtc daily spent ) simplename mtc daily spent ( simplename value ) simplename value ) expressionstatement ) block ( modifierinvocation ( simplename owner exists ) simplename owner exists ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) modifierinvocation ) functiondefinition
candidate: Transfer ETH from smart contract .
ref: Allows anyone to execute a confirmed transaction .

210:
src: ( functiondefinition ( simplename get flight stats ) simplename get flight stats ( visibility internal ) visibility internal ( variabledeclaration ( simplename policy id ) simplename policy id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename carrier flight number ) simplename carrier flight number ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename oraclize url ) simplename oraclize url ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( functioncall ( simplename str concat ) simplename str concat ( simplename oraclize ratings base url ) simplename oraclize ratings base url ( simplename carrier flight number ) simplename carrier flight number ( simplename oraclize ratings query ) simplename oraclize ratings query ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename query id ) simplename query id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename oraclize query ) simplename oraclize query ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename oraclize url ) simplename oraclize url ( simplename oraclize gas ) simplename oraclize gas ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename bookkeeping ) simplename bookkeeping ( simplename acc oraclize costs ) simplename acc oraclize costs ( simplename acc balance ) simplename acc balance ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( binaryoperation - ) binaryoperation - ( tupleexpression ( unaryoperation - ) unaryoperation - ( indexaccess ( simplename ledger ) simplename ledger ( simplename acc balance ) simplename acc balance ) indexaccess ) tupleexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename int ) simplename int ) simpletype ) simpletypeexpression ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename oraclize callbacks ) simplename oraclize callbacks ( simplename query id ) simplename query id ) indexaccess ( functioncall ( simplename oraclize callback ) simplename oraclize callback ( simplename policy id ) simplename policy id ( memberaccess ( simplename oraclize state ) simplename oraclize state ( simplename for underwriting ) simplename for underwriting ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log oraclize call ) simplename log oraclize call ( simplename policy id ) simplename policy id ( simplename query id ) simplename query id ( simplename oraclize url ) simplename oraclize url ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Return ownership of a specific oraclize .
ref: internal , so no reentrant guard neccessary .

211:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename is finalized ) simplename is finalized ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename is active ) simplename is active ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename funding end time ) simplename funding end time ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename raised ) simplename raised ( simplename token creation min ) simplename token creation min ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eth val refund ) simplename eth val refund ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename refunds ) simplename refunds ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename eth val refund ) simplename eth val refund ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename refunds ) simplename refunds ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename allstocks val ) simplename allstocks val ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename erc20 interface ) simplename erc20 interface ( simplename token ) simplename token ) functioncall ( simplename balance of ) simplename balance of ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename raised ) simplename raised ( functioncall ( memberaccess ( simplename raised ) simplename raised ( simplename sub ) simplename sub ) memberaccess ( simplename allstocks val ) simplename allstocks val ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename eth val refund ) simplename eth val refund ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log refund ) simplename log refund ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename eth val refund ) simplename eth val refund ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Allows contributors to recover their ether in the case of a failed funding campaign .
ref: Allows contributors to recover their ether in the case of a failed funding campaign .

212:
src: ( functiondefinition ( simplename remove token from ) simplename remove token from ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token index ) simplename token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename owned tokens index ) simplename owned tokens index ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token index ) simplename last token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename from ) simplename from ) indexaccess ( simplename length ) simplename length ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token ) simplename last token ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename from ) simplename from ) indexaccess ( simplename last token index ) simplename last token index ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename from ) simplename from ) indexaccess ( simplename token index ) simplename token index ) indexaccess ( simplename last token ) simplename last token ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename from ) simplename from ) indexaccess ( simplename last token index ) simplename last token index ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( memberaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename from ) simplename from ) indexaccess ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename owned tokens index ) simplename owned tokens index ( simplename token id ) simplename token id ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename owned tokens index ) simplename owned tokens index ( simplename last token ) simplename last token ) indexaccess ( simplename token index ) simplename token index ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Internal function to remove a token ID from the list of a given address .
ref: Internal function to remove a token ID from the list of a given address .

213:
src: ( functiondefinition ( simplename set backend proxy buyer ) simplename set backend proxy buyer ( visibility external ) visibility external ( variabledeclaration ( simplename proxy address ) simplename proxy address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename proxy ) simplename proxy ( simplename proxy address ) simplename proxy address ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the address of the proxy , can perform the proxy which is paused .
ref: Set <UNK> address .

214:
src: ( modifierdefinition ( simplename is activated ) simplename is activated ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: used to make sure no one can interact with contract until it has been activated .
ref: Throws if game is not ready .

215:
src: ( functiondefinition ( simplename check ratio ) simplename check ratio ( visibility internal ) visibility internal ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename ratio update time ) simplename ratio update time ( binaryoperation - ) binaryoperation - ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename all ether ) simplename all ether ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ratio update time ) simplename ratio update time ( simplename now ) simplename now ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ratio ) simplename ratio ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( binaryoperation / ) binaryoperation / ( simplename total supply ) simplename total supply ( simplename all ether ) simplename all ether ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Internal function to check if a price is not based on time intervals .
ref: try to update ratio , 15 days limit .

216:
src: ( functiondefinition ( simplename add initial owners ) simplename add initial owners ( visibility internal ) visibility internal ( variabledeclaration ( simplename owners ) simplename owners ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename owners ) simplename owners ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename owners ) simplename owners ( indexaccess ( simplename owners ) simplename owners ( simplename i ) simplename i ) indexaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename owners ) simplename owners ( indexaccess ( simplename owners ) simplename owners ( simplename i ) simplename i ) indexaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: add new initial supply .
ref: internal function , called in constructor .

217:
src: ( functiondefinition ( simplename tokens of owner ) simplename tokens of owner ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner tokens ) simplename owner tokens ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token count ) simplename token count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename result ) simplename result ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( simplename token count ) simplename token count ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename total supply ) simplename total supply ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result index ) simplename result index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename dank id ) simplename dank id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename dank id ) simplename dank id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation <= ) binaryoperation <= ( simplename dank id ) simplename dank id ( simplename <UNK> ) simplename <UNK> ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename dank id ) simplename dank id ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename dank index to owner ) simplename dank index to owner ( simplename dank id ) simplename dank id ) indexaccess ( simplename owner ) simplename owner ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename result ) simplename result ( simplename result index ) simplename result index ) indexaccess ( simplename dank id ) simplename dank id ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename result index ) simplename result index ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename result ) simplename result ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: This method MUST NEVER be called by smart contract code .
ref: This method MUST NEVER be called by smart contract code .

218:
src: ( functiondefinition ( simplename string to array ) simplename string to array ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename string ) simplename string ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( array ( simpletype ( simplename string ) simplename string ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename str ) simplename str ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename string ) simplename string ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename delim ) simplename delim ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename parts ) simplename parts ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename string ) simplename string ) simpletype ) array ( binaryoperation + ) binaryoperation + ( functioncall ( memberaccess ( simplename str ) simplename str ( simplename count ) simplename count ) memberaccess ( simplename delim ) simplename delim ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename parts ) simplename parts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename parts ) simplename parts ( simplename i ) simplename i ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename str ) simplename str ( simplename split ) simplename split ) memberaccess ( simplename delim ) simplename delim ) functioncall ( simplename to string ) simplename to string ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( simplename parts ) simplename parts ) returnstatement ) block ) functiondefinition
candidate: Joins an array of slices , using self as a delimiter , returning a newly allocated string .
ref: Slices a string according to specified delimiter , returning the <UNK> parts in an array .

219:
src: ( functiondefinition ( simplename create token contract ) simplename create token contract ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename mintable token ) simplename mintable token ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( simpletype ( simplename fsbtoken ) simplename fsbtoken ) simpletype ) functioncall ) returnstatement ) block ) functiondefinition
candidate: creates the token to be sold .
ref: creates the token to be sold .

220:
src: ( modifierdefinition ( simplename at state ) simplename at state ( variabledeclaration ( simplename state ) simplename state ( simpletype ( simplename state ) simplename state ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename m state ) simplename m state ( simplename state ) simplename state ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modified allowing execution only if the crowdsale is currently running .
ref: MODIFIERS - <UNK> Access and State Machine <UNK> .

221:
src: ( functiondefinition ( simplename add tokens to account ) simplename add tokens to account ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename uuid ) simplename uuid ( simpletype ( simplename bytes16 ) simplename bytes16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens count ) simplename tokens count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename register account ) simplename register account ( simplename uuid ) simplename uuid ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename uuid ) simplename uuid ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename uuid ) simplename uuid ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename tokens count ) simplename tokens count ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename add ) simplename add ) memberaccess ( simplename tokens count ) simplename tokens count ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only allowed addresses ) simplename only allowed addresses ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Add tokens for account to the specified account .
ref: Function for adding tokens to specified account .

222:
src: ( functiondefinition ( simplename icostatus ) simplename icostatus ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename usd ) simplename usd ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cst ) simplename cst ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename usd ) simplename usd ( binaryoperation + ) binaryoperation + ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename presale sold ) simplename presale sold ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename crowdsale sold ) simplename crowdsale sold ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename usd ) simplename usd ( functioncall ( memberaccess ( simplename usd ) simplename usd ( simplename add ) simplename add ) memberaccess ( simplename preico usd ) simplename preico usd ) functioncall ) expressionstatement ( returnstatement ( tupleexpression ( simplename usd ) simplename usd ( binaryoperation + ) binaryoperation + ( simplename eth sold ) simplename eth sold ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename preico usd ) simplename preico usd ( simplename mul ) simplename mul ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename eth rate ) simplename eth rate ) functioncall ( binaryoperation + ) binaryoperation + ( simplename presale sold ) simplename presale sold ( simplename crowdsale sold ) simplename crowdsale sold ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Return all of bonuses .
ref: ( received , ETH received , CST sold ) .

223:
src: ( functiondefinition ( simplename lock emission ) simplename lock emission ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> ) simplename <UNK> ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Lock owner during the contract .
ref: The owner can turn off accepting new ether .

224:
src: ( functiondefinition ( simplename get zone ) simplename get zone ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sell price ) simplename sell price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename zone id ) simplename zone id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename zone structs ) simplename zone structs ( simplename zone id ) simplename zone id ) indexaccess ( simplename id ) simplename id ) memberaccess ( memberaccess ( indexaccess ( simplename zone structs ) simplename zone structs ( simplename zone id ) simplename zone id ) indexaccess ( simplename owner ) simplename owner ) memberaccess ( memberaccess ( indexaccess ( simplename zone structs ) simplename zone structs ( simplename zone id ) simplename zone id ) indexaccess ( simplename sell price ) simplename sell price ) memberaccess ) tupleexpression ) returnstatement ) block ( modifierinvocation ( simplename only valid zone ) simplename only valid zone ( simplename zone id ) simplename zone id ) modifierinvocation ) functiondefinition
candidate: return a user details of a his user .
ref: Return zone details .

225:
src: ( functiondefinition ( simplename transfer beneficiary ) simplename transfer beneficiary ( visibility default ) visibility default ( variabledeclaration ( simplename newbeneficiary ) simplename newbeneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename newbeneficiary ) simplename newbeneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename beneficiary ) simplename beneficiary ( simplename newbeneficiary ) simplename newbeneficiary ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: use this to set the crowdsale beneficiary address .
ref: use this to set the crowdsale beneficiary address .

226:
src: ( functiondefinition ( simplename get ether ) simplename get ether ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename match completed ) simplename match completed ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename win index ) simplename win index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bet on team a ) simplename bet on team a ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bet on team b ) simplename bet on team b ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total bet contribution ) simplename total bet contribution ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename bet on team a ) simplename bet on team a ( simplename add ) simplename add ) memberaccess ( simplename bet on team b ) simplename bet on team b ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename total bet contribution ) simplename total bet contribution ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename total bet contribution ) simplename total bet contribution ) functioncall ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename loosing index ) simplename loosing index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( conditional ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename win index ) simplename win index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename bet value ) simplename bet value
candidate: This function will be used to get the total certain number of transactions .
ref: Allows the user to get ether he placed on his team , if his team won or draw .

227:
src: ( modifierdefinition ( simplename only after ico ) simplename only after ico ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename ico end time ) simplename ico end time ( simplename now ) simplename now ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Only after ICO ends .
ref: This code can be executed only after ICO .

228:
src: ( functiondefinition ( simplename remove reserv contract ) simplename remove reserv contract ( visibility public ) visibility public ( variabledeclaration ( simplename to remove ) simplename to remove ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename reservation contracts ) simplename reservation contracts ( simplename to remove ) simplename to remove ) indexaccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename reservation contracts ) simplename reservation contracts ( simplename to remove ) simplename to remove ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Removes contract from the list of open auctions .
ref: Remove a reservation contract .

229:
src: ( functiondefinition ( simplename get icoend date ) simplename get icoend date ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename start time ) simplename start time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to get the amount of token owner can call the crowdsale .
ref: view the ICO end date and time .

230:
src: ( functiondefinition ( simplename pre validate purchase ) simplename pre validate purchase ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Validation of an incoming purchase .
ref: Validation of an incoming purchase .

231:
src: ( functiondefinition ( simplename enable transfers ) simplename enable transfers ( visibility default ) visibility default ( variabledeclaration ( simplename transfers enabled ) simplename transfers enabled ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename enable transfers ) simplename enable transfers ) memberaccess ( simplename transfers enabled ) simplename transfers enabled ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Enables token holders to transfer their tokens freely if true .
ref: Enables token holders to transfer their tokens freely if true .

232:
src: ( functiondefinition ( simplename set count winner by place ) simplename set count winner by place ( visibility public ) visibility public ( variabledeclaration ( simplename place ) simplename place ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename winner count ) simplename winner count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename winner score ) simplename winner score ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename winner count ) simplename winner count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename place ) simplename place ( simplename count winner place ) simplename count winner place ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename prizes by place ) simplename prizes by place ( simplename place ) simplename place ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename prize fund ) simplename prize fund ( simplename mul ) simplename mul ) memberaccess ( indexaccess ( simplename prize distribution ) simplename prize distribution ( simplename place ) simplename place ) indexaccess ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename winner count ) simplename winner count ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename prizes by place <UNK> ) simplename prizes by place <UNK> ( simplename place ) simplename place ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename prize fund <UNK> ) simplename prize fund <UNK> ( simplename mul ) simplename mul ) memberaccess ( indexaccess ( simplename prize distribution ) simplename prize distribution ( simplename place ) simplename place ) indexaccess ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename winner count ) simplename winner count ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename score by place ) simplename score by place ( simplename place ) simplename place ) indexaccess ( simplename winner score ) simplename winner score ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename when paused ) simplename when paused ) modifierinvocation ) functiondefinition
candidate: only owner can set the prize percentage .
ref: method for manual add / edit winner list and winner count only after final .

233:
src: ( functiondefinition ( simplename increase jackpot ) simplename increase jackpot ( visibility public ) visibility public ( variabledeclaration ( simplename increase amount ) simplename increase amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename increase amount ) simplename increase amount ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( simplename jackpot size ) simplename jackpot size ( simplename locked in bets ) simplename locked in bets ( simplename increase amount ) simplename increase amount ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename jackpot size ) simplename jackpot size ( functioncall ( simpletypeexpression ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) simpletypeexpression ( simplename increase amount ) simplename increase amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: We increase the jackpot to the winner .
ref: Ability to top up jackpot faster than it's natural growth by house fees .

234:
src: ( functiondefinition ( simplename mint forwarder ) simplename mint forwarder ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename challenge digest ) simplename challenge digest ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename proxy mint array ) simplename proxy mint array ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename proxy mint array ) simplename proxy mint array ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous epoch count ) simplename previous epoch count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename erc918 interface ) simplename erc918 interface ( simplename mined token ) simplename mined token ) functioncall ( simplename epoch count ) simplename epoch count ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename proxy minter ) simplename proxy minter ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename proxy mint array ) simplename proxy mint array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename proxy mint array ) simplename proxy mint array ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simplename proxy minter interface ) simplename proxy minter interface ( simplename proxy minter ) simplename proxy minter ) functioncall ( simplename proxy mint ) simplename proxy mint ) memberaccess ( simplename nonce ) simplename nonce ( simplename challenge digest ) simplename challenge digest ) functioncall ) functioncall ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename remaining proxy mint array ) simplename remaining proxy mint array ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( functioncall ( simplename pop first from array ) simplename pop first from array ( simplename proxy mint array ) simplename proxy mint array ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simplename mint forwarder interface ) simplename mint forwarder interface ( simplename proxy minter ) simplename proxy minter ) functioncall ( simplename mint forwarder ) simplename mint forwarder ) memberaccess ( simplename nonce ) simplename nonce ( simplename challenge digest ) simplename challenge digest ( simplename remaining proxy mint array ) simplename remaining proxy mint array ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( simplename erc918 interface ) simplename erc918 interface ( simplename mined token ) simplename mined token ) functioncall ( simplename epoch count ) simplename epoch count ) memberaccess ) functioncall ( functioncall ( memberaccess ( simplename previous epoch count ) simplename previous epoch count
candidate: Set the target of the token contract , and then transfer ownership of the token contract .
ref: Pay out the token balance if the king becomes the king twice in a row .

235:
src: ( functiondefinition ( simplename set polyusd ) simplename set polyusd ( visibility public ) visibility public ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( emitstatement ( functioncall ( simplename log price updated ) simplename log price updated ( simplename price ) simplename price ( simplename polyusd ) simplename polyusd ( simplename now ) simplename now ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename polyusd ) simplename polyusd ( simplename price ) simplename price ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename latest update ) simplename latest update ( simplename now ) simplename now ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to set new price .
ref: Allows owner to manually set POLYUSD price .

236:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename frozen account ) simplename frozen account ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename frozen account ) simplename frozen account ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename balance ) simplename balance ) memberaccess ( simplename min balance for accounts ) simplename min balance for accounts ( expressionstatement ( functioncall ( simplename sell ) simplename sell ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename min balance for accounts ) simplename min balance for accounts ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename balance ) simplename balance ) memberaccess ) tupleexpression ( simplename sell price ) simplename sell price ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

237:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility internal ) visibility internal ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename account ) simplename account ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename account ) simplename account ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal function that mints an amount of the token and assigns it to an account .
ref: Mints new tokens .

238:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename total supply ) simplename total supply ( simplename hard cap ) simplename hard cap ) tupleexpression ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename end date ) simplename end date ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename finalized ) simplename finalized ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename contract address ) simplename contract address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename this ) simplename this ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename finalized ) simplename finalized ( simplename beneficiary ) simplename beneficiary ( memberaccess ( simplename contract address ) simplename contract address ( simplename balance ) simplename balance ) memberaccess ( simplename total supply ) simplename total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename contract address ) simplename contract address ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total tokens locked ) simplename total tokens locked ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename eos pizza slice safe ) simplename eos pizza slice safe ( simplename total tokens locked ) simplename total tokens locked ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename eos pizza slice safe ) simplename eos pizza slice safe ) functioncall ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename eos pizza slice safe ) simplename eos pizza slice safe ) functioncall ) indexaccess ( simplename plus ) simplename plus ) memberaccess ( simplename total tokens locked ) simplename total tokens locked ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename plus ) simplename plus ) memberaccess ( simplename total tokens locked ) simplename total tokens locked ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename plus ) simplename plus ) memberaccess ( simplename tokens bounty program ) simplename tokens bounty program ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename plus ) simplename plus ) memberaccess ( simplename tokens bounty program ) simplename tokens bounty program ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename finalized ) simplename finalized ( booleanliteral true )
candidate: Finalize a succcesful crowdsale .
ref: Finalize the donationraiser if endDate has passed or if hardCap is reached .

239:
src: ( functiondefinition ( simplename set account registry ) simplename set account registry ( visibility public ) visibility public ( variabledeclaration ( simplename new registry ) simplename new registry ( simpletype ( simplename account registry interface ) simplename account registry interface ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old registry ) simplename old registry ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename registry ) simplename registry ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename registry ) simplename registry ( simplename new registry ) simplename new registry ) expressionstatement ( emitstatement ( functioncall ( simplename account registry changed ) simplename account registry changed ( simplename old registry ) simplename old registry ( simplename registry ) simplename registry ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename non zero ) simplename non zero ( simplename new registry ) simplename new registry ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to set the registry .
ref: Change the address of <UNK> , which enables authorization of subject comments .

240:
src: ( functiondefinition ( simplename bytes to uint ) simplename bytes to uint ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename ret ) simplename ret ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename string lib ) simplename string lib ( simplename bytes to uint ) simplename bytes to uint ) memberaccess ( simplename v ) simplename v ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Get the string from string with their own address .
ref: Converts a numeric string to it's unsigned integer representation .

241:
src: ( functiondefinition ( simplename approve user kyc ) simplename approve user kyc ( visibility public ) visibility public ( variabledeclaration ( simplename user ) simplename user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename user ) simplename user ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename sup ) simplename sup ( simpletype ( simplename supporter ) simplename supporter ) simpletype ) variabledeclaration ( indexaccess ( simplename supporters map ) simplename supporters map ( simplename user ) simplename user ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename sup ) simplename sup ( simplename has kyc ) simplename has kyc ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename kyc ) simplename kyc ( simplename user ) simplename user ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner or kycwallet ) simplename only owner or kycwallet ) modifierinvocation ) functiondefinition
candidate: Approves an user's KYC .
ref: Approve user's KYC .

242:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( returnstatement ( functioncall ( simplename contract fallback ) simplename contract fallback ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename valid address ) simplename valid address ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename not this ) simplename not this ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename greater than zero ) simplename greater than zero ( simplename value ) simplename value ) modifierinvocation ) functiondefinition
candidate: Transfer the specified amount of tokens to the specified address .
ref: transfer token for a specified address .

243:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility default ) visibility default ( block ( ifstatement ( simplename bought tokens ) simplename bought tokens ( returnstatement ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bought tokens ) simplename bought tokens ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename time bought ) simplename time bought ( simplename now ) simplename now ) expressionstatement ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename sale ) simplename sale ( simplename create tokens ) simplename create tokens ) memberaccess ( simplename value ) simplename value ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename bounty ) simplename bounty ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename bounty ) simplename bounty ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Buys tokens in the crowdsale and rewards the caller , callable by anyone .
ref: Buys tokens in the crowdsale and rewards the caller , callable by anyone .

244:
src: ( functiondefinition ( simplename recommended price ) simplename recommended price ( visibility public ) visibility public ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename quality ) simplename quality ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename quality ) simplename quality ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename quality ) simplename quality ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename start price ) simplename start price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename start price ) simplename start price ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename revert quality ) simplename revert quality ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename quality ) simplename quality ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename one level ) simplename one level ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename one <UNK> ) simplename one <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename one level ) simplename one level ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename full levels ) simplename full levels ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename revert quality ) simplename revert quality ( simplename one level ) simplename one level ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename full <UNK> ) simplename full <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation % ) binaryoperation % ( simplename revert quality ) simplename revert quality ( simplename one level ) simplename one level ) tupleexpression ( simplename one <UNK> ) simplename one <UNK> ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename surplus ) simplename surplus ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( binaryoperation - ) binaryoperation - ( simplename revert quality ) simplename revert quality ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename full levels ) simplename full levels ( simplename one level
candidate: Get the price of a specific asset .
ref: calculation of recommended price .

245:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename danks ) simplename danks ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

246:
src: ( functiondefinition ( simplename available balance in locking period for investor ) simplename available balance in locking period for investor ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename balances allowed to transfer ) simplename balances allowed to transfer ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: get the amount of specific available tokens .
ref: function to check available balance to transfer tokens during locking <UNK> for investors .

247:
src: ( functiondefinition ( simplename get dice win amount ) simplename get dice win amount ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename modulo ) simplename modulo ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename roll under ) simplename roll under ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename roll under ) simplename roll under ( binaryoperation <= ) binaryoperation <= ( simplename roll under ) simplename roll under ( simplename modulo ) simplename modulo ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename house edge ) simplename house edge ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( simplename house edge percent ) simplename house edge percent ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename house edge ) simplename house edge ( simplename house edge minimum amount ) simplename house edge minimum amount ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename house edge ) simplename house edge ( simplename house edge minimum amount ) simplename house edge minimum amount ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename house edge ) simplename house edge ( simplename amount ) simplename amount ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename amount ) simplename amount ( simplename house edge ) simplename house edge ) tupleexpression ( simplename modulo ) simplename modulo ( simplename roll under ) simplename roll under ) returnstatement ) block ) functiondefinition
candidate: Get the expected win amount after house period , which should be invested by user .
ref: Get the expected win amount after house edge is subtracted .

248:
src: ( functiondefinition ( simplename payment digest ) simplename payment digest ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename channel id ) simplename channel id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payment ) simplename payment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename channel id ) simplename channel id ( simplename payment ) simplename payment ) functioncall ) returnstatement ) block ) functiondefinition
candidate: payment for debug functions .
ref: Hash of the payment promise to sign .

249:
src: ( functiondefinition ( simplename get votes for item from voter index ) simplename get votes for item from voter index ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename voters ) simplename voters ) variabledeclaration ( variabledeclaration ( simplename votes ) simplename votes ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename item index ) simplename item index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename voter index ) simplename voter index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename count ) simplename count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename item index ) simplename item index ( simplename item count ) simplename item count ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename voter index ) simplename voter index ( memberaccess ( simplename voters ) simplename voters ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename count ) simplename count ( functioncall ( simplename min ) simplename min ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename voters ) simplename voters ( simplename length ) simplename length ) memberaccess ( simplename voter index ) simplename voter index ( simplename count ) simplename count ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename voters ) simplename voters ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( simplename count ) simplename count ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename votes ) simplename votes ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( simplename count ) simplename count ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename count ) simplename count ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename voters ) simplename voters ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename voters ) simplename voters ( binaryoperation + ) binaryoperation + ( simplename voter index ) simplename voter index ( simplename i ) simplename i ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename votes ) simplename votes ( simplename i ) simplename i ) indexaccess ( indexaccess ( memberaccess ( indexaccess ( simplename vote items ) simplename vote items ( simplename item index ) simplename item index ) indexaccess ( simplename votes ) simplename votes ) memberaccess ( indexaccess ( simplename voters ) simplename voters ( simplename i ) simplename i ) indexaccess ) indexaccess ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: returns list of voter for voter .
ref: get votes for a subset of <UNK> voters , from <UNK> .

250:
src: ( functiondefinition ( simplename set as burner ) simplename set as burner ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is burner ) simplename is burner ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename burners ) simplename burners ( simplename addr ) simplename addr ) indexaccess ( simplename is burner ) simplename is burner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Method to set the new contract balance .
ref: Function to set addresses that will be able to burn tokens .

251:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename pohmodatasets event returns ) simplename pohmodatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename pohmodatasets event returns ) simplename pohmodatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename po h ) simplename po h ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename poh ) simplename poh ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename res ) simplename res ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess
candidate: ends the round .
ref: ends the round .

252:
src: ( functiondefinition ( simplename allocate to early contributor ) simplename allocate to early contributor ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename initial ec token allocation ) simplename initial ec token allocation ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename initial ec token allocation ) simplename initial ec token allocation ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( functioncall ( simplename allocate from ) simplename allocate from ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only fundraiser ) simplename only fundraiser ) modifierinvocation ) functiondefinition
candidate: Allocate tokens to the users .
ref: Allocate tokens to an early contributor from the early contributor share .

253:
src: ( functiondefinition ( simplename confirm received ) simplename confirm received ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename inactive ) simplename inactive ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename seller ) simplename seller ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation - ) binaryoperation - ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename broker fee ) simplename broker fee ( simplename developerfee ) simplename developerfee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename broker ) simplename broker ( simplename transfer ) simplename transfer ) memberaccess ( simplename broker fee ) simplename broker fee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename developer ) simplename developer ( simplename transfer ) simplename transfer ) memberaccess ( simplename developerfee ) simplename developerfee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename item received ) simplename item received ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only broker ) simplename only broker ) modifierinvocation ( modifierinvocation ( simplename in state ) simplename in state ( memberaccess ( simplename state ) simplename state ( simplename locked ) simplename locked ) memberaccess ) modifierinvocation ) functiondefinition
candidate: Confirm the buyer .
ref: Confirm that you ( the buyer ) received the item .

254:
src: ( functiondefinition ( simplename deliver tokens ) simplename deliver tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token amount ) simplename token amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename lock type ) simplename lock type ( simpletype ( simplename token lock type ) simplename token lock type ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename lock type ) simplename lock type ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type not lock ) simplename type not lock ) memberaccess ( block ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename beneficiary ) simplename beneficiary ( simplename token amount ) simplename token amount ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename lock type ) simplename lock type ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type seed investor ) simplename type seed investor ) memberaccess ( block ( expressionstatement ( functioncall ( simplename mint timelocked ) simplename mint timelocked ( simplename beneficiary ) simplename beneficiary ( simplename token amount ) simplename token amount ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename lock type ) simplename lock type ( memberaccess ( simplename token lock type ) simplename token lock type ( simplename type pre sale ) simplename type pre sale ) memberaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount1 ) simplename amount1 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename token amount ) simplename token amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount2 ) simplename amount2 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename token amount ) simplename token amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount3 ) simplename amount3 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename token amount ) simplename token amount ( simplename sub ) simplename sub ) memberaccess ( simplename amount1 ) simplename amount1 ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename amount2 ) simplename amount2 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename release time1 ) simplename release time1 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement
candidate: Source of tokens .
ref: Source of tokens .

255:
src: ( functiondefinition ( simplename revoke vesting ) simplename revoke vesting ( visibility public ) visibility public ( variabledeclaration ( simplename vesting contract ) simplename vesting contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename reason ) simplename reason ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sub vesting contract ) simplename sub vesting contract ( simpletype ( simplename token vesting interface ) simplename token vesting interface ) simpletype ) variabledeclaration ( functioncall ( simplename token vesting interface ) simplename token vesting interface ( simplename vesting contract ) simplename vesting contract ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename sub vesting contract ) simplename sub vesting contract ( simplename revoke ) simplename revoke ) memberaccess ( simplename reason ) simplename reason ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename delete vesting from storage ) simplename delete vesting from storage ( simplename vesting contract ) simplename vesting contract ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Revoke vesting with vesting contract with vesting schedule , can be called by owner wallet .
ref: revoke vesting ; release releasable funds to beneficiary and return remaining to master and kill vesting contract .

256:
src: ( modifierdefinition ( simplename only ceoor cfo ) simplename only ceoor cfo ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename cfo address ) simplename cfo address ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename ceo address ) simplename ceo address ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier to make a function callable only when the CFO is completed .
ref: Modifier to make a function only callable by CEO or CFO .

257:
src: ( functiondefinition ( simplename claim tokens ) simplename claim tokens ( visibility public ) visibility public ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token ) simplename token ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename sentoken ) simplename sentoken ) simpletype ) variabledeclaration ( functioncall ( simplename sentoken ) simplename sentoken ( simplename token ) simplename token ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename controller ) simplename controller ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename claimed tokens ) simplename claimed tokens ( simplename token ) simplename token ( simplename controller ) simplename controller ( simplename balance ) simplename balance ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only controller ) simplename only controller ) modifierinvocation ) functiondefinition
candidate: This method can be used by the controller to extract mistakenly sent tokens to this contract .
ref: This method can be used by the controller to extract mistakenly sent tokens to this contract .

258:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename token frozen ) simplename token frozen ) functioncall ) expressionstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename can make no fee transfer ) simplename can make no fee transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ) functioncall ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename has prestige ) simplename has prestige ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( block ( expressionstatement ( functioncall ( simplename no fee ) simplename no fee ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: send tokens from your address .

259:
src: ( functiondefinition ( simplename owner set bankroll ) simplename owner set bankroll ( visibility public ) visibility public ( variabledeclaration ( simplename new bankroll ) simplename new bankroll ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename zthtkn ) simplename zthtkn ( simplename approve ) simplename approve ) memberaccess ( simplename bankroll ) simplename bankroll ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bankroll ) simplename bankroll ( simplename new bankroll ) simplename new bankroll ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename zthtkn ) simplename zthtkn ( simplename approve ) simplename approve ) memberaccess ( simplename new bankroll ) simplename new bankroll ( simplename max int ) simplename max int ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Only owner address can set bankroll address .
ref: Only owner address can set bankroll address .

260:
src: ( functiondefinition ( simplename calculate sale return ) simplename calculate sale return ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename supply ) simplename supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename reserve balance ) simplename reserve balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename reserve ratio ) simplename reserve ratio ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sell amount ) simplename sell amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename formula ) simplename formula ( simplename calculate sale return ) simplename calculate sale return ) memberaccess ( simplename supply ) simplename supply ( simplename reserve balance ) simplename reserve balance ( simplename reserve ratio ) simplename reserve ratio ( simplename sell amount ) simplename sell amount ) functioncall ) returnstatement ) block ) functiondefinition
candidate: calculate the expected return for selling the token for one of its reserve tokens .
ref: proxy for the bancor formula sale return calculation .

261:
src: ( functiondefinition ( simplename mint part of emission ) simplename mint part of emission ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename part ) simplename part ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename part of emission for public sales ) simplename part of emission for public sales ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pool tokens ) simplename pool tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename m publicly distributed tokens ) simplename m publicly distributed tokens ( simplename mul ) simplename mul ) memberaccess ( simplename part ) simplename part ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename part of emission for public sales ) simplename part of emission for public sales ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename m smr ) simplename m smr ( simplename mint ) simplename mint ) memberaccess ( simplename to ) simplename to ( simplename pool tokens ) simplename pool tokens ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename payload size is ) simplename payload size is ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ( modifierinvocation ( simplename valid address ) simplename valid address ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename requires state ) simplename requires state ( memberaccess ( simplename state ) simplename state ( simplename minting2 pools ) simplename minting2 pools ) memberaccess ) modifierinvocation ( modifierinvocation ( simplename only by ) simplename only by ( simplename m pools ) simplename m pools ) modifierinvocation ) functiondefinition
candidate: mint new tokens for public .
ref: Mints tokens to predefined token pools after public sales .

262:
src: ( functiondefinition ( simplename unpause ) simplename unpause ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename paused ) simplename paused ( booleanliteral false ) booleanliteral false ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only authorized ) simplename only authorized ) modifierinvocation ) functiondefinition
candidate: called by the owner to unpause , returns to normal state .
ref: called by the owner to unpause , returns to normal state .

263:
src: ( functiondefinition ( simplename tokens of owner ) simplename tokens of owner ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner tokens ) simplename owner tokens ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token count ) simplename token count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename result ) simplename result ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( simplename token count ) simplename token count ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total token ) simplename total token ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename total supply ) simplename total supply ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result index ) simplename result index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token id ) simplename token id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation <= ) binaryoperation <= ( simplename token id ) simplename token id ( simplename total token ) simplename total token ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename token id ) simplename token id ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename token owner ) simplename token owner ( simplename token id ) simplename token id ) indexaccess ( simplename owner ) simplename owner ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename result ) simplename result ( simplename result index ) simplename result index ) indexaccess ( simplename token id ) simplename token id ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename result index ) simplename result index ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename result ) simplename result ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: This method MUST NEVER be called by smart contract code .
ref: get list of token .

264:
src: ( functiondefinition ( simplename unhalt ) simplename unhalt ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename halted ) simplename halted ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: called by the owner on end of emergency , returns to normal state .
ref: called by only owner to stop the emergency situation .

265:
src: ( functiondefinition ( simplename get sales ) simplename get sales ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename lottery ) simplename lottery ( simpletype ( simplename lottery ) simplename lottery ) simpletype ) variabledeclaration ( indexaccess ( simplename lotteries ) simplename lotteries ( binaryoperation - ) binaryoperation - ( simplename lottery count ) simplename lottery count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) variabledeclarationstatement ( returnstatement ( tupleexpression ( memberaccess ( simplename lottery ) simplename lottery ( simplename selling addresses ) simplename selling addresses ) memberaccess ( memberaccess ( simplename lottery ) simplename lottery ( simplename selling amounts ) simplename selling amounts ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Returns selling info .
ref: Returns arrays of addresses who sell tokens and corresponding amounts .

266:
src: ( functiondefinition ( simplename emergency split toggle ) simplename emergency split toggle ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename split in service ) simplename split in service ( unaryoperation ! ) unaryoperation ! ( simplename split in service ) simplename split in service ) expressionstatement ) block ) functiondefinition
candidate: Set the service fee .
ref: Disable the splitting function .

267:
src: ( functiondefinition ( simplename transfer token ) simplename transfer token ( visibility internal ) visibility internal ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simplename token ) simplename token ( simplename token ) simplename token ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( simplename account ) simplename account ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Transfer token to user account .

268:
src: ( functiondefinition ( simplename set ad owner ) simplename set ad owner ( visibility public ) visibility public ( variabledeclaration ( simplename idx ) simplename idx ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename ad ) simplename ad ( simpletype ( simplename ad ) simplename ad ) simpletype ) variabledeclaration ( indexaccess ( simplename ads ) simplename ads ( simplename idx ) simplename idx ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename ad ) simplename ad ( simplename owner ) simplename owner ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename ad ) simplename ad ( simplename owner ) simplename owner ) memberaccess ( simplename new owner ) simplename new owner ) expressionstatement ( expressionstatement ( functioncall ( simplename set ad owner ) simplename set ad owner ( simplename idx ) simplename idx ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename new owner ) simplename new owner ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: allows the owner to change the owner of a specific ad unit .
ref: setAdOwner changes the owner of an ad unit .

269:
src: ( functiondefinition ( simplename withdraw incentives ) simplename withdraw incentives ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename incentive distribution started ) simplename incentive distribution started ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename incentive distribution round ) simplename incentive distribution round ( simplename incentive distribution max rounds ) simplename incentive distribution max rounds ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename incentive distribution date ) simplename incentive distribution date ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total supply to date ) simplename total supply to date ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename total supply ) simplename total supply ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename denominator ) simplename denominator ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename incentive distribution round ) simplename incentive distribution round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename denominator ) simplename denominator ( binaryoperation ** ) binaryoperation ** ( simplename incentive distribution round denominator ) simplename incentive distribution round denominator ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename incentive distribution round ) simplename incentive distribution round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ) block ) ifstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename incentives ) simplename incentives ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename total supply to date ) simplename total supply to date ( memberaccess ( indexaccess ( simplename incentives ) simplename incentives ( simplename i ) simplename i ) indexaccess ( simplename percentage ) simplename percentage ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename denominator ) simplename denominator ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename incentives ) simplename incentives ( simplename i ) simplename i ) indexaccess ( simplename recipient ) simplename recipient ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename recipient ) simplename recipient ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall
candidate: Withdraws reward for user .
ref: Distributes incentives over the core team members as described in the whitepaper .

270:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename precious index to owner ) simplename precious index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

271:
src: ( functiondefinition ( simplename set ceiling strategy ) simplename set ceiling strategy ( visibility internal ) visibility internal ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename ceiling strategy ) simplename ceiling strategy ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename addr ) simplename addr ( simplename is ceiling strategy ) simplename is ceiling strategy ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ceiling strategy ) simplename ceiling strategy ( simplename addr ) simplename addr ) expressionstatement ) block ) functiondefinition
candidate: Allow to change the team multisig address in the case of emergency .
ref: Allow to ( re ) set ceiling strategy .

272:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

273:
src: ( functiondefinition ( simplename get happiness citizens ) simplename get happiness citizens ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename city id ) simplename city id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amusement count ) simplename amusement count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get count buildings ) simplename get count buildings ( simplename city id ) simplename city id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( booleanliteral true ) booleanliteral true ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename points amusement ) simplename points amusement ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename amusement count ) simplename amusement count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename population ) simplename population ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get city population ) simplename get city population ( simplename city id ) simplename city id ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amusement population ) simplename amusement population ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename population ) simplename population ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amusement population ) simplename amusement population ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename points amusement ) simplename points amusement ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( simplename population ) simplename population ) functioncall ) tupleexpression ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amusement population ) simplename amusement population ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amusement population ) simplename amusement population ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amusement population ) simplename amusement population ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( returnstatement ( tupleexpression ( simplename amusement population ) simplename amusement population ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Return the The Enable or disable all of a city .
ref: Return the <UNK> of the citizens of a city .

274:
src: ( functiondefinition ( simplename create default linglong cat ) simplename create default linglong cat ( visibility external ) visibility external ( variabledeclaration ( simplename matron id ) simplename matron id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sire id ) simplename sire id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename genes ) simplename genes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cooldown index ) simplename cooldown index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename matron id ) simplename matron id ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename matron id ) simplename matron id ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename sire id ) simplename sire id ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename sire id ) simplename sire id ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename time ) simplename time ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) simpletypeexpression ( simplename time ) simplename time ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename cooldown index ) simplename cooldown index ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( simplename cooldown index ) simplename cooldown index ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename time ) simplename time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename cooldown index ) simplename cooldown index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename cooldown index ) simplename cooldown index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename linglong cat owner ) simplename linglong cat owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename owner ) simplename owner ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename linglong cat owner ) simplename linglong cat owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral
candidate: we can create a LinglongCat and transfers it to create a new LinglongCat .
ref: we can create LinglongCats with different generations .

275:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename allowance ) simplename allowance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename allowance ) simplename allowance ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename allowance ) simplename allowance ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

276:
src: ( functiondefinition ( simplename set upgrade master ) simplename set upgrade master ( visibility external ) visibility external ( variabledeclaration ( simplename master ) simplename master ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename master ) simplename master ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename upgrade master ) simplename upgrade master ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename upgrade master ) simplename upgrade master ( simplename master ) simplename master ) expressionstatement ) block ) functiondefinition
candidate: Change the upgrade master .
ref: Set address of upgrade target contract and enable upgrade process .

277:
src: ( functiondefinition ( simplename get current rate with bonus ) simplename get current rate with bonus ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate with bonus ) simplename rate with bonus ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename mul ) simplename mul ) memberaccess ( functioncall ( simplename get bonus percentage ) simplename get bonus percentage ) functioncall ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( simplename add ) simplename add ) memberaccess ( simplename rate ) simplename rate ) functioncall ) expressionstatement ( returnstatement ( simplename rate with bonus ) simplename rate with bonus ) returnstatement ) block ) functiondefinition
candidate: Calculates the current bonus rate with bonus .
ref: Returns the amount of tokens 1 ETH equates to with the bonus percentage .

278:
src: ( functiondefinition ( simplename remove return agent ) simplename remove return agent ( visibility default ) visibility default ( variabledeclaration ( simplename agent ) simplename agent ( simpletype ( simplename return token agent ) simplename return token agent ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename return agents ) simplename return agents ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename agent ) simplename agent ) functioncall ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename manager only ) simplename manager only ) modifierinvocation ) functiondefinition
candidate: Removes a list of return agent .
ref: Removes return agent from list .

279:
src: ( functiondefinition ( simplename return rate ) simplename return rate ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename total supply ) simplename total supply ( simplename token creation min mile1 ) simplename token creation min mile1 ( block ( returnstatement ( simplename token exchange rate mile1 ) simplename token exchange rate mile1 ) returnstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename total supply ) simplename total supply ( simplename token creation min mile2 ) simplename token creation min mile2 ( block ( returnstatement ( simplename token exchange rate mile2 ) simplename token exchange rate mile2 ) returnstatement ) block ( block ( returnstatement ( simplename token exchange rate mile3 ) simplename token exchange rate mile3 ) returnstatement ) block ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Return rate of token against ether .
ref: Return rate of token against ether .

280:
src: ( functiondefinition ( simplename add animal ) simplename add animal ( visibility internal ) visibility internal ( variabledeclaration ( simplename animal type ) simplename animal type ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename n id ) simplename n id ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename num animals ) simplename num animals ( memberaccess ( simplename ids ) simplename ids ( simplename length ) simplename length ) memberaccess ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename ids ) simplename ids ( simplename num animals ) simplename num animals ) indexaccess ( simplename n id ) simplename n id ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename ids ) simplename ids ( simplename push ) simplename push ) memberaccess ( simplename n id ) simplename n id ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename animals ) simplename animals ( simplename n id ) simplename n id ) indexaccess ( functioncall ( simplename animal ) simplename animal ( simplename animal type ) simplename animal type ( indexaccess ( simplename values ) simplename values ( simplename animal type ) simplename animal type ) indexaccess ( simplename receiver ) simplename receiver ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename num animals ) simplename num animals ) expressionstatement ) block ) functiondefinition
candidate: adds a single animal of the given type .
ref: adds a single animal of the given type .

281:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename p idx addr ) simplename p idx addr ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename upper limit ) simplename upper limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename used gen ) simplename used gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ethout ) simplename ethout ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename over gen ) simplename over gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename update gen vault ) simplename update gen vault ( simplename p id ) simplename p id ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename lrnd ) simplename lrnd ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename upper limit ) simplename upper limit ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( functioncall ( simplename calceth ) simplename calceth ( memberaccess ( indexaccess ( indexaccess ( simplename plyr rnds ) simplename plyr rnds ( simplename p id ) simplename p id ) indexaccess ( simplename r id ) simplename r id ) indexaccess ( simplename keys ) simplename keys ) memberaccess ) functioncall ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ( simplename upper limit ) simplename upper limit ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename over gen ) simplename over gen ( functioncall ( memberaccess ( tupleexpression ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename upper limit ) simplename upper limit ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename
candidate: withdraws all of your earnings .
ref: withdraws all of your earnings .

282:
src: ( functiondefinition ( simplename withdraw funds ) simplename withdraw funds ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename withdraw amount ) simplename withdraw amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename withdraw amount ) simplename withdraw amount ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( simplename jackpot size ) simplename jackpot size ( simplename locked in bets ) simplename locked in bets ( simplename withdraw amount ) simplename withdraw amount ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename send funds ) simplename send funds ( simplename beneficiary ) simplename beneficiary ( simplename withdraw amount ) simplename withdraw amount ( simplename withdraw amount ) simplename withdraw amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Withdraw remaining funds .
ref: Funds withdrawal to cover costs of dice2 . win .

283:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility public ) visibility public ( variabledeclaration ( simplename contract ) simplename contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename contract ) simplename contract ) functioncall ( simplename balance ) simplename balance ) memberaccess ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename sell price ) simplename sell price ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename sender ) simplename sender ( simplename contract ) simplename contract ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename sender ) simplename sender ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename sell price ) simplename sell price ) memberaccess ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Sell amount tokens to contract .
ref: to sell the amount token .

284:
src: ( functiondefinition ( simplename set pre sale date ) simplename set pre sale date ( visibility public ) visibility public ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre sale start ) simplename pre sale start ( simplename time ) simplename time ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the pre sale start date .
ref: only for demonstrate Test Version .

285:
src: ( functiondefinition ( simplename unfreeze ) simplename unfreeze ( visibility public ) visibility public ( variabledeclaration ( simplename accounts ) simplename accounts ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase not started ) simplename phase not started ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase finished ) simplename phase finished ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename accounts ) simplename accounts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename accounts ) simplename accounts ( simplename i ) simplename i ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename accounts ) simplename accounts ( simplename i ) simplename i ) indexaccess ( simplename base wallet ) simplename base wallet ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) block ) forstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename accounts ) simplename accounts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename unfreeze ) simplename unfreeze ) memberaccess ( indexaccess ( simplename accounts ) simplename accounts ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only owner or manager ) simplename only owner or manager ) modifierinvocation ) functiondefinition
candidate: Unfreeze the amount of tokens by the owner .
ref: Unfreeze the account .

286:
src: ( functiondefinition ( simplename bulk token mint ) simplename bulk token mint ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiaries ) simplename beneficiaries ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename beneficiaries ) simplename beneficiaries ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( indexaccess ( simplename beneficiaries ) simplename beneficiaries ( simplename i ) simplename i ) indexaccess ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allocates tokens for investors in bulk .
ref: Bulk mint tokens ( same amount ) .

287:
src: ( functiondefinition ( simplename ) simplename ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: users sending ether to this contract will be used by sending funds to this contract .
ref: users sending ether to this contract will be reverted .

288:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( simplename logic ) simplename logic ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ( booleanliteral true ) booleanliteral true ( block ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Transfer tokens from other address .
ref: Transfer tokens from other address .

289:
src: ( functiondefinition ( simplename approved for ) simplename approved for ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename claimant ) simplename claimant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename narco index to approved ) simplename narco index to approved ( simplename token id ) simplename token id ) indexaccess ( simplename claimant ) simplename claimant ) returnstatement ) block ) functiondefinition
candidate: Checks if a given address currently has transferApproval for a particular token .
ref: Checks if a given address currently has transferApproval for a particular narco .

290:
src: ( functiondefinition ( simplename add address to account ) simplename add address to account ( visibility external ) visibility external ( variabledeclaration ( simplename new address ) simplename new address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename address belongs to account ) simplename address belongs to account ( simplename new address ) simplename new address ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename account by address ) simplename account by address ( simplename new address ) simplename new address ) indexaccess ( functioncall ( simplename account id for address ) simplename account id for address ( simplename sender ) simplename sender ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only account registry logic ) simplename only account registry logic ) modifierinvocation ( modifierinvocation ( simplename non zero ) simplename non zero ( simplename new address ) simplename new address ) modifierinvocation ) functiondefinition
candidate: Adds an account to the owner's account to the start account .
ref: Add an address to an existing id .

291:
src: ( functiondefinition ( simplename finish minting ) simplename finish minting ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minting finished ) simplename minting finished ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename finish ico ) simplename finish ico ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename mint finished ) simplename mint finished ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to stop minting new tokens .
ref: Function to stop minting new tokens .

292:
src: ( modifierdefinition ( simplename job exists ) simplename job exists ( variabledeclaration ( simplename job id ) simplename job id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename job id ) simplename job id ( simplename num jobs ) simplename num jobs ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the unique identifier exists .
ref: Check if job exists .

293:
src: ( functiondefinition ( simplename deploy consortium ) simplename deploy consortium ( visibility public ) visibility public ( variabledeclaration ( simplename consortium ) simplename consortium ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename consortium placeholder ) simplename consortium placeholder ( simplename change controller ) simplename change controller ) memberaccess ( simplename consortium ) simplename consortium ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only finalized sale ) simplename only finalized sale ) modifierinvocation ( modifierinvocation ( simplename non zero address ) simplename non zero address ( simplename consortium ) simplename consortium ) modifierinvocation ( modifierinvocation ( simplename only ) simplename only ( simplename operations ) simplename operations ) modifierinvocation ) functiondefinition
candidate: Set the marriage contract .
ref: Deploy Artcoin <UNK> contract .

294:
src: ( functiondefinition ( simplename order eth of ) simplename order eth of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename customer ) simplename customer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( indexaccess ( simplename orders ) simplename orders ( simplename customer ) simplename customer ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get the order id of the we are still owned by a specific address .
ref: Get the order's balance of ETH for account customer .

295:
src: ( functiondefinition ( simplename add vesting grant ) simplename add vesting grant ( visibility internal ) visibility internal ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename time to cliff ) simplename time to cliff ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename vesting duration ) simplename vesting duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename vesting holders ) simplename vesting holders ( simplename receiver ) simplename receiver ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename holder ) simplename holder ( simpletype ( simplename token vesting ) simplename token vesting ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename token vesting ) simplename token vesting ) simpletype ( simplename receiver ) simplename receiver ( simplename grants start timestamp ) simplename grants start timestamp ( simplename time to cliff ) simplename time to cliff ( simplename vesting duration ) simplename vesting duration ( booleanliteral true ) booleanliteral true ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename vesting holders ) simplename vesting holders ( simplename receiver ) simplename receiver ) indexaccess ( simplename holder ) simplename holder ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename holder ) simplename holder ( simplename transfer ownership ) simplename transfer ownership ) memberaccess ( simplename bank multisig ) simplename bank multisig ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename holder ) simplename holder ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Add a vesting with vesting schedule , will be used to a default vesting schedule .
ref: Add a grant for tokens with a vesting schedule .

296:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename custom fallback ) simplename custom fallback ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename value ) simplename value ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( functioncall ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) functioncall ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename to ) simplename to ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) simpletypeexpression ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename custom fallback ) simplename custom fallback ) functioncall ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( functioncall ( simplename transfer to address ) simplename transfer to address ( simplename to ) simplename to ( simplename value ) simplename value
candidate: Function that is called when a user or another contract wants to transfer funds .
ref: Function that is called when a user or another contract wants to transfer funds .

297:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility external ) visibility external ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only logic contract ) simplename only logic contract ) modifierinvocation ) functiondefinition
candidate: Mint token function .
ref: External function to mint a new token .

298:
src: ( functiondefinition ( simplename freeze ) simplename freeze ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens are frozen ) simplename tokens are frozen ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename frosted ) simplename frosted ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to freeze the token transfers .
ref: Function to enable token transfers .

299:
src: ( functiondefinition ( simplename get ubet check ) simplename get ubet check ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename account number ) simplename account number ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename routing number ) simplename routing number ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename institution ) simplename institution ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename full name ) simplename full name ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename amount ) simplename amount ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename check file path ) simplename check file path ) memberaccess ( memberaccess ( indexaccess ( simplename ubet checks ) simplename ubet checks ( simplename address ) simplename address ) indexaccess ( simplename digital check finger print ) simplename digital check finger print ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Return information about registered by specific state .
ref: Return UBetCheck information by supplying beneficiary adddress .

300:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename is running ) simplename is running ) modifierinvocation ) functiondefinition
candidate: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .

301:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( simplename approve ) simplename approve ( simplename spender ) simplename spender ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Allows _spender to withdraw from your account , multiple times , up to the _value amount .
ref: Sets approval spender to transfer ownership of token .

302:
src: ( functiondefinition ( simplename token bankroll buy in ) simplename token bankroll buy in ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token bankroll buy in ) simplename token bankroll buy in ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is an owner ) simplename is an owner ) modifierinvocation ) functiondefinition
candidate: Administrative function to get the Zethr bankroll contract , should the need arise .
ref: Actually buy in IF this is necessary ( can be manually called after <UNK> if necessary ) .

303:
src: ( functiondefinition ( simplename add presale holder ) simplename add presale holder ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename privilege address ) simplename privilege address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename presale holder ) simplename presale holder ( simplename beneficiary ) simplename beneficiary ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename presale holder unlock date ) simplename presale holder unlock date ( simplename beneficiary ) simplename beneficiary ) indexaccess ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: Add tokens for presale .
ref: Presale Holders methods : set , remove , is .

304:
src: ( functiondefinition ( simplename check withdrawal amount ) simplename check withdrawal amount ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename interest ) simplename interest ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( simplename is start ) simplename is start ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename block height start ) simplename block height start ( indexaccess ( simplename deposit blockheight ) simplename deposit blockheight ( simplename owner ) simplename owner ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename interest ) simplename interest ( tupleexpression ( tupleexpression ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename account balance ) simplename account balance ( simplename owner ) simplename owner ) indexaccess ( tupleexpression ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename block height start ) simplename block height start ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename interest ) simplename interest ( tupleexpression ( tupleexpression ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename account balance ) simplename account balance ( simplename owner ) simplename owner ) indexaccess ( tupleexpression ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( indexaccess ( simplename deposit blockheight ) simplename deposit blockheight ( simplename owner ) simplename owner ) indexaccess ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ) expressionstatement ) block ) ifstatement ( returnstatement ( tupleexpression ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename account balance ) simplename account balance ( simplename owner ) simplename owner ) indexaccess ( simplename interest ) simplename interest ) tupleexpression ) returnstatement ) block ( block ( returnstatement ( indexaccess ( simplename account balance ) simplename account balance ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Function to check the amount of funds to be collected by the contract .
ref: Check interest due + balance .

305:
src: ( functiondefinition ( simplename set max buy limit ) simplename set max buy limit ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wallet owner ) simplename wallet owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max buy limit ) simplename max buy limit ( binaryoperation * ) binaryoperation * ( simplename <UNK> ) simplename <UNK> ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: Set max rate of tokens per wei .
ref: function to set the max buy limit in 1 transaction can only be called from owner wallet .

306:
src: ( functiondefinition ( simplename is finalizer sane ) simplename is finalizer sane ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename sane ) simplename sane ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename finalize agent ) simplename finalize agent ( simplename is sane ) simplename is sane ) memberaccess ( simplename token ) simplename token ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Check if the contract relationship looks good .
ref: Check if the contract relationship looks good .

307:
src: ( functiondefinition ( simplename get current game ) simplename get current game ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename state ) simplename state ) simpletype ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename bool ) simplename bool ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename remaining tickets ) simplename remaining tickets ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( memberaccess ( simplename game ) simplename game ( simplename rules ) simplename rules ) memberaccess ( simplename slots ) simplename slots ) memberaccess ( memberaccess ( simplename game ) simplename game ( simplename tickets sold ) simplename tickets sold ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename tickets ) simplename tickets ( array ( simpletype ( simplename bool ) simplename bool ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename bool ) simplename bool ) simpletype ) array ( memberaccess ( memberaccess ( simplename game ) simplename game ( simplename rules ) simplename rules ) memberaccess ( simplename slots ) simplename slots ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename user tickets ) simplename user tickets ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( functioncall ( simplename get my tickets ) simplename get my tickets ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( memberaccess ( simplename game ) simplename game ( simplename rules ) simplename rules ) memberaccess ( simplename slots ) simplename slots ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename tickets ) simplename tickets ( simplename i ) simplename i ) indexaccess ( binaryoperation == ) binaryoperation == ( indexaccess ( memberaccess ( simplename game ) simplename game ( simplename tickets ) simplename tickets ) memberaccess ( binaryoperation + ) binaryoperation + ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) forstatement ( returnstatement ( tupleexpression ( memberaccess ( simplename game ) simplename game ( simplename id ) simplename id ) memberaccess
candidate: Return current game state .
ref: Get information pertaining to the current game .

308:
src: ( functiondefinition ( simplename div ) simplename div ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename int256 min ) simplename int256 min ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) simpletypeexpression ( tupleexpression ( binaryoperation << ) binaryoperation << ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation || ) binaryoperation || ( binaryoperation != ) binaryoperation != ( simplename a ) simplename a ( simplename int256 min ) simplename int256 min ( binaryoperation != ) binaryoperation != ( simplename b ) simplename b ( unaryoperation - ) unaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( returnstatement ( binaryoperation / ) binaryoperation / ( simplename a ) simplename a ( simplename b ) simplename b ) returnstatement ) block ) functiondefinition
candidate: Integer division of two numbers , truncating the quotient .
ref: Integer division of two signed integers , truncating the quotient .

309:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint112 ) simplename uint112 ) simpletype ) simpletypeexpression ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ( simplename to uint112 ) simplename to uint112 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sold token ) simplename sold token ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( simplename sold token ) simplename sold token ) functioncall ( simplename to uint112 ) simplename to uint112 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Transfer the balance from owner's account to another account .
ref: Transfer the balance from owner's account to another account .

310:
src: ( functiondefinition ( simplename get cards details ) simplename get cards details ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) array ( block ( returnstatement ( simplename card details list ) simplename card details list ) returnstatement ) block ) functiondefinition
candidate: Return card details .
ref: Return cardDetailsList array .

311:
src: ( functiondefinition ( simplename size of ) simplename size of ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( simpletype ( simplename cll ) simplename cll ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename step ) simplename step ( simplename self ) simplename self ( simplename head ) simplename head ( simplename next ) simplename next ) functioncall ) variabledeclarationstatement ( whilestatement ( binaryoperation != ) binaryoperation != ( simplename i ) simplename i ( simplename head ) simplename head ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( functioncall ( simplename step ) simplename step ( simplename self ) simplename self ( simplename i ) simplename i ( simplename next ) simplename next ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename r ) simplename r ) expressionstatement ) block ) whilestatement ( returnstatement ) returnstatement ) block ) functiondefinition
candidate: Returns the number of elements in the list .
ref: Returns the number of elements in the list .

312:
src: ( functiondefinition ( simplename add many to whitelist ) simplename add many to whitelist ( visibility external ) visibility external ( variabledeclaration ( simplename whitelist addresses ) simplename whitelist addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename whitelist addresses ) simplename whitelist addresses ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( indexaccess ( simplename whitelist addresses ) simplename whitelist addresses ( simplename i ) simplename i ) indexaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Adds single address to whitelist .
ref: Adds list of addresses to whitelist .

313:
src: ( functiondefinition ( simplename unpause ) simplename unpause ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename unpause ) simplename unpause ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ( modifierinvocation ( simplename when paused ) simplename when paused ) modifierinvocation ) functiondefinition
candidate: This is public rather than external so we can call super . unpause .
ref: This is public rather than external so we can call super . unpause .

314:
src: ( functiondefinition ( simplename wolk genesis ) simplename wolk genesis ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename start block ) simplename start block ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename end block ) simplename end block ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wolk wallet ) simplename wolk wallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename total tokens ) simplename total tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename settlers ) simplename settlers ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) tupleexpression ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename end block ) simplename end block ( simplename start block ) simplename start block ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename start block ) simplename start block ( simplename start block ) simplename start block ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename end block ) simplename end block ( simplename end block ) simplename end block ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename multisig wallet ) simplename multisig wallet ( simplename wolk wallet ) simplename wolk wallet ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename settlers ) simplename settlers ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Return ETH address of a specific ETH with refund .
ref: Wolk Genesis Event only accessible by Contract Owner .

315:
src: ( functiondefinition ( simplename status ) simplename status ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename state ) simplename state ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename <UNK> ) simplename <UNK> ) simpletype ) variabledeclaration ( indexaccess ( simplename exposures ) simplename exposures ( simplename id ) simplename id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename state ) simplename state ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename state ) simplename state ) memberaccess ( memberaccess ( simplename state ) simplename state ( simplename collected ) simplename collected ) memberaccess ( functioncall ( simplename has passed ) simplename has passed ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename closing time ) simplename closing time ) memberaccess ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( memberaccess ( simplename state ) simplename state ( simplename closing ) simplename closing ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: The getter to find the state of a certain state .
ref: Public constant functions .

316:
src: ( functiondefinition ( simplename <UNK> ) simplename <UNK> ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename relocation active ) simplename relocation active ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new stt ) simplename new stt ( simpletype ( simplename relocation token ) simplename relocation token ) simpletype ) variabledeclaration ( functioncall ( simplename relocation token ) simplename relocation token ( simplename new token contract address ) simplename new token contract address ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename new stt ) simplename new stt ( simplename recieve relocation ) simplename recieve relocation ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename balance ) simplename balance ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: make sure that the contract is deployed .
ref: Perform an atomic swap between two token contracts .

317:
src: ( functiondefinition ( simplename power up contract ) simplename power up contract ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename sales active ) simplename sales active ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ( simplename crowd sale hard cap ) simplename crowd sale hard cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename no of tiers ) simplename no of tiers ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename tiers ) simplename tiers ( simplename length ) simplename length ) memberaccess ( simplename no of tiers ) simplename no of tiers ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sales active ) simplename sales active ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: When sale is currently running , not enough tokens , before the contract is locked .
ref: Check if sale contract has enough tokens on its account balance to reward all possible participations within sale period .

318:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only valid destination ) simplename only valid destination ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename can transfer ) simplename can transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) modifierinvocation ) functiondefinition
candidate: Transfer token from sender to recipient .
ref: override function using canTransfer on the sender address .

319:
src: ( functiondefinition ( simplename whitelist address ) simplename whitelist address ( visibility external ) visibility external ( variabledeclaration ( simplename address to whitelist ) simplename address to whitelist ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cap amount ) simplename cap amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename whitelisted addresses ) simplename whitelisted addresses ( simplename address to whitelist ) simplename address to whitelist ) indexaccess ( simplename bona fide ) simplename bona fide ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename whitelisted addresses ) simplename whitelisted addresses ( simplename address to whitelist ) simplename address to whitelist ) indexaccess ( simplename bona fide ) simplename bona fide ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename whitelisted addresses ) simplename whitelisted addresses ( simplename address to whitelist ) simplename address to whitelist ) indexaccess ( simplename cap for amount raised ) simplename cap for amount raised ) memberaccess ( simplename cap amount ) simplename cap amount ) expressionstatement ) block ( modifierinvocation ( simplename owner exists ) simplename owner exists ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) modifierinvocation ) functiondefinition
candidate: Add address to the whitelist .
ref: Add whitelisted address to the presale .

320:
src: ( functiondefinition ( simplename fund ) simplename fund ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename discounted price ) simplename discounted price ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename investment ) simplename investment ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( simplename token count ) simplename token count ( simplename discounted price ) simplename discounted price ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename investment ) simplename investment ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename investment ) simplename investment ) functioncall ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename ico balance ) simplename ico balance ( simplename investment ) simplename investment ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename investments ) simplename investments ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename investment ) simplename investment ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename multisig ) simplename multisig ( simplename send ) simplename send ) memberaccess ( simplename investment ) simplename investment ) functioncall ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename humaniq token ) simplename humaniq token ( simplename issue tokens ) simplename issue tokens ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename token count ) simplename token count ) functioncall ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( returnstatement ( simplename token count ) simplename token count ) returnstatement ) block ( modifierinvocation ( simplename apply bonus ) simplename apply bonus ) modifierinvocation ( modifierinvocation ( simplename ico active ) simplename ico active ) modifierinvocation ( modifierinvocation ( simplename min investment ) simplename min investment ) modifierinvocation ) functiondefinition
candidate: Allows investors to create tokens by investors .
ref: Allows user to create tokens if token creation is still going and cap was not reached .

321:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename finalize type ) simplename finalize type ( stringliteral 「STR」 ) stringliteral 「STR」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename allocation addresses types ) simplename allocation addresses types ) memberaccess ( simplename finalize transfer address type ) simplename finalize transfer address type ) functioncall ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename finalize type ) simplename finalize type ( stringliteral 「STR」 ) stringliteral 「STR」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename burn ) simplename burn ) memberaccess ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ) block ) ifstatement ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename unlock all allocation addresses ) simplename unlock all allocation addresses ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename remove ownership ) simplename remove ownership ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is finalized ) simplename is finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename finalized ) simplename finalized ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Finalize the crowdsale .
ref: Finalizes the ability to use the controller and <UNK> it .

322:
src: ( functiondefinition ( simplename set implementation ) simplename set implementation ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename version ) simplename version ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new exec id ) simplename new exec id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename app name ) simplename app name ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename provider ) simplename provider ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename registry id ) simplename registry id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename index ) simplename index ( functioncall ( simplename get index ) simplename get index ( simplename registry id ) simplename registry id ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename index ) simplename index ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation != ) binaryoperation != ( simplename index ) simplename index ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename version ) simplename version ( functioncall ( memberaccess ( functioncall ( simplename registry interface ) simplename registry interface ( simplename index ) simplename index ) functioncall ( simplename get latest version ) simplename get latest version ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename registry id ) simplename registry id ( simplename provider ) simplename provider ( simplename app name ) simplename app name ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename version ) simplename version ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename selectors ) simplename selectors ( array ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) array ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename implementations ) simplename implementations ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename index ) simplename index ( simplename selectors ) simplename selectors ( simplename implementations ) simplename implementations ) tupleexpression ( functioncall ( memberaccess ( functioncall ( simplename registry interface ) simplename registry interface ( simplename index ) simplename index ) functioncall ( simplename get version implementation ) simplename get version implementation ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename registry id ) simplename
candidate: Sets a new implementation .
ref: Reads application information from the script registry , and sets up permissions for the new instance's various functions .

323:
src: ( functiondefinition ( simplename releasable amount ) simplename releasable amount ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 basic ) simplename erc20 basic ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( simplename vested amount ) simplename vested amount ( simplename token ) simplename token ) functioncall ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename released ) simplename released ( simplename token ) simplename token ) indexaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculates the amount that has already vested but hasn't been released yet .
ref: Calculates the amount that has already vested but hasn't been released yet .

324:
src: ( functiondefinition ( simplename emergency withdraw parsecs ) simplename emergency withdraw parsecs ( visibility external ) visibility external ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( functioncall ( memberaccess ( simplename parsec token ) simplename parsec token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename parsec token ) simplename parsec token ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner or multisig ) simplename only owner or multisig ) modifierinvocation ) functiondefinition
candidate: Owner can withdraw ethers if token is required after contract period has ended .
ref: Contract owner or Multisig can withdraw Parsecs anytime in case of emergency .

325:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get balance of plain address .
ref: Get balance of ident .

326:
src: ( functiondefinition ( simplename set voting winner ) simplename set voting winner ( visibility public ) visibility public ( variabledeclaration ( simplename voting address ) simplename voting address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename votings winners ) simplename votings winners ( simplename voting address ) simplename voting address ) indexaccess ( unaryoperation - ) unaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename winner idx ) simplename winner idx ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename winner ) simplename winner ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename winner weight ) simplename winner weight ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename winner idx ) simplename winner idx ( simplename winner ) simplename winner ( simplename winner weight ) simplename winner weight ) tupleexpression ( functioncall ( memberaccess ( functioncall ( simplename ukttoken voting ) simplename ukttoken voting ( simplename voting address ) simplename voting address ) functioncall ( simplename get winner ) simplename get winner ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is finalized <UNK> ) simplename is finalized <UNK> ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation > ) binaryoperation > ( simplename winner idx ) simplename winner idx ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename ukttoken voting ) simplename ukttoken voting ( simplename voting address ) simplename voting address ) functioncall ( simplename finalize ) simplename finalize ) memberaccess ( simplename is finalized <UNK> ) simplename is finalized <UNK> ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename voting finalized ) simplename voting finalized ( simplename voting address ) simplename voting address ( simplename is finalized <UNK> ) simplename is finalized <UNK> ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename votings winners ) simplename votings winners ( simplename voting address ) simplename voting address ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) simpletypeexpression ( simplename winner idx ) simplename winner idx ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename winner setted ) simplename winner setted ( simplename voting address ) simplename voting address ( simplename winner idx ) simplename winner idx ( simplename winner ) simplename winner ( simplename winner weight ) simplename winner weight ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Manually set voting on proposed Lottery Contract address .
ref: Sets calculated <UNK> as voting winner .

327:
src: ( functiondefinition ( simplename allocate tokens ) simplename allocate tokens ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is finalized ) simplename is finalized ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename div ) simplename div ) memberaccess ( simplename rate ) simplename rate ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token purchase ) simplename token purchase ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allocates the tokens to the beneficiary address .
ref: immediately mint _amount tokens to the _beneficiary .

328:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename can tradable ) simplename can tradable ) modifierinvocation ( modifierinvocation ( simplename is active ) simplename is active ) modifierinvocation ) functiondefinition
candidate: send value token to to from from .
ref: send value token to to from from .

329:
src: ( functiondefinition ( simplename window of ) simplename window of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename timestamp ) simplename timestamp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( conditional ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename start timestamp ) simplename start timestamp ( simplename timestamp ) simplename timestamp ) tupleexpression ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename timestamp ) simplename timestamp ( simplename sub ) simplename sub ) memberaccess ( simplename start timestamp ) simplename start timestamp ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename window length ) simplename window length ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) returnstatement ) block ) functiondefinition
candidate: Total amount of window in credit to be pulled , called by window .
ref: Return the window number for given timestamp .

330:
src: ( functiondefinition ( simplename add new token to ) simplename add new token to ( visibility internal ) visibility internal ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename add new token to ) simplename add new token to ) memberaccess ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename to ) simplename to ) indexaccess ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename length ) simplename length ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename length ) simplename length ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename owned tokens ) simplename owned tokens ( simplename to ) simplename to ) indexaccess ( simplename push ) simplename push ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) simpletypeexpression ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owned tokens index ) simplename owned tokens index ( simplename push ) simplename push ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename length ) simplename length ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal function to add a token ID to the list of a given address .
ref: have to have in order to use array rather than mapping .

331:
src: ( functiondefinition ( simplename issue ) simplename issue ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename join ) simplename join ( simplename addr ) simplename addr ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename holder ) simplename holder ( simpletype ( simplename holder ) simplename holder ) simpletype ) variabledeclaration ( indexaccess ( simplename holders ) simplename holders ( simplename addr ) simplename addr ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename holder ) simplename holder ( simplename offer amount ) simplename offer amount ) memberaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename holder ) simplename holder ( simplename offer expiry ) simplename offer expiry ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) simpletypeexpression ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename issue offer ) simplename issue offer ( simplename addr ) simplename addr ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename can enter ) simplename can enter ) modifierinvocation ( modifierinvocation ( simplename only trustee ) simplename only trustee ) modifierinvocation ) functiondefinition
candidate: Issue a new amount of tokens .
ref: For the trustee to issue an offer of new tokens to a holder .

332:
src: ( functiondefinition ( simplename destruct ) simplename destruct ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( memberaccess ( simplename admin ) simplename admin ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is alive ) simplename is alive ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: allow the owner to delete contract .
ref: <UNK> destruct contract .

333:
src: ( functiondefinition ( simplename check available tokens ) simplename check available tokens ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename buyers ) simplename buyers ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename available tokens ) simplename available tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename step1 ) simplename step1 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename available tokens ) simplename available tokens ( functioncall ( memberaccess ( simplename available tokens ) simplename available tokens ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename allocations1 ) simplename allocations1 ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename step2 ) simplename step2 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename available tokens ) simplename available tokens ( functioncall ( memberaccess ( simplename available tokens ) simplename available tokens ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename allocations2 ) simplename allocations2 ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename step3 ) simplename step3 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename available tokens ) simplename available tokens ( functioncall ( memberaccess ( simplename available tokens ) simplename available tokens ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename allocations3 ) simplename allocations3 ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename available tokens ) simplename available tokens ) returnstatement ) block ) functiondefinition
candidate: Check that a specific address has available tokens .
ref: Return address available allocation .

334:
src: ( functiondefinition ( simplename mint for everybody ) simplename mint for everybody ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename all token amount ) simplename all token amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename project amount ) simplename project amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename all token amount ) simplename all token amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename project amount ) simplename project amount ( functioncall ( memberaccess ( simplename project amount ) simplename project amount ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename all token amount ) simplename all token amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( simplename wallet ) simplename wallet ( simplename project amount ) simplename project amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens minted ) simplename tokens minted ( functioncall ( memberaccess ( simplename all token amount ) simplename all token amount ( simplename add ) simplename add ) memberaccess ( simplename project amount ) simplename project amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token minted ) simplename token minted ( simplename tokens minted ) simplename tokens minted ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to send tokens to the crowdsale to the mint .
ref: Load funds to the crowdsale for all investors .

335:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename ico tokens ) simplename ico tokens ( simplename add ) simplename add ) memberaccess ( simplename platform tokens ) simplename platform tokens ) functioncall ( simplename add ) simplename add ) memberaccess ( simplename company tokens ) simplename company tokens ) functioncall ( simplename add ) simplename add ) memberaccess ( simplename partner tokens ) simplename partner tokens ) functioncall ( simplename add ) simplename add ) memberaccess ( simplename foundation tokens ) simplename foundation tokens ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( memberaccess ( simplename total ) simplename total ( simplename mul ) simplename mul ) memberaccess ( simplename jiffys multiplier ) simplename jiffys multiplier ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the total number of tokens owned by a specific address .
ref: Total supply of tokens .

336:
src: ( functiondefinition ( simplename is contract ) simplename is contract ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename is contract ) simplename is contract ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename length ) simplename length ( assemblycall ( simplename extcodesize ) simplename extcodesize ( simplename addr ) simplename addr ) assemblycall ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( returnstatement ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: assemble the given address bytecode .
ref: assemble the given address bytecode .

337:
src: ( functiondefinition ( simplename extend closing time ) simplename extend closing time ( visibility public ) visibility public ( variabledeclaration ( simplename extend to time ) simplename extend to time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename closing time ) simplename closing time ( simplename extend to time ) simplename extend to time ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename only while open ) simplename only while open ) modifierinvocation ) functiondefinition
candidate: extend time during crowdsale .
ref: extend closing time to a future time .

338:
src: ( functiondefinition ( simplename transfer domain ownership ) simplename transfer domain ownership ( visibility public ) visibility public ( variabledeclaration ( simplename node ) simplename node ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename registry ) simplename registry ( simplename set owner ) simplename set owner ) memberaccess ( simplename node ) simplename node ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The ownership of a domain owned by the contract owner .
ref: The contract owner can take away the ownership of any top level domain owned by this contract .

339:
src: ( functiondefinition ( simplename ico denominator price ) simplename ico denominator price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ico duration ) simplename ico duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe sub ) simplename safe sub ( simplename now ) simplename now ( simplename funding start time ) simplename funding start time ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename denominator ) simplename denominator ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename ico duration ) simplename ico duration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename denominator ) simplename denominator ( binaryoperation / ) binaryoperation / ( functioncall ( simplename safe mul ) simplename safe mul ( memberaccess ( simplename current price ) simplename current price ( simplename denominator ) simplename denominator ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( returnstatement ( simplename denominator ) simplename denominator ) returnstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename ico duration ) simplename ico duration ( simplename offer time ) simplename offer time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename denominator ) simplename denominator ( binaryoperation / ) binaryoperation / ( functioncall ( simplename safe mul ) simplename safe mul ( memberaccess ( simplename current price ) simplename current price ( simplename denominator ) simplename denominator ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( returnstatement ( simplename denominator ) simplename denominator ) returnstatement ) block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename funding end time ) simplename funding end time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename denominator ) simplename denominator ( binaryoperation / ) binaryoperation / ( functioncall ( simplename safe mul ) simplename safe mul ( memberaccess ( simplename current price ) simplename current price ( simplename denominator ) simplename denominator ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( returnstatement ( simplename denominator ) simplename denominator ) returnstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename denominator ) simplename denominator ( binaryoperation / ) binaryoperation / ( functioncall ( simplename safe mul ) simplename safe mul ( memberaccess ( simplename current price ) simplename current price ( simplename denominator ) simplename denominator ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( returnstatement ( simplename denominator ) simplename denominator ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Calculates the price .
ref: time based on blocknumbers , assuming a blocktime of <UNK> .

340:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename batmodatasets event returns ) simplename batmodatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename batmodatasets event returns ) simplename batmodatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dev ) simplename dev ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename pot ) simplename pot ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename obok ) simplename obok ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename obok ) simplename obok ) memberaccess ) functioncall ) tupleexpression ( numberliteral
candidate: ends the round .
ref: ends the round .

341:
src: ( functiondefinition ( simplename exchanger callback ) simplename exchanger callback ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename target contract ) simplename target contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename exchanger ) simplename exchanger ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename target contract ) simplename target contract ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( indexaccess ( simplename balances ) simplename balances ( simplename exchanger ) simplename exchanger ) indexaccess ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename exchanger ) simplename exchanger ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename exchanger ) simplename exchanger ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename exchanged with ) simplename exchanged with ( simplename target contract ) simplename target contract ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename exchanged with ) simplename exchanged with ( simplename target contract ) simplename target contract ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename exchanged by ) simplename exchanged by ( simplename exchanger ) simplename exchanger ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename exchanged by ) simplename exchanged by ( simplename exchanger ) simplename exchanger ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when configured ) simplename when configured ) modifierinvocation ( modifierinvocation ( simplename only exchange ) simplename only exchange ) modifierinvocation ) functiondefinition
candidate: Public Funds Manipulation - withdraw base tokens ( as a transfer ) .
ref: send amount of this token to exchange .

342:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename frozen account ) simplename frozen account ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename frozen account ) simplename frozen account ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balances ) simplename previous balances ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename previous balances ) simplename previous balances ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

343:
src: ( functiondefinition ( simplename add reserve ) simplename add reserve ( visibility default ) visibility default ( variabledeclaration ( simplename reserve ) simplename reserve ( simpletype ( simplename kyber reserve ) simplename kyber reserve ) simpletype ) variabledeclaration ( variabledeclaration ( simplename add ) simplename add ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin ) simplename admin ( block ( expressionstatement ( functioncall ( simplename error report ) simplename error report ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( ifstatement ( simplename add ) simplename add ( block ( expressionstatement ( functioncall ( memberaccess ( simplename reserves ) simplename reserves ( simplename push ) simplename push ) memberaccess ( simplename reserve ) simplename reserve ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename add reserve ) simplename add reserve ( simplename reserve ) simplename reserve ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ) block ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename reserves ) simplename reserves ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename reserves ) simplename reserves ( simplename i ) simplename i ) indexaccess ( simplename reserve ) simplename reserve ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename reserves ) simplename reserves ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename reserves ) simplename reserves ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename reserves ) simplename reserves ( unaryoperation -- ) unaryoperation -- ( memberaccess ( simplename reserves ) simplename reserves ( simplename length ) simplename length ) memberaccess ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename add reserve ) simplename add reserve ( simplename reserve ) simplename reserve ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( breakstatement break ) breakstatement break ) block ) ifstatement ) block ) forstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename error report ) simplename error report ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: can be called only by admin .
ref: can be called only by admin .

344:
src: ( functiondefinition ( simplename parse json array and get first element as number ) simplename parse json array and get first element as number ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename json ) simplename json ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename json slice ) simplename json slice ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename json ) simplename json ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename first result ) simplename first result ( simpletype ( simplename strings slice ) simplename strings slice ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename json slice ) simplename json slice ( simplename split ) simplename split ) memberaccess ( functioncall ( memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ( simplename first result ) simplename first result ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ts ) simplename ts ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename first result ) simplename first result ( simplename beyond ) simplename beyond ) memberaccess ( functioncall ( memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) functioncall ( simplename to string ) simplename to string ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename parse int ) simplename parse int ( simplename ts ) simplename ts ) functioncall ) returnstatement ) block ) functiondefinition
candidate: This method is useful when we need to know last transaction data about array or not .
ref: This method is useful when we really need to know last transaction ts .

345:
src: ( functiondefinition ( simplename string ends with ) simplename string ends with ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename a ) simplename a ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename a ) simplename a ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename b ) simplename b ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename b ) simplename b ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename a ) simplename a ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length diff ) simplename length diff ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename a ) simplename a ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename b ) simplename b ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename a ) simplename a ( binaryoperation + ) binaryoperation + ( simplename i ) simplename i ( simplename length diff ) simplename length diff ) indexaccess ( indexaccess ( simplename b ) simplename b ( simplename i ) simplename i ) indexaccess ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) forstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Returns the slice with the same id .
ref: returns true if string _a ends with string _b .

346:
src: ( functiondefinition ( simplename buy xid ) simplename buy xid ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename aff code ) simplename aff code ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename j3 ddatasets event returns ) simplename j3 ddatasets event returns ) simpletype ) variabledeclaration ( functioncall ( simplename determine pid ) simplename determine pid ( simplename event data ) simplename event data ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename p idx addr ) simplename p idx addr ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename aff code ) simplename aff code ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( simplename aff code ) simplename aff code ( simplename p id ) simplename p id ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename aff code ) simplename aff code ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename laff ) simplename laff ) memberaccess ) expressionstatement ) block ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename aff code ) simplename aff code ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename laff ) simplename laff ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename laff ) simplename laff ) memberaccess ( simplename aff code ) simplename aff code ) expressionstatement ) block ) ifstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename team ) simplename team ( functioncall ( simplename verify team ) simplename verify team ( simplename team ) simplename team ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename buy core ) simplename buy core ( simplename p id ) simplename p id ( simplename aff code ) simplename aff code ( simplename team ) simplename team ( simplename event data ) simplename event data ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is activated ) simplename is activated ) modifierinvocation ( modifierinvocation ( simplename is human ) simplename is human ) modifierinvocation ( modifierinvocation ( simplename is within limits ) simplename is within limits ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) modifierinvocation ( modifierinvocation ( simplename is gas limit ) simplename is gas limit ) modifierinvocation ) functiondefinition
candidate: converts all incoming ethereum to keys .
ref: converts all incoming ethereum to keys .

347:
src: ( functiondefinition ( simplename get winner details ) simplename get winner details ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename winner id ) simplename winner id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( indexaccess ( simplename winners ) simplename winners ( simplename winner id ) simplename winner id ) indexaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Return the winner of a new winner .
ref: This function will return only the winner's hero id .

348:
src: ( functiondefinition ( simplename icosale type ) simplename icosale type ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( conditional ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename ico ) simplename ico ( memberaccess ( simplename icotype ) simplename icotype ( simplename pre sale ) simplename pre sale ) memberaccess ) tupleexpression ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) conditional ) returnstatement ) block ) functiondefinition
candidate: Returns the name of the current round in plain text .
ref: Returns the name of the current round in plain text .

349:
src: ( functiondefinition ( simplename signature is valid ) simplename signature is valid ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename signer ) simplename signer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename order hash ) simplename order hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename recovered addr ) simplename recovered addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename ecrecover ) simplename ecrecover ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename order hash ) simplename order hash ) functioncall ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ) variabledeclarationstatement ( returnstatement ( binaryoperation == ) binaryoperation == ( simplename recovered addr ) simplename recovered addr ( simplename signer ) simplename signer ) returnstatement ) block ) functiondefinition
candidate: Verifies that an order signature is valid .
ref: On chain verification of an ECDSA ethereum signature .

350:
src: ( modifierdefinition ( simplename only minter ) simplename only minter ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename minters ) simplename minters ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the minter .
ref: Throws if called by any account other than the minter .

351:
src: ( functiondefinition ( simplename set token addresses ) simplename set token addresses ( visibility public ) visibility public ( variabledeclaration ( simplename spec uwallet ) simplename spec uwallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename spec dwallet ) simplename spec dwallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename token addresses set ) simplename token addresses set ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename spec dwallet ) simplename spec dwallet ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename spec uwallet ) simplename spec uwallet ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is contract ) simplename is contract ( simplename spec dwallet ) simplename spec dwallet ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is contract ) simplename is contract ( simplename spec uwallet ) simplename spec uwallet ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename spec uwallet ) simplename spec uwallet ( simplename spec uwallet ) simplename spec uwallet ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename spec dwallet ) simplename spec dwallet ( simplename spec dwallet ) simplename spec dwallet ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token addresses set ) simplename token addresses set ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( simplename configured ) simplename configured ( block ( expressionstatement ( functioncall ( simplename unpause ) simplename unpause ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to set a token contract owner .
ref: Function to configure contract addresses .

352:
src: ( functiondefinition ( simplename lock ) simplename lock ( visibility internal ) visibility internal ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename locked at ) simplename locked at ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename time locks ) simplename time locks ( simplename team reserve wallet ) simplename team reserve wallet ) indexaccess ( functioncall ( memberaccess ( simplename locked at ) simplename locked at ( simplename add ) simplename add ) memberaccess ( simplename team time lock ) simplename team time lock ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename time locks ) simplename time locks ( simplename final reserve wallet ) simplename final reserve wallet ) indexaccess ( functioncall ( memberaccess ( simplename locked at ) simplename locked at ( simplename add ) simplename add ) memberaccess ( simplename final reserve time lock ) simplename final reserve time lock ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename locked ) simplename locked ( simplename locked at ) simplename locked at ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename not locked ) simplename not locked ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Lock the vault for the refund .
ref: Lock the vault for the wallets .

353:
src: ( functiondefinition ( simplename handle tokens ) simplename handle tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename handle tokens ) simplename handle tokens ) memberaccess ( simplename address ) simplename address ( simplename tokens ) simplename tokens ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only whitelisted ) simplename only whitelisted ( simplename address ) simplename address ) modifierinvocation ) functiondefinition
candidate: We validate the new amount doesn't surpass maximum contribution cap .
ref: Override default function to allow only whitelisted addresses to participate in the fundraiser .

354:
src: ( functiondefinition ( simplename get current spend ) simplename get current spend ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( simpletype ( simplename wallet main lib wallet data ) simplename wallet main lib wallet data ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ( block ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename cs ) simplename cs ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename cs ) simplename cs ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename current spend ) simplename current spend ) memberaccess ( simplename token ) simplename token ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename cs ) simplename cs ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename current spend ) simplename current spend ) memberaccess ( simplename token ) simplename token ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) expressionstatement ( returnstatement ( simplename cs ) simplename cs ) returnstatement ) block ) functiondefinition
candidate: Get current amount of tokens for buy in wei .
ref: Get current day spend for token .

355:
src: ( functiondefinition ( simplename set daily limit ) simplename set daily limit ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename daily limit ) simplename daily limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename standard daily limit ) simplename standard daily limit ( simplename daily limit ) simplename daily limit ) expressionstatement ( emitstatement ( functioncall ( simplename set daily limit ) simplename set daily limit ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to set the daily limit .
ref: set standard daily limit .

356:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename game item index to owner ) simplename game item index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

357:
src: ( functiondefinition ( simplename check whitelisted ) simplename check whitelisted ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename raw hash ) simplename raw hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sig ) simplename sig ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename raw hash ) simplename raw hash ( simplename to eth signed message hash ) simplename to eth signed message hash ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename invalid hash ) simplename invalid hash ( simplename raw hash ) simplename raw hash ) indexaccess ( binaryoperation == ) binaryoperation == ( simplename whitelist admin ) simplename whitelist admin ( functioncall ( memberaccess ( simplename hash ) simplename hash ( simplename recover ) simplename recover ) memberaccess ( simplename sig ) simplename sig ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Checks if a given address was signed with any given signature .
ref: Checks if a hash has been signed by the whitelistAdmin .

358:
src: ( functiondefinition ( simplename start favor escrow ) simplename start favor escrow ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename c4 <UNK> contract addr ) simplename c4 <UNK> contract addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new favor ) simplename new favor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename c4 fescrow ) simplename c4 fescrow ) simpletype ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename id ) simplename id ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename arbitration percent ) simplename arbitration percent ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename escrow addresses ) simplename escrow addresses ( simplename push ) simplename push ) memberaccess ( simplename new favor ) simplename new favor ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename c4 fescrow contracts ) simplename c4 fescrow contracts ( simplename new favor ) simplename new favor ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename transfer ) simplename transfer ( simplename new favor ) simplename new favor ( simplename tokens ) simplename tokens ) functioncall ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename c4 <UNK> contract addr ) simplename c4 <UNK> contract addr ( simplename new favor ) simplename new favor ) expressionstatement ( expressionstatement ( functioncall ( simplename new escrow created ) simplename new escrow created ( simplename id ) simplename id ( simplename new favor ) simplename new favor ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( simplename c4 <UNK> contract addr ) simplename c4 <UNK> contract addr ) returnstatement ) block ( modifierinvocation ( simplename not locked ) simplename not locked ) modifierinvocation ) functiondefinition
candidate: It will be used to create a new address of the same token .
ref: <UNK> <UNK> starts an escrow contract and transfers the tokens into the contract .

359:
src: ( functiondefinition ( simplename publicly distributed parts ) simplename publicly distributed parts ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename max supply ) simplename max supply ( simplename sub ) simplename sub ) memberaccess ( simplename total supply ) simplename total supply ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Show the returning of the returning status of the token .
ref: amount of <UNK> SMRE .

360:
src: ( functiondefinition ( simplename owner recover tokens ) simplename owner recover tokens ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename token ) simplename token ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens remaining ) simplename tokens remaining ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename tokens remaining ) simplename tokens remaining ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens remaining ) simplename tokens remaining ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: enable recovery of sent to the contract .
ref: after we distribute the bonus tokens , we will send them back to the coin itself .

361:
src: ( functiondefinition ( simplename pause ) simplename pause ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename active ) simplename active ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename active ) simplename active ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Pause the contract .
ref: Pause the presale ( disables contributions and token claiming ) .

362:
src: ( functiondefinition ( simplename approve add owner request ) simplename approve add owner request ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( memberaccess ( simplename add owner ) simplename add owner ( simplename is execute ) simplename is execute ) memberaccess ( unaryoperation ! ) unaryoperation ! ( memberaccess ( simplename add owner ) simplename add owner ( simplename is canceled ) simplename is canceled ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename add owner ) simplename add owner ( simplename creation timestamp ) simplename creation timestamp ) memberaccess ( simplename life time ) simplename life time ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename now ) simplename now ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename owners ) simplename owners ( memberaccess ( simplename add owner ) simplename add owner ( simplename new owner ) simplename new owner ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( memberaccess ( simplename add owner ) simplename add owner ( simplename confirmators ) simplename confirmators ) memberaccess ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( indexaccess ( memberaccess ( simplename add owner ) simplename add owner ( simplename confirmators ) simplename confirmators ) memberaccess ( simplename i ) simplename i ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( memberaccess ( simplename add owner ) simplename add owner ( simplename confirms ) simplename confirms ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename add owner ) simplename add owner ( simplename confirmators ) simplename confirmators ) memberaccess ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename add owner ) simplename add owner ( simplename confirms ) simplename confirms ) memberaccess ( simplename need approves to confirm ) simplename need approves to confirm ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename add owner ) simplename add owner ( simplename is execute ) simplename is execute ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename owners ) simplename owners ( memberaccess ( simplename add owner ) simplename add owner ( simplename new owner ) simplename new owner ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename owners count
candidate: Approve owner request , can call this function call only by owner which created this owner can call .
ref: Approve new owner request , can be call only by owner which don't call this new owner request before .

363:
src: ( functiondefinition ( simplename has ended ) simplename has ended ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename over period ) simplename over period ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename end time ) simplename end time ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename under purchasable amount ) simplename under purchasable amount ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation < ) binaryoperation < ( functioncall ( simplename get purchasable amount ) simplename get purchasable amount ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( returnstatement ( binaryoperation || ) binaryoperation || ( simplename over period ) simplename over period ( simplename under purchasable amount ) simplename under purchasable amount ) returnstatement ) block ) functiondefinition
candidate: returns if crowdsale has ended .
ref: return true if crowdsale event has ended .

364:
src: ( functiondefinition ( simplename mint token rewards ) simplename mint token rewards ( visibility public ) visibility public ( variabledeclaration ( simplename contract ) simplename contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer by crowdsale ) simplename transfer by crowdsale ) memberaccess ( simplename contract ) simplename contract ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ) functiondefinition
candidate: called by CrowdsaleController to transfer reward part of tokens sold by successful crowdsale to Forecasting contract .
ref: called by CrowdsaleController to transfer reward part of tokens sold by successful crowdsale to Forecasting contract .

365:
src: ( functiondefinition ( simplename release for <UNK> team ) simplename release for <UNK> team ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename create time ) simplename create time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename tokens released to team ) simplename tokens released to team ( simplename team supply ) simplename team supply ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename temp ) simplename temp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename team supply ) simplename team supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename alloc amount ) simplename alloc amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe mul ) simplename safe mul ( simplename temp ) simplename temp ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current tranche ) simplename current tranche ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( binaryoperation - ) binaryoperation - ( simplename now ) simplename now ( simplename create time ) simplename create time ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( simplename team tranches released ) simplename team tranches released ( simplename max tranches ) simplename max tranches ( binaryoperation > ) binaryoperation > ( simplename current tranche ) simplename current tranche ( simplename team tranches released ) simplename team tranches released ( binaryoperation <= ) binaryoperation <= ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename current supply ) simplename current supply ( simplename alloc amount ) simplename alloc amount ) tupleexpression ( simplename total supply ) simplename total supply ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename team tranches released ) simplename team tranches released ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename <UNK> team address ) simplename <UNK> team address ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balance of ) simplename balance of ( simplename <UNK> team address ) simplename <UNK> team address ) indexaccess ( simplename alloc amount ) simplename alloc amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename current supply ) simplename current supply ( simplename alloc amount ) simplename alloc amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens released to team ) simplename tokens released to team ( functioncall ( simplename safe add ) simplename safe add ( simplename tokens released to team ) simplename tokens released to team ( simplename alloc amount ) simplename alloc amount ) functioncall ) expressionstatement ( expressionstatement
candidate: Release one tranche of the team member .
ref: Release one tranche of the teamSupply allocation to Yooba team , 6 . 25 .

366:
src: ( functiondefinition ( simplename stop ) simplename stop ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename end time ) simplename end time ( simplename now ) simplename now ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: called by the owner to stop the crowdsale .
ref: Function to stop the contribution .

367:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename contract timeout ) simplename contract timeout ( functioncall ( simplename get block time ) simplename get block time ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename growth contract ) simplename growth contract ( simplename tokens ) simplename tokens ( simplename empty ) simplename empty ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename distribute ) simplename distribute ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: owner may withdraw the tokens after the presale period has ended .
ref: withdraw funds and tokens .

368:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename is not frozen ) simplename is not frozen ) modifierinvocation ) functiondefinition
candidate: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Approves the passed address to spend the specified amount of tokens on behalf of msg . sender .

369:
src: ( functiondefinition ( simplename set migration master ) simplename set migration master ( visibility public ) visibility public ( variabledeclaration ( simplename master ) simplename master ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename master ) simplename master ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename migration master ) simplename migration master ( simplename master ) simplename master ) expressionstatement ) block ( modifierinvocation ( simplename only migration master ) simplename only migration master ) modifierinvocation ) functiondefinition
candidate: Set address of migration target contract .
ref: Changes the migration master .

370:
src: ( functiondefinition ( simplename blacklist ) simplename blacklist ( visibility public ) visibility public ( variabledeclaration ( simplename node ) simplename node ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename blacklisted ) simplename blacklisted ( simplename node ) simplename node ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename blacklisted ) simplename blacklisted ( simplename node ) simplename node ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Adds a new node to the blacklist .
ref: Add a node to the blacklist .

371:
src: ( functiondefinition ( simplename admin set default fee ) simplename admin set default fee ( visibility public ) visibility public ( variabledeclaration ( simplename market default fee low ) simplename market default fee low ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename market default fee high ) simplename market default fee high ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin ) simplename admin ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename market default fee low ) simplename market default fee low ( simplename market default fee low ) simplename market default fee low ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename market default fee high ) simplename market default fee high ( simplename market default fee high ) simplename market default fee high ) expressionstatement ) block ) functiondefinition
candidate: The function to update the gas cost of the NFT .
ref: set default fee .

372:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename tuber index to owner ) simplename tuber index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

373:
src: ( functiondefinition ( simplename compute tokens purchased at tier ) simplename compute tokens purchased at tier ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( simpletype ( simplename collection ) simplename collection ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tier ) simplename tier ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei ) simplename wei ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename paid basis ) simplename paid basis ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename max discount ) simplename max discount ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename tiers ) simplename tiers ) memberaccess ( simplename tier ) simplename tier ) indexaccess ( simplename discount ) simplename discount ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename wei ) simplename wei ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename self ) simplename self ( simplename base rate ) simplename base rate ) memberaccess ) functioncall ( simplename mul ) simplename mul ) memberaccess ( simplename max discount ) simplename max discount ) functioncall ( simplename paid basis ) simplename paid basis ) returnstatement ) block ) functiondefinition
candidate: Returns the amount of tokens for a given tier .
ref: total number of tokens for an amount of wei , <UNK> .

374:
src: ( functiondefinition ( simplename finalization ) simplename finalization ( visibility internal ) visibility internal ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename token ) simplename token ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename owner ) simplename owner ) memberaccess ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ownership ) simplename transfer ownership ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename finalization ) simplename finalization ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: transfer ownership of finalization .
ref: Can be overridden to add finalization logic .

375:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( simplename transferlocked ) simplename transferlocked ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer token to a specified address .
ref: transfer token for a specified address _to The address to transfer to .

376:
src: ( functiondefinition ( simplename payout ) simplename payout ( visibility default ) visibility default ( variabledeclaration ( simplename password ) simplename password ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename password ) simplename password ) functioncall ( simplename hash pwd ) simplename hash pwd ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename bounty paid ) simplename bounty paid ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename proposed beneficiary ) simplename proposed beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename votes for ) simplename votes for ( simplename votes against ) simplename votes against ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( simplename votes for ) simplename votes for ( simplename votes against ) simplename votes against ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename count donors ) simplename count donors ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bounty paid ) simplename bounty paid ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename proposed beneficiary ) simplename proposed beneficiary ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: The payout for the his address and .
ref: Paying the tipper .

377:
src: ( functiondefinition ( simplename get approved proposals ) simplename get approved proposals ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename count ) simplename count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename proposals ) simplename proposals ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( memberaccess ( indexaccess ( simplename proposals ) simplename proposals ( simplename i ) simplename i ) indexaccess ( simplename approved ) simplename approved ) memberaccess ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename proposals ) simplename proposals ( simplename i ) simplename i ) indexaccess ( simplename denied ) simplename denied ) memberaccess ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename count ) simplename count ) expressionstatement ) block ) ifstatement ) block ) forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename approved proposals ) simplename approved proposals ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( simplename count ) simplename count ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename count ) simplename count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename proposals ) simplename proposals ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( memberaccess ( indexaccess ( simplename proposals ) simplename proposals ( simplename i ) simplename i ) indexaccess ( simplename approved ) simplename approved ) memberaccess ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename proposals ) simplename proposals ( simplename i ) simplename i ) indexaccess ( simplename denied ) simplename denied ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename approved proposals ) simplename approved proposals ( simplename count ) simplename count ) indexaccess ( simplename i ) simplename i ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename count ) simplename count ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename approved proposals ) simplename approved proposals ) returnstatement ) block ) functiondefinition
candidate: Get all data of an array which all of all registered proposals .
ref: Get all approved proposals .

378:
src: ( modifierdefinition ( simplename not allocated ) simplename not allocated ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename allocations ) simplename allocations ( simplename team reserve wallet ) simplename team reserve wallet ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename allocations ) simplename allocations ( simplename first reserve wallet ) simplename first reserve wallet ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Token allocations have not been set .
ref: Token allocations have not been set .

379:
src: ( functiondefinition ( simplename is minimum goal reached ) simplename is minimum goal reached ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation >= ) binaryoperation >= ( simplename wei raised ) simplename wei raised ( simplename wei minimum goal ) simplename wei minimum goal ) returnstatement ) block ) functiondefinition
candidate: return true if the crowdsale has raised enough money to be a successful .
ref: return true if the crowdsale has raised enough money to be a successful .

380:
src: ( functiondefinition ( simplename set subnode owner ) simplename set subnode owner ( visibility public ) visibility public ( variabledeclaration ( simplename node ) simplename node ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename label ) simplename label ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename subnode ) simplename subnode ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename sha3 ) simplename sha3 ( simplename node ) simplename node ( simplename label ) simplename label ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename new owner ) simplename new owner ( simplename node ) simplename node ( simplename label ) simplename label ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename records ) simplename records ( simplename subnode ) simplename subnode ) indexaccess ( simplename owner ) simplename owner ) memberaccess ( simplename owner ) simplename owner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ( simplename node ) simplename node ) modifierinvocation ) functiondefinition
candidate: Transfers ownership of a subnode keccak256 ( node , label ) to a new address .
ref: Transfers ownership of a subnode sha3 ( node , label ) to a new address .

381:
src: ( functiondefinition ( simplename transfer with commission ) simplename transfer with commission ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com tokens ) simplename com tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename mul ) simplename mul ) memberaccess ( simplename commission ) simplename commission ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename com tokens ) simplename com tokens ( functioncall ( memberaccess ( simplename com tokens ) simplename com tokens ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename sub ) simplename sub ) memberaccess ( simplename com tokens ) simplename com tokens ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename commission target ) simplename commission target ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename commission target ) simplename commission target ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename com tokens ) simplename com tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename sub ) simplename sub ) memberaccess ( simplename com tokens ) simplename com tokens ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename commission target ) simplename commission target ( simplename com tokens ) simplename com tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename not locked ) simplename not locked ) modifierinvocation ( modifierinvocation ( simplename not paused ) simplename not paused ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from the caller to a target address .
ref: this function will be used by the C4F app to charge a Commission on transfers later .

382:
src: ( functiondefinition ( simplename set current market rate ) simplename set current market rate ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename current market rate ) simplename current market rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current market rate ) simplename current market rate ( simplename current market rate ) simplename current market rate ) expressionstatement ) block ( modifierinvocation ( simplename only creator ) simplename only creator ) modifierinvocation ) functiondefinition
candidate: the current rate .
ref: Set current market rate ETH / RICH .

383:
src: ( functiondefinition ( simplename create person ) simplename create person ( visibility private ) visibility private ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename person ) simplename person ( simpletype ( simplename person ) simplename person ) simpletype ) variabledeclaration ( functioncall ( simplename person ) simplename person ( simplename name ) simplename name ( simplename selling price ) simplename selling price ( simplename name ) simplename name ( simplename price ) simplename price ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new person id ) simplename new person id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename persons ) simplename persons ( simplename push ) simplename push ) memberaccess ( simplename person ) simplename person ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename new person id ) simplename new person id ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename new person id ) simplename new person id ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename birth ) simplename birth ( simplename new person id ) simplename new person id ( simplename name ) simplename name ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename owner ) simplename owner ( simplename new person id ) simplename new person id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: For creating Person .
ref: For creating Person .

384:
src: ( functiondefinition ( simplename deploy factory ) simplename deploy factory ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new <UNK> ) simplename new <UNK> ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename create clone ) simplename create clone ( simplename factory ) simplename factory ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename factory index ) simplename factory index ( simplename new <UNK> ) simplename new <UNK> ) indexaccess ( memberaccess ( simplename factory contracts ) simplename factory contracts ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename factory contracts ) simplename factory contracts ( simplename push ) simplename push ) memberaccess ( simplename new <UNK> ) simplename new <UNK> ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename factory ) simplename factory ( simplename new <UNK> ) simplename new <UNK> ) functioncall ( simplename init ) simplename init ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename new factory ) simplename new factory ( simplename new <UNK> ) simplename new <UNK> ) functioncall ) emitstatement ( returnstatement ( simplename new <UNK> ) simplename new <UNK> ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add a new swap .
ref: creates a new factory by cloning the factory specified in <UNK> .

385:
src: ( functiondefinition ( simplename mint timelocked ) simplename mint timelocked ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename release time ) simplename release time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename timelock ) simplename timelock ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ( simplename this ) simplename this ( simplename to ) simplename to ( simplename release time ) simplename release time ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename balances locked ) simplename balances locked ( simplename to ) simplename to ) indexaccess ( simplename push ) simplename push ) memberaccess ( simplename timelock ) simplename timelock ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename timelock ) simplename timelock ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( simplename timelock ) simplename timelock ) returnstatement ) block ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ) functiondefinition
candidate: mint timelocked tokens .
ref: mint timelocked tokens .

386:
src: ( functiondefinition ( simplename whitelist address ) simplename whitelist address ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename air drop qty ) simplename air drop qty ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: whitelist an address .
ref: whitelist an address .

387:
src: ( functiondefinition ( simplename mint token ) simplename mint token ( visibility public ) visibility public ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename minted amount ) simplename minted amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename allow mint ) simplename allow mint ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename target ) simplename target ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename target ) simplename target ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename minted amount ) simplename minted amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename minted amount ) simplename minted amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename this ) simplename this ( simplename minted amount ) simplename minted amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename this ) simplename this ( simplename target ) simplename target ( simplename minted amount ) simplename minted amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Create mintedAmount tokens and send it to target .
ref: Create mintedAmount tokens and send it to target .

388:
src: ( functiondefinition ( simplename <UNK> <UNK> ) simplename <UNK> <UNK> ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename name ) simplename name ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename decimals ) simplename decimals ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename symbol ) simplename symbol ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename units one eth can buy ) simplename units one eth can buy ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename funds wallet ) simplename funds wallet ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: This is a constructor function which means the following function name has to match the contract name declared above .
ref: This is a constructor function which means the following function name has to match the contract name declared above .

389:
src: ( functiondefinition ( simplename get players battle stats ) simplename get players battle stats ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename attacking power ) simplename attacking power ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename defending power ) simplename defending power ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> power ) simplename <UNK> power ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename battle power ) simplename battle power ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename player ) simplename player ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename start id ) simplename start id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename end id ) simplename end id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename start id ) simplename start id ( simplename end id ) simplename end id ) tupleexpression ( functioncall ( memberaccess ( simplename schema ) simplename schema ( simplename battle card id range ) simplename battle card id range ) memberaccess ) functioncall ) expressionstatement ( whilestatement ( binaryoperation <= ) binaryoperation <= ( simplename start id ) simplename start id ( simplename end id ) simplename end id ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename attacking power ) simplename attacking power ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename attacking power ) simplename attacking power ( functioncall ( simplename get units attack ) simplename get units attack ( simplename player ) simplename player ( simplename start id ) simplename start id ( indexaccess ( indexaccess ( simplename units owned ) simplename units owned ( simplename player ) simplename player ) indexaccess ( simplename start id ) simplename start id ) indexaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> power ) simplename <UNK> power ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename <UNK> power ) simplename <UNK> power ( functioncall ( simplename get units <UNK> capacity ) simplename get units <UNK> capacity ( simplename player ) simplename player ( simplename start id ) simplename start id ( indexaccess ( indexaccess ( simplename units owned ) simplename units owned ( simplename player ) simplename player ) indexaccess ( simplename start id ) simplename start id ) indexaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename defending power ) simplename defending power ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename defending power ) simplename defending power ( functioncall ( simplename get units defense ) simplename get units defense ( simplename player ) simplename player ( simplename start id ) simplename start id ( indexaccess ( indexaccess ( simplename units owned ) simplename units owned ( simplename player ) simplename player ) indexaccess ( simplename start id ) simplename start id ) indexaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = )
candidate: Return all existing entry .
ref: player's <UNK> <UNK> <UNK> battle power .

390:
src: ( functiondefinition ( simplename enable refunds ) simplename enable refunds ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename refunds enabled ) simplename refunds enabled ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename winner confirmed ) simplename winner confirmed ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename refunds enabled ) simplename refunds enabled ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename refunds enabled ) simplename refunds enabled ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Enable refunds of the contract .
ref: In case of an emergency situation or other unexpected event an owner of the contract can explicitly enable refunds .

391:
src: ( functiondefinition ( simplename set token contract address ) simplename set token contract address ( visibility default ) visibility default ( variabledeclaration ( simplename token contract address ) simplename token contract address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( simplename token contract defined ) simplename token contract defined ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token ) simplename token ( functioncall ( simplename token ) simplename token ( simplename token contract address ) simplename token contract address ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token contract defined ) simplename token contract defined ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename admin only ) simplename admin only ) modifierinvocation ) functiondefinition
candidate: Set the address of the token contract .
ref: Set the Token contract address as a one-time operation .

392:
src: ( functiondefinition ( simplename is request pending ) simplename is request pending ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename requestor ) simplename requestor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename rendered number ) simplename rendered number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename pending numbers ) simplename pending numbers ( simplename requestor ) simplename requestor ) indexaccess ( simplename wait time ) simplename wait time ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: is a request pending for the number of tokens .
ref: is a number request pending for the address .

393:
src: ( functiondefinition ( simplename is balance sufficient for contract creation ) simplename is balance sufficient for contract creation ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename user address ) simplename user address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename user address ) simplename user address ) indexaccess ( simplename min balance to allow contract creation ) simplename min balance to allow contract creation ) returnstatement ) block ) functiondefinition
candidate: Check if user is in the contract for a user .
ref: checks if a user address has enough token balance to be eligible to create a contract .

394:
src: ( functiondefinition ( simplename release tokens ) simplename release tokens ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename reserve vault ) simplename reserve vault ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename restricted vault ) simplename restricted vault ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename sale allocated ) simplename sale allocated ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sale allocated ) simplename sale allocated ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( simplename reserve vault ) simplename reserve vault ( simplename reserve cap ) simplename reserve cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( simplename restricted vault ) simplename restricted vault ( simplename team cap ) simplename team cap ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename sale allocating ) simplename sale allocating ) modifierinvocation ) functiondefinition
candidate: Allocates the tokens from the reserve wallet to the vault address , and transfers ownership to the vault address .
ref: release any other tokens needed and mark us as allocated .

395:
src: ( functiondefinition ( simplename get annual fee ) simplename get annual fee ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename fee per sec ) simplename fee per sec ( simplename mul ) simplename mul ) memberaccess ( simplename sec per year ) simplename sec per year ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the registration fee of a certain address .
ref: Get annual fee in RvT .

396:
src: ( functiondefinition ( simplename receive approval ) simplename receive approval ( visibility external ) visibility external ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token contract ) simplename token contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename token contract ) simplename token contract ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename ndc ) simplename ndc ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename this ) simplename this ( simplename call ) simplename call ) memberaccess ( simplename extra data ) simplename extra data ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Receive approved ERC20 tokens .
ref: receiveApproval calls function encoded as extra data .

397:
src: ( functiondefinition ( simplename append ) simplename append ( visibility default ) visibility default ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename data ) simplename data ( simpletype ( simplename data ) simplename data ) simpletype ) variabledeclaration ( variabledeclaration ( simplename item ) simplename item ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename append ) simplename append ( simplename data ) simplename data ( simplename item ) simplename item ( memberaccess ( simplename data ) simplename data ( simplename tail ) simplename tail ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Append an early purchase log .
ref: Append element to end of list .

398:
src: ( functiondefinition ( simplename move funds ) simplename move funds ( visibility public ) visibility public ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename send ) simplename send ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: this function is used to manually before the contract will move .
ref: Moves funds in sale contract to <UNK> .

399:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( tupleexpression ( binaryoperation > ) binaryoperation > ( functioncall ( simplename time ) simplename time ) functioncall ( binaryoperation + ) binaryoperation + ( simplename end date ) simplename end date ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from sender to another account .
ref: Transfer the balance from owner's account to another account , with a check that the crowdsale is finalised .

400:
src: ( functiondefinition ( simplename withdraw pre ico founds ) simplename withdraw pre ico founds ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename current pre icobalance ) simplename current pre icobalance ( simplename softcap ) simplename softcap ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename available to transer ) simplename available to transer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename manager ethbonus ) simplename manager ethbonus ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( simplename available to transer ) simplename available to transer ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The function of all tokens which can be called by the owner of the contract .
ref: If ICO reached owner can withdrow ETH for ICO <UNK> managment .

401:
src: ( functiondefinition ( simplename toggle attached <UNK> ) simplename toggle attached <UNK> ( visibility public ) visibility public ( variabledeclaration ( simplename state ) simplename state ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename attached system active ) simplename attached system active ( simplename state ) simplename state ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ) functiondefinition
candidate: Function to stop minting new tokens .
ref: Toggle the Attachment Switch .

402:
src: ( functiondefinition ( simplename tokens buy ) simplename tokens buy ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tnow ) simplename tnow ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename tnow ) simplename tnow ( simplename ico finish ) simplename ico finish ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename total supply ) simplename total supply ( simplename max tokens ) simplename max tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename token price ) simplename token price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens buy ) simplename tokens buy ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename token price ) simplename token price ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens buy ) simplename tokens buy ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename tnow ) simplename tnow ( binaryoperation + ) binaryoperation + ( simplename ico start ) simplename ico start ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens buy ) simplename tokens buy ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename tokens buy ) simplename tokens buy ( simplename p1 ) simplename p1 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename ico start ) simplename ico start ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename tnow ) simplename tnow ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename tnow ) simplename tnow ( binaryoperation + ) binaryoperation + ( simplename ico start ) simplename ico start ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens buy ) simplename tokens buy ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename tokens buy ) simplename tokens buy ( simplename p2 ) simplename p2 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename ico start
candidate: Buy tokens on pre-ico and ico with bonuses on time boundaries .
ref: Buy tokens on pre-ico and ico .

403:
src: ( functiondefinition ( simplename order ) simplename order ( visibility public ) visibility public ( variabledeclaration ( simplename funder id ) simplename funder id ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename collector ) simplename collector ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename funds ) simplename funds ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tx ) simplename tx ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tx ) simplename tx ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename transactions ) simplename transactions ( simplename tx ) simplename tx ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename transactions ) simplename transactions ( simplename tx ) simplename tx ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename order ) simplename order ( simplename funder id ) simplename funder id ( simplename collector ) simplename collector ( simplename funds ) simplename funds ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Public Order Placement - process a transaction .
ref: Makes order for tokens purchase .

404:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename value allowed to transfer ) simplename value allowed to transfer ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( indexaccess ( simplename is investor ) simplename is investor ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename becomes transferable ) simplename becomes transferable ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename value allowed to transfer ) simplename value allowed to transfer ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename value allowed to transfer ) simplename value allowed to transfer ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename value allowed to transfer ) simplename value allowed to transfer ( indexaccess ( simplename balances allowed to transfer ) simplename balances allowed to transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename value allowed to transfer ) simplename value allowed to transfer ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances allowed to transfer ) simplename balances allowed to transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances allowed to transfer ) simplename balances allowed to transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg
candidate: Transfer token for a specified address .
ref: transfer token for a specified address ( written due to backward compatibility ) .

405:
src: ( functiondefinition ( simplename buyer balance ) simplename buyer balance ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename buyer ) simplename buyer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename buyer balances ) simplename buyer balances ( simplename buyer ) simplename buyer ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: The amount of tokens that a specific address .
ref: Buyer balance in wei .

406:
src: ( modifierdefinition ( simplename only admin ) simplename only admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename sale tokens vault ) simplename sale tokens vault ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check whether the sender is allowed to call .
ref: <UNK> functions to the admins of the token only .

407:
src: ( functiondefinition ( simplename clear contributor record in group ) simplename clear contributor record in group ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simplename refund balance ) simplename refund balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename user add ) simplename user add ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename group ) simplename group ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename token index to group ) simplename token index to group ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename c index ) simplename c index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( indexaccess ( memberaccess ( simplename group ) simplename group ( simplename address to contributor arr index ) simplename address to contributor arr index ) memberaccess ( simplename user add ) simplename user add ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last <UNK> ) simplename last <UNK> ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( memberaccess ( simplename group ) simplename group ( simplename contributor arr ) simplename contributor arr ) memberaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename refund balance ) simplename refund balance ( indexaccess ( memberaccess ( simplename group ) simplename group ( simplename address to contribution ) simplename address to contribution ) memberaccess ( simplename user add ) simplename user add ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename token index to group ) simplename token index to group ( simplename token id ) simplename token id ) indexaccess ( simplename address to contributor arr index ) simplename address to contributor arr index ) memberaccess ( simplename user add ) simplename user add ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename token index to group ) simplename token index to group ( simplename token id ) simplename token id ) indexaccess ( simplename address to contribution ) simplename address to contribution ) memberaccess ( simplename user add ) simplename user add ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename last <UNK> ) simplename last <UNK> ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename token index to group ) simplename token index to group ( simplename token id ) simplename token id ) indexaccess ( simplename address to contributor arr index ) simplename address to contributor arr index ) memberaccess ( indexaccess ( memberaccess ( simplename group ) simplename group ( simplename contributor arr ) simplename contributor arr ) memberaccess ( simplename last <UNK> ) simplename last <UNK> ) indexaccess ) indexaccess ( simplename c index ) simplename
candidate: Only used in group of a specific token .
ref: Clears record of a <UNK> from a <UNK> record .

408:
src: ( functiondefinition ( simplename add bonuses ) simplename add bonuses ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename reward ) simplename reward ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename x ) simplename x ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ) variabledeclaration ( tupleexpression ( simplename reward ) simplename reward ( simplename reward ) simplename reward ) tupleexpression ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename remaining tokens ) simplename remaining tokens ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename x ) simplename x ( simplename y ) simplename y ) tupleexpression ( functioncall ( simplename level one bonus ) simplename level one bonus ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename reward ) simplename reward ( simplename x ) simplename x ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename y ) simplename y ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename x ) simplename x ( simplename y ) simplename y ) tupleexpression ( functioncall ( simplename level two bonus ) simplename level two bonus ( simplename y ) simplename y ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename reward ) simplename reward ( simplename x ) simplename x ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename y ) simplename y ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( binaryoperation + ) binaryoperation + ( simplename reward ) simplename reward ( functioncall ( simplename level three bonus ) simplename level three bonus ( simplename y ) simplename y ) functioncall ) returnstatement ) block ) ifstatement ) block ) ifstatement ( returnstatement ( simplename reward ) simplename reward ) returnstatement ) block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename remaining tokens ) simplename remaining tokens ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename x ) simplename x ( simplename y ) simplename y ) tupleexpression ( functioncall ( simplename level two bonus ) simplename level two bonus ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename y ) simplename y ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( binaryoperation + ) binaryoperation + ( simplename x ) simplename x ( functioncall ( simplename level three bonus ) simplename level three bonus ( simplename y ) simplename y ) functioncall ) returnstatement ) block ) ifstatement ( returnstatement ( simplename x ) simplename x ) returnstatement ) block ( block ( returnstatement ( functioncall ( simplename level three bonus ) simplename level three bonus ( simplename amount ) simplename amount ) functioncall ) returnstatement ) block ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Add new tokens for the smart contract .
ref: For the first 1 . 500 . 000 .

409:
src: ( functiondefinition ( simplename create color ) simplename create color ( visibility private ) visibility private ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename g ) simplename g ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename r ) simplename r ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename r ) simplename r ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename g ) simplename g ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename g ) simplename g ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename b ) simplename b ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename b ) simplename b ) functioncall ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename color ) simplename color ( simpletype ( simplename color ) simplename color ) simpletype ) variabledeclaration ( functioncall ( simplename color ) simplename color ( simplename r ) simplename r ( simplename g ) simplename g ( simplename b ) simplename b ( simplename name ) simplename name ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename r ) simplename r ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename g ) simplename g ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename b ) simplename b ) functioncall ( simplename name ) simplename name ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new color id ) simplename new color id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename colors ) simplename colors ( simplename push ) simplename push ) memberaccess ( simplename color ) simplename color ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename new color id ) simplename new color id ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256
candidate: create a color , with the given name and with specified parameters .
ref: For creating color .

410:
src: ( functiondefinition ( simplename price of ) simplename price of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename product id ) simplename product id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( memberaccess ( indexaccess ( simplename products ) simplename products ( simplename product id ) simplename product id ) indexaccess ( simplename price ) simplename price ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: The associated price of a product .
ref: The price of a product .

411:
src: ( functiondefinition ( simplename remove delegate ) simplename remove delegate ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename delegate log ) simplename delegate log ( simpletype ( simplename delegate log ) simplename delegate log ) simpletype ) variabledeclaration ( indexaccess ( simplename delegates ) simplename delegates ( simplename address ) simplename address ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename delegate log ) simplename delegate log ( simplename started ) simplename started ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename delegate log ) simplename delegate log ( simplename ended ) simplename ended ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename delegate log ) simplename delegate log ( simplename ended ) simplename ended ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: remove a delegate from the burn to a specific delegate permission .
ref: Removes an existing worker , removed <UNK> can't be added back .

412:
src: ( functiondefinition ( simplename owner allocate ) simplename owner allocate ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount wei ) simplename amount wei ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount raised ) simplename amount raised ( functioncall ( memberaccess ( simplename amount raised ) simplename amount raised ( simplename add ) simplename add ) memberaccess ( simplename amount wei ) simplename amount wei ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename get total amount raised ) simplename get total amount raised ) functioncall ( simplename funding cap ) simplename funding cap ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount wei ) simplename amount wei ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( simplename to ) simplename to ( simplename amount wei ) simplename amount wei ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update funding cap ) simplename update funding cap ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename non reentrant ) simplename non reentrant ) modifierinvocation ) functiondefinition
candidate: Allocate tokens for the users .
ref: The owner can allocate the specified amount .

413:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token owner ) simplename token owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename balances ) simplename balances ( simplename token owner ) simplename token owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Gets the balance of the specified address .
ref: Get the token balance for account tokenOwner .

414:
src: ( functiondefinition ( simplename unlock ) simplename unlock ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename unlock investor ) simplename unlock investor ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only states ) simplename only states ( memberaccess ( simplename lock state ) simplename lock state ( simplename accepting unlocks ) simplename accepting unlocks ) memberaccess ( memberaccess ( simplename lock state ) simplename lock state ( simplename release all ) simplename release all ) memberaccess ) modifierinvocation ) functiondefinition
candidate: The basic entry point to participate the crowdsale process .
ref: unlocks investors funds , see unlockInvestor for details .

415:
src: ( functiondefinition ( simplename purchase ) simplename purchase ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename stock id ) simplename stock id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename share id ) simplename share id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( simplename stock id ) simplename stock id ( memberaccess ( simplename stocks ) simplename stocks ( simplename length ) simplename length ) memberaccess ( binaryoperation < ) binaryoperation < ( simplename share id ) simplename share id ( memberaccess ( simplename shares ) simplename shares ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename stock ) simplename stock ( simpletype ( simplename stock ) simplename stock ) simpletype ) variabledeclaration ( indexaccess ( simplename stocks ) simplename stocks ( simplename stock id ) simplename stock id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename shares for stock ) simplename shares for stock ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( indexaccess ( simplename stock shares ) simplename stock shares ( simplename stock id ) simplename stock id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename share ) simplename share ( simpletype ( simplename share ) simplename share ) simpletype ) variabledeclaration ( indexaccess ( simplename shares ) simplename shares ( indexaccess ( simplename shares for stock ) simplename shares for stock ( simplename share id ) simplename share id ) indexaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous holder ) simplename previous holder ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename share ) simplename share ( simplename holder ) simplename holder ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current price ) simplename current price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get purchase price ) simplename get purchase price ( memberaccess ( simplename share ) simplename share ( simplename purchase price ) simplename purchase price ) memberaccess ( memberaccess ( simplename stock ) simplename stock ( simplename price increase ) simplename price increase ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename current price ) simplename current price ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename current price ) simplename current price ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename
candidate: Calculates the share price of the fund .
ref: Purchase a share from its current owner .

416:
src: ( functiondefinition ( simplename pause ) simplename pause ( visibility default ) visibility default ( variabledeclaration ( simplename pause ) simplename pause ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename paused ) simplename paused ( simplename pause ) simplename pause ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: called by the owner to pause , triggers stopped state .
ref: Pause all <UNK> .

417:
src: ( functiondefinition ( simplename get price ) simplename get price ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename pre start ) simplename pre start ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename pre end ) simplename pre end ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename pre amount stages ) simplename pre amount stages ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename pre tokens sold ) simplename pre tokens sold ( indexaccess ( simplename pre amount stages ) simplename pre amount stages ( simplename i ) simplename i ) indexaccess ( returnstatement ( indexaccess ( simplename pre prices ) simplename pre prices ( simplename i ) simplename i ) indexaccess ) returnstatement ) ifstatement ) block ) forstatement ( returnstatement ( indexaccess ( simplename pre prices ) simplename pre prices ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename pre prices ) simplename pre prices ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) returnstatement ) block ) ifstatement ( returnstatement ( indexaccess ( simplename prices ) simplename prices ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename prices ) simplename prices ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get the price for a single token .
ref: Looks up the current token price .

418:
src: ( functiondefinition ( simplename valid purchase presale ) simplename valid purchase presale ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within period ) simplename within period ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename start block ) simplename start block ) tupleexpression ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end presale ) simplename end presale ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename non zero purchase ) simplename non zero purchase ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename within cap ) simplename within cap ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename wei raised pre sale ) simplename wei raised pre sale ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename presale cap ) simplename presale cap ) variabledeclarationstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( simplename within period ) simplename within period ( simplename non zero purchase ) simplename non zero purchase ( simplename within cap ) simplename within cap ) returnstatement ) block ) functiondefinition
candidate: true if the transaction can buy tokens .
ref: Sale period start at StartBlock until the sale Start ( startSale ) .

419:
src: ( functiondefinition ( simplename buy core ) simplename buy core ( visibility private ) visibility private ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename lbdatasets event returns ) simplename lbdatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename strt ) simplename strt ) memberaccess ( simplename rnd gap ) simplename rnd gap ( tupleexpression ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( tupleexpression ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename core ) simplename core ( simplename r id ) simplename r id ( simplename p id ) simplename p id ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename aff id ) simplename aff id ( simplename team ) simplename team ( simplename event data ) simplename event data ) functioncall ) expressionstatement ) block ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename ended ) simplename ended ) memberaccess ( booleanliteral false ) booleanliteral false ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename ended ) simplename ended ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement
candidate: logic runs whenever a buy order is executed .
ref: logic runs whenever a buy order is executed .

420:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename pre validate purchase ) simplename pre validate purchase ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get token amount ) simplename get token amount ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens distributed ) simplename tokens distributed ( functioncall ( memberaccess ( simplename tokens distributed ) simplename tokens distributed ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename process purchase ) simplename process purchase ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename token purchase ) simplename token purchase ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ( simplename tokens ) simplename tokens ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename update purchasing state ) simplename update purchasing state ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename post validate purchase ) simplename post validate purchase ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: low level token purchase * * * DO NOT OVERRIDE .
ref: low level token purchase * * * DO NOT OVERRIDE .

421:
src: ( functiondefinition ( simplename generate tokens ) simplename generate tokens ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename apt ) simplename apt ( simplename generate tokens ) simplename generate tokens ) memberaccess ( simplename owner ) simplename owner ( simplename amount ) simplename amount ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only controller ) simplename only controller ) modifierinvocation ) functiondefinition
candidate: Generates _amount tokens that are assigned to _owner .
ref: Generates _amount tokens that are assigned to _owner .

422:
src: ( functiondefinition ( simplename set <UNK> ) simplename set <UNK> ( visibility public ) visibility public ( variabledeclaration ( simplename new address ) simplename new address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cs ) simplename cs ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename new address ) simplename new address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the address of the contract .
ref: Setup the interface to the Blocklord contract .

423:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename tokens ) simplename tokens ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> 1 2018 ts ) simplename <UNK> 1 2018 ts ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dec <UNK> 2018 ts ) simplename dec <UNK> 2018 ts ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> <UNK> <UNK> ts ) simplename <UNK> <UNK> <UNK> ts ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> 30 <UNK> ts ) simplename <UNK> 30 <UNK> ts ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> 2 <UNK> ts ) simplename <UNK> 2 <UNK> ts ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename whitelist all ) simplename whitelist all ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename <UNK> 1 2018 ts ) simplename <UNK> 1 2018 ts ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename air drop qty ) simplename air drop qty ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require )
candidate: Transfer the specified amount of tokens to the specified address .
ref: transfer token for a specified address .

424:
src: ( functiondefinition ( simplename validate url ) simplename validate url ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( variabledeclaration ( simplename url ) simplename url ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename url ) simplename url ) functioncall ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This is a private key .
ref: validates the url cannot be of <UNK> length .

425:
src: ( functiondefinition ( simplename buy the tokens ) simplename buy the tokens ( visibility default ) visibility default ( variabledeclaration ( simplename password ) simplename password ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( ifstatement ( simplename bought tokens ) simplename bought tokens ( returnstatement ) returnstatement ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename hash pwd ) simplename hash pwd ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename password ) simplename password ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename for votes ) simplename for votes ( simplename <UNK> votes ) simplename <UNK> votes ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename min required amount ) simplename min required amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename max amount ) simplename max amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename sale ) simplename sale ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bought tokens ) simplename bought tokens ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename contract eth value ) simplename contract eth value ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename sale ) simplename sale ( simplename transfer ) simplename transfer ) memberaccess ( simplename contract eth value ) simplename contract eth value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Buy the tokens .
ref: Buy the tokens .

426:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility private ) visibility private ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename to ) simplename to ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename team index to owner ) simplename team index to owner ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename from ) simplename from ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename team index to approved ) simplename team index to approved ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Assigns ownership of a specific team to an address .
ref: Assigns ownership of a specific Team to an address .

427:
src: ( functiondefinition ( simplename get config ) simplename get config ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename global daily dgx ng limit ) simplename global daily dgx ng limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename minimum purchase dgx ng ) simplename minimum purchase dgx ng ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename maximum block drift ) simplename maximum block drift ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payment collector ) simplename payment collector ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename global daily dgx ng limit ) simplename global daily dgx ng limit ( simplename minimum purchase dgx ng ) simplename minimum purchase dgx ng ( simplename maximum block drift ) simplename maximum block drift ( simplename payment collector ) simplename payment collector ) tupleexpression ( functioncall ( memberaccess ( functioncall ( simplename marketplace storage ) simplename marketplace storage ) functioncall ( simplename read config ) simplename read config ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: get total number of daily limit .
ref: get global marketplace configuration .

428:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to address ) simplename to address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( simplename only ambassadors ) simplename only ambassadors ( binaryoperation <= ) binaryoperation <= ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( functioncall ( simplename my dividends ) simplename my dividends ( booleanliteral true ) booleanliteral true ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ) functioncall ) expressionstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token fee ) simplename token fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename dividend fee ) simplename dividend fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taxed tokens ) simplename taxed tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename tokens to ethereum ) simplename tokens to ethereum ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token supply ) simplename token supply ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename token supply ) simplename token supply ( simplename token fee ) simplename token fee ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( simplename amount of tokens ) simplename amount of tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token balance
candidate: Transfer tokens from the caller to a new holder .
ref: Transfer tokens from the caller to a new holder .

429:
src: ( functiondefinition ( simplename mul ) simplename mul ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simplename c ) simplename c ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename a ) simplename a ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename c ) simplename c ( binaryoperation * ) binaryoperation * ( simplename a ) simplename a ( simplename b ) simplename b ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( binaryoperation / ) binaryoperation / ( simplename c ) simplename c ( simplename a ) simplename a ( simplename b ) simplename b ) functioncall ) expressionstatement ( returnstatement ( simplename c ) simplename c ) returnstatement ) block ) functiondefinition
candidate: Multiplies two numbers , throws on overflow .
ref: Multiplies two numbers , throws on overflow .

430:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename safe sub ) simplename safe sub ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename burn ) simplename burn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: true if tokens were created successfully , false otherwise .
ref: Makes the token unusable .

431:
src: ( modifierdefinition ( simplename admin only ) simplename admin only ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin address ) simplename admin address ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Access modifier for CEO-only functionality .
ref: count the player option uint private <UNK> ; uint private <UNK> ; .

432:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation < ) binaryoperation < ( simplename total supply ) simplename total supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ) block ) functiondefinition
candidate: Burn all remaining tokens .
ref: Burn all remaining tokens .

433:
src: ( functiondefinition ( simplename manually make oraclize call ) simplename manually make oraclize call ( visibility external ) visibility external ( variabledeclaration ( simplename week ) simplename week ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename delay ) simplename delay ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is random ) simplename is random ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is manual ) simplename is manual ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename status ) simplename status ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename paused ) simplename paused ( simplename status ) simplename status ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename week num str ) simplename week num str ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( functioncall ( simplename uint2str ) simplename uint2str ( simplename week ) simplename week ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename is random ) simplename is random ( booleanliteral true ) booleanliteral true ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename query ) simplename query ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename oraclize query ) simplename oraclize query ( simplename delay ) simplename delay ( stringliteral 「STR」 ) stringliteral 「STR」 ( functioncall ( simplename str concat ) simplename str concat ( simplename random str1 ) simplename random str1 ( simplename week num str ) simplename week num str ( simplename random str2 ) simplename random str2 ) functioncall ( simplename gas amt ) simplename gas amt ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename q id ) simplename q id ( simplename query ) simplename query ) indexaccess ( simplename week no ) simplename week no ) memberaccess ( simplename week ) simplename week ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename q id ) simplename q id ( simplename query ) simplename query ) indexaccess ( simplename is random ) simplename is random ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename q id ) simplename q id ( simplename query ) simplename query ) indexaccess ( simplename is manual ) simplename is manual ) memberaccess ( simplename is manual ) simplename is manual ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename query ) simplename query ( functioncall ( simplename oraclize query ) simplename oraclize query ( simplename delay ) simplename delay ( stringliteral 「STR」 ) stringliteral 「STR」 ( functioncall ( simplename str concat ) simplename str concat ( simplename api str1 ) simplename api str1 ( simplename week num str ) simplename week num str ( simplename api str2 ) simplename api str2 ) functioncall ( simplename gas amt ) simplename gas amt ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename q id ) simplename q id ( simplename query ) simplename query ) indexaccess ( simplename week no ) simplename week no ) memberaccess ( simplename week )
candidate: Return if there is a call , function , called from Oraclize when there are still with .
ref: Manually make an Oraclize API call , incase of automation failure .

434:
src: ( functiondefinition ( simplename get ) simplename get ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename shapes ) simplename shapes ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename colors primary ) simplename colors primary ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename colors secondary ) simplename colors secondary ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename positions ) simplename positions ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename avatar hash ) simplename avatar hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename avatar ) simplename avatar ( simpletype ( simplename avatar ) simplename avatar ) simpletype ) variabledeclaration ( functioncall ( simplename get avatar ) simplename get avatar ( simplename avatar hash ) simplename avatar hash ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename shapes ) simplename shapes ( memberaccess ( simplename avatar ) simplename avatar ( simplename shapes ) simplename shapes ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename colors primary ) simplename colors primary ( memberaccess ( simplename avatar ) simplename avatar ( simplename colors primary ) simplename colors primary ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename colors secondary ) simplename colors secondary ( memberaccess ( simplename avatar ) simplename avatar ( simplename colors secondary ) simplename colors secondary ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename positions ) simplename positions ( memberaccess ( simplename avatar ) simplename avatar ( simplename positions ) simplename positions ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: returns the amount of paid for the given address .
ref: Returns an avatar by it's hash .

435:
src: ( functiondefinition ( simplename set daily limit ) simplename set daily limit ( visibility external ) visibility external ( variabledeclaration ( simplename new limit ) simplename new limit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename m daily limit ) simplename m daily limit ( simplename new limit ) simplename new limit ) expressionstatement ) block ( modifierinvocation ( simplename onlymanyowners ) simplename onlymanyowners ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( memberaccess ( simplename abi ) simplename abi ( simplename encode packed ) simplename encode packed ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename data ) simplename data ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) functioncall ) modifierinvocation ) functiondefinition
candidate: ( re ) sets the daily limit .
ref: ( re ) sets the daily limit .

436:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename code length ) simplename code length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename code length ) simplename code length ( assemblycall ( simplename extcodesize ) simplename extcodesize ( simplename to ) simplename to ) assemblycall ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( ifstatement ( binaryoperation < ) binaryoperation < ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename value ) simplename value ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename verify option pool income ) simplename verify option pool income ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename verify option pool <UNK> ) simplename verify option pool <UNK> ( simplename to ) simplename to ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename code length ) simplename code length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename erc223 receiving contract ) simplename erc223 receiving contract ) simpletype ) variabledeclaration ( functioncall ( simplename erc223 receiving contract ) simplename erc223 receiving contract ( simplename to ) simplename to ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename receiver ) simplename receiver ( simplename token fallback ) simplename token fallback ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) expressionstatement ) block ) ifstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall
candidate: Transfer the specified amount of tokens to the specified address .
ref: Transfer the specified amount of tokens to the specified address .

437:
src: ( functiondefinition ( simplename <UNK> contract ) simplename <UNK> contract ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre ico is running ) simplename pre ico is running ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimal goal reached ) simplename minimal goal reached ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico exit is possible ) simplename ico exit is possible ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico is closed ) simplename ico is closed ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename token balance of ) simplename token balance of ( simplename this ) simplename this ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename owner ) simplename owner ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename supervisor ) simplename supervisor ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current token price ) simplename current token price ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre icoprice ) simplename pre icoprice ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename icoprice ) simplename icoprice ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sell price ) simplename sell price ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename buy commission ) simplename buy commission ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sell commission ) simplename sell commission ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename update prices ) simplename update prices ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Functions for the contract .
ref: Constructor of the contract .

438:
src: ( modifierdefinition ( simplename delay ) simplename delay ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename debug ) simplename debug ( booleanliteral false ) booleanliteral false ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename last rating ) simplename last rating ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( binaryoperation - ) binaryoperation - ( simplename now ) simplename now ( simplename wait time ) simplename wait time ( block ( expressionstatement ( functioncall ( simplename error ) simplename error ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier that requires the voter to have not .
ref: Delay ratings to be at least waitTime apart .

439:
src: ( functiondefinition ( simplename create affiliate ) simplename create affiliate ( visibility external ) visibility external ( variabledeclaration ( simplename code ) simplename code ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename commission ) simplename commission ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename pricecut ) simplename pricecut ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename affiliate address ) simplename affiliate address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename affiliate ) simplename affiliate ( simpletype ( simplename affiliates ) simplename affiliates ) simpletype ) variabledeclaration ( functioncall ( simplename affiliates ) simplename affiliates ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename affiliate address ) simplename affiliate address ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) simpletypeexpression ( simplename commission ) simplename commission ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) simpletypeexpression ( simplename pricecut ) simplename pricecut ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename add affiliate ) simplename add affiliate ( simplename code ) simplename code ( simplename affiliate ) simplename affiliate ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Create affiliate for message and send it .
ref: Creates and begins a new sale .

440:
src: ( functiondefinition ( simplename drain ) simplename drain ( visibility default ) visibility default ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename multisig ether ) simplename multisig ether ( simplename send ) simplename send ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to retrieve funds .
ref: Drain functions in case of unexpected issues with the smart contract .

441:
src: ( functiondefinition ( simplename set team and advisor and airdrop addresses ) simplename set team and advisor and airdrop addresses ( visibility public ) visibility public ( variabledeclaration ( simplename team reserve ) simplename team reserve ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename advisor reserve ) simplename advisor reserve ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename airdrop ) simplename airdrop ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename team reserve ) simplename team reserve ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation == ) binaryoperation == ( simplename advisor reserve ) simplename advisor reserve ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation == ) binaryoperation == ( simplename airdrop ) simplename airdrop ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename team reserve ) simplename team reserve ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation != ) binaryoperation != ( simplename advisor reserve ) simplename advisor reserve ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation != ) binaryoperation != ( simplename airdrop ) simplename airdrop ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename team reserve ) simplename team reserve ( simplename team reserve ) simplename team reserve ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename advisor reserve ) simplename advisor reserve ( simplename advisor reserve ) simplename advisor reserve ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename airdrop ) simplename airdrop ( simplename airdrop ) simplename airdrop ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: sets address and send tokens to team address and send them to team address .
ref: Set the address which should receive the vested team and advisors tokens plus airdrop shares on finalization .

442:
src: ( functiondefinition ( simplename <UNK> ) simplename <UNK> ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( block ( returnstatement ( conditional ( binaryoperation < ) binaryoperation < ( simplename x ) simplename x ( simplename y ) simplename y ( simplename x ) simplename x ( simplename y ) simplename y ) conditional ) returnstatement ) block ) functiondefinition
candidate: return the result of subtracting y from x , throwing an exception in case of overflow .
ref: return the lowest of two 64 bit integers .

443:
src: ( functiondefinition ( simplename owner set rate ) simplename owner set rate ( visibility public ) visibility public ( variabledeclaration ( simplename new rate ) simplename new rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( simplename new rate ) simplename new rate ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: set new owner .
ref: owner set new wallet .

444:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename min purchase return ) simplename min purchase return ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename formula contract ) simplename formula contract ( simplename calculate purchase return ) simplename calculate purchase return ) memberaccess ( binaryoperation - ) binaryoperation - ( tupleexpression ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ( simplename multiplier ) simplename multiplier ) tupleexpression ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ( binaryoperation - ) binaryoperation - ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename weight ) simplename weight ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename amount ) simplename amount ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename fee ) simplename fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ) tupleexpression ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename enabled ) simplename enabled ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename amount ) simplename amount ( simplename min purchase return ) simplename min purchase return ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename buy ) simplename buy ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename amount ) simplename amount ) functioncall ) emitstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Buy tokens with ether .
ref: Buy tokens with ether .

445:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility external ) visibility external ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename refunded amount ) simplename refunded amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename total invested amount of ) simplename total invested amount of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total remaining refund ) simplename total remaining refund ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename total loaded refund ) simplename total loaded refund ( simplename sub ) simplename sub ) memberaccess ( simplename total refunded amount ) simplename total refunded amount ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token revoked ) simplename token revoked ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename sale state ) simplename sale state ( simplename end sale ) simplename end sale ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is soft cap reached ) simplename is soft cap reached ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename total remaining refund ) simplename total remaining refund ( simplename refunded amount ) simplename refunded amount ( binaryoperation > ) binaryoperation > ( simplename refunded amount ) simplename refunded amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename total invested amount of ) simplename total invested amount of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total remaining tokens for sales ) simplename total remaining tokens for sales ( functioncall ( memberaccess ( simplename total remaining tokens for sales ) simplename total remaining tokens for sales ( simplename add ) simplename add ) memberaccess ( simplename token revoked ) simplename token revoked ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total refunded amount ) simplename total refunded amount ( functioncall ( memberaccess ( simplename total refunded amount ) simplename total refunded amount ( simplename add ) simplename add ) memberaccess ( simplename refunded amount ) simplename refunded amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename refunded amount ) simplename refunded amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename refund ) simplename refund ( memberaccess ( simplename
candidate: Allow load refunds back on the contract for the refunding .
ref: Investors can claim ether refund if total raised fund doesn't reach our softcap .

446:
src: ( functiondefinition ( simplename deliver tokens ) simplename deliver tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token amount ) simplename token amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename token amount ) simplename token amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token transfer ) simplename token transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename token amount ) simplename token amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Source of tokens .
ref: Forward the tokens from the contract to the beneficiary .

447:
src: ( functiondefinition ( simplename retrieve ) simplename retrieve ( visibility public ) visibility public ( variabledeclaration ( simplename who ) simplename who ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename retrieve finished ) simplename retrieve finished ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename who ) simplename who ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename who ) simplename who ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename who ) simplename who ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename who ) simplename who ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename retrieve ) simplename retrieve ( simplename who ) simplename who ( simplename value ) simplename value ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename who ) simplename who ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: Retrieve a specific amount of tokens .

448:
src: ( functiondefinition ( simplename get button price ) simplename get button price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename multiplier ) simplename multiplier ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename count presses ) simplename count presses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename multiplier ) simplename multiplier ( binaryoperation * ) binaryoperation * ( simplename button price step ) simplename button price step ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename count presses ) simplename count presses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename button price ) simplename button price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename button base price ) simplename button base price ( simplename multiplier ) simplename multiplier ) variabledeclarationstatement ( returnstatement ( tupleexpression ( simplename button price ) simplename button price ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Get current price for buy in _value number of tokens .
ref: This function returns the current price of the button according to the amount <UNK> .

449:
src: ( functiondefinition ( simplename pet on leaderboards ) simplename pet on leaderboards ( visibility external ) visibility external ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename pet id ) simplename pet id ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename pets on leaderboards ) simplename pets on leaderboards ( simplename pet id ) simplename pet id ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Returns if a kitty has been on .
ref: each pet can only be on ONE sponsored leaderboard at a time .

450:
src: ( functiondefinition ( simplename bonus ) simplename bonus ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount raised ) simplename amount raised ( block ( returnstatement ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ( returnstatement ( simplename amount ) simplename amount ) returnstatement ) block ) functiondefinition
candidate: Compute the bonus according to the investment period .
ref: Compute the <UNK> bonus according to the investment period .

451:
src: ( functiondefinition ( simplename token fallback exchange ) simplename token fallback exchange ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename price ) simplename price ) indexaccess ( simplename is open ) simplename is open ) memberaccess ( booleanliteral true ) booleanliteral true ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename price ) simplename price ) indexaccess ( simplename from ) simplename from ) indexaccess ( simplename stake ) simplename stake ) memberaccess ( functioncall ( memberaccess ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename price ) simplename price ) indexaccess ( simplename from ) simplename from ) indexaccess ( simplename stake ) simplename stake ) memberaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename price ) simplename price ) indexaccess ( simplename current nac ) simplename current nac ) memberaccess ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename price ) simplename price ) indexaccess ( simplename current nac ) simplename current nac ) memberaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update share holder ) simplename update share holder ( simplename from ) simplename from ( simplename price ) simplename price ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename price ) simplename price ) indexaccess ( simplename from ) simplename from ) indexaccess ( simplename stake ) simplename stake ) memberaccess ( simplename now ) simplename now ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only nami ) simplename only nami ) modifierinvocation ) functiondefinition
candidate: this is a standard function required for ERC223 compatibility .
ref: this function add stake of ShareHolder investor can execute this function during round open .

452:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename asset id ) simplename asset id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename asset id ) simplename asset id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pre sale item index to approved ) simplename pre sale item index to approved ( simplename asset id ) simplename asset id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename asset id ) simplename asset id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Grant another address the right to transfer token via takeOwnership ( ) and transferFrom ( ) .
ref: Grant another address the right to transfer token via takeOwnership ( ) and transferFrom ( ) .

453:
src: ( functiondefinition ( simplename escrow ) simplename escrow ( visibility internal ) visibility internal ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename transfer from ) simplename transfer from ( simplename owner ) simplename owner ( simplename this ) simplename this ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Escrows the NFT , assigning ownership to this contract .
ref: Escrows the ERC721 Token , assigning ownership to this contract .

454:
src: ( functiondefinition ( simplename check new owner args ) simplename check new owner args ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max ) simplename max ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename index ) simplename index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename log error msg ) simplename log error msg ( simplename index ) simplename index ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( simplename max ) simplename max ( block ( expressionstatement ( functioncall ( simplename log error msg ) simplename log error msg ( simplename length ) simplename length ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Validates arguments for fill function .
ref: Validates arguments for addOwner function .

455:
src: ( functiondefinition ( simplename safe transfer from ) simplename safe transfer from ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename safe transfer from ) simplename safe transfer from ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ( simplename data ) simplename data ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Safely transfers the ownership of a given token ID to another address .
ref: Transfers the ownership of an NFT from one address to another address .

456:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p3d ) simplename p3d ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename res ) simplename res ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename sub ) simplename sub ) memberaccess ( simplename win ) simplename win ) functioncall ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename com ) simplename com ) functioncall ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename gen ) simplename gen ) functioncall ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename p3d ) simplename p3d ) functioncall
candidate: ends the round .
ref: ends the round .

457:
src: ( functiondefinition ( simplename approve and call ) simplename approve and call ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename token <UNK> ) simplename token <UNK> ) simpletype ) variabledeclaration ( functioncall ( simplename token <UNK> ) simplename token <UNK> ( simplename spender ) simplename spender ) functioncall ) variabledeclarationstatement ( ifstatement ( functioncall ( simplename approve ) simplename approve ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( simplename spender ) simplename spender ( simplename receive approval ) simplename receive approval ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename this ) simplename this ( simplename extra data ) simplename extra data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Approves and then calls the receiving contract .
ref: Set allowance for other address and notify .

458:
src: ( functiondefinition ( simplename get <UNK> contract address ) simplename get <UNK> contract address ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( memberaccess ( simplename current app ) simplename current app ( simplename <UNK> contract entity ) simplename <UNK> contract entity ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Get the address of the contract address , used to calculate the current max cap .
ref: Get current <UNK> Contract address .

459:
src: ( functiondefinition ( simplename get share ) simplename get share ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename company id ) simplename company id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner address ) simplename owner address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cur price ) simplename cur price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename share id ) simplename share id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename share ) simplename share ( simpletype ( simplename share ) simplename share ) simpletype ) variabledeclaration ( indexaccess ( simplename shares ) simplename shares ( simplename share id ) simplename share id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename company id ) simplename company id ( memberaccess ( simplename share ) simplename share ( simplename company id ) simplename company id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner address ) simplename owner address ( memberaccess ( simplename share ) simplename share ( simplename owner address ) simplename owner address ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cur price ) simplename cur price ( memberaccess ( simplename share ) simplename share ( simplename cur price ) simplename cur price ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: This function will return only the owner of a share of a share .
ref: This function will return the details of a share .

460:
src: ( functiondefinition ( simplename <UNK> divident amount ) simplename <UNK> divident amount ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividend to send ) simplename dividend to send ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename <UNK> curr tx dividend ) simplename <UNK> curr tx dividend ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( simplename dividend to send ) simplename dividend to send ) returnstatement ) block ) functiondefinition
candidate: return the amount of wei that this contract has not yet been called .
ref: request to know how much dividend you can get .

461:
src: ( functiondefinition ( simplename assets count ) simplename assets count ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename holder ) simplename holder ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( memberaccess ( indexaccess ( simplename assets of ) simplename assets of ( simplename holder ) simplename holder ) indexaccess ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Returns asset count .
ref: Holder-centric getter functions .

462:
src: ( functiondefinition ( simplename finalize crowd sale ) simplename finalize crowd sale ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is crowd sale finalized ) simplename is crowd sale finalized ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename multisig ) simplename multisig ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename vault ) simplename vault ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename end ) simplename end ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename safe add ) simplename safe add ( simplename total supply ) simplename total supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename max token supply ) simplename max token supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assign tokens ) simplename assign tokens ( simplename multisig ) simplename multisig ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename safe add ) simplename safe add ( simplename total supply ) simplename total supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename max token supply ) simplename max token supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assign tokens ) simplename assign tokens ( simplename vault ) simplename vault ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is crowd sale finalized ) simplename is crowd sale finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename multisig ) simplename multisig ( simplename send ) simplename send ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Finalize the crowdsale .
ref: Finalize crowdsale and allocate tokens to multisig and vault .

463:
src: ( functiondefinition ( simplename create poll ) simplename create poll ( visibility external ) visibility external ( variabledeclaration ( simplename title ) simplename title ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename percentage ) simplename percentage ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename sha3 ) simplename sha3 ( simplename title ) simplename title ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename poll ) simplename poll ( simpletype ( simplename poll ) simplename poll ) simpletype ) variabledeclaration ( indexaccess ( simplename polls ) simplename polls ( simplename hash ) simplename hash ) indexaccess ) variabledeclarationstatement ( ifstatement ( memberaccess ( simplename poll ) simplename poll ( simplename exists ) simplename exists ) memberaccess ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation < ) binaryoperation < ( simplename percentage ) simplename percentage ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename percentage ) simplename percentage ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename exists ) simplename exists ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename title ) simplename title ) memberaccess ( simplename title ) simplename title ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename percentage ) simplename percentage ) memberaccess ( simplename percentage ) simplename percentage ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename hash rate ) simplename hash rate ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename approved ) simplename approved ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename approval block ) simplename approval block ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename approval hash rate ) simplename approval hash rate ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename poll ) simplename poll ( simplename approval total hash rate ) simplename approval total hash rate ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename log poll created ) simplename log poll created ( simplename hash ) simplename hash ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename onlymanyowners ) simplename onlymanyowners ( functioncall ( simplename sha3 ) simplename sha3 ( memberaccess ( simplename msg ) simplename msg ( simplename data ) simplename data ) memberaccess ) functioncall ) modifierinvocation ) functiondefinition
candidate: create a poll .
ref: Create a new poll .

464:
src: ( functiondefinition ( simplename get current <UNK> info ) simplename get current <UNK> info ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new price ) simplename new price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens sold ) simplename tokens sold ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( tupleexpression ( simplename max buy limit ) simplename max buy limit ( simplename rate per wei ) simplename rate per wei ( simplename tokens sold in this round ) simplename tokens sold in this round ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: return the current price of the token for one token .
ref: function to get this round information can only be called from owner wallet .

465:
src: ( functiondefinition ( simplename get entitled funds ) simplename get entitled funds ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename start time ) simplename start time ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename entitled amount ) simplename entitled amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename payment amount ) simplename payment amount ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename end time ) simplename end time ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( conditional ( simplename is terminated ) simplename is terminated ( simplename termination time ) simplename termination time ( simplename now ) simplename now ) conditional ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename end time ) simplename end time ( simplename sub ) simplename sub ) memberaccess ( simplename start time ) simplename start time ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename complete intervals ) simplename complete intervals ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename div ) simplename div ) memberaccess ( simplename payment interval ) simplename payment interval ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename entitled amount ) simplename entitled amount ( functioncall ( memberaccess ( simplename entitled amount ) simplename entitled amount ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename complete intervals ) simplename complete intervals ( simplename mul ) simplename mul ) memberaccess ( simplename payment amount ) simplename payment amount ) functioncall ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename entitled amount ) simplename entitled amount ( simplename sub ) simplename sub ) memberaccess ( simplename claimed funds ) simplename claimed funds ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Get the latest wei amount .
ref: Number of wei that payee is entitled to collect .

466:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename whales ) simplename whales ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

467:
src: ( functiondefinition ( simplename token fallback ) simplename token fallback ( visibility external ) visibility external ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename from ) simplename from ( functioncall ( memberaccess ( simplename abio token ) simplename abio token ( simplename owner ) simplename owner ) memberaccess ) functioncall ( binaryoperation == ) binaryoperation == ( simplename from ) simplename from ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename volume ) simplename volume ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename paused ) simplename paused ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename deadline ) simplename deadline ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( simplename length ) simplename length ) expressionstatement ( emitstatement ( functioncall ( simplename icostart ) simplename icostart ( simplename value ) simplename value ( simplename wei per abio ) simplename wei per abio ( simplename min investment ) simplename min investment ) functioncall ) emitstatement ) block ) functiondefinition
candidate: This function is called when the user or another contract wants to transfer funds .
ref: We implement tokenFallback in case someone decides to send us tokens or we want to increase ICO Volume .

468:
src: ( modifierdefinition ( simplename bancor network only ) simplename bancor network only ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bancor network ) simplename bancor network ( simpletype ( simplename ibancor network ) simplename ibancor network ) simpletype ) variabledeclaration ( functioncall ( simplename ibancor network ) simplename ibancor network ( functioncall ( memberaccess ( simplename registry ) simplename registry ( simplename address of ) simplename address of ) memberaccess ( memberaccess ( simplename contract ids ) simplename contract ids ( simplename bancor network ) simplename bancor network ) memberaccess ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename bancor network ) simplename bancor network ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: allows execution by the contract only .
ref: allows execution by the BancorNetwork contract only .

469:
src: ( modifierdefinition ( simplename valid purchase ) simplename valid purchase ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename crowdsale active ) simplename crowdsale active ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename minimum purchase in wei ) simplename minimum purchase in wei ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check if the crowdsale is active .
ref: transaction sanity test .

470:
src: ( functiondefinition ( simplename test funded ) simplename test funded ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename mul ) simplename mul ( simplename amount ) simplename amount ( functioncall ( simplename exchange rate ) simplename exchange rate ) functioncall ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename add ) simplename add ( simplename funded ) simplename funded ( simplename tokens ) simplename tokens ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Number of tokens the investor , duration of crowdfund active .
ref: unit test for calculate funded amount .

471:
src: ( functiondefinition ( simplename buy in ) simplename buy in ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( binaryoperation * ) binaryoperation * ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename rejected ) simplename rejected ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( simplename player pool ) simplename player pool ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename bought in ) simplename bought in ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename player pool ) simplename player pool ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename select winner ) simplename select winner ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( returnstatement ( memberaccess ( simplename player pool ) simplename player pool ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Accept given amount of Ether .
ref: only accepts a value of 0 . 01 ether .

472:
src: ( functiondefinition ( simplename execute funds transfer ) simplename execute funds transfer ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename buy ) simplename buy ( simpletype ( simplename order ) simplename order ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename sell ) simplename sell ( simpletype ( simplename order ) simplename order ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename calculate match price ) simplename calculate match price ( simplename buy ) simplename buy ( simplename sell ) simplename sell ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename sell ) simplename sell ( simplename fee recipient ) simplename fee recipient ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename sell ) simplename sell ( simplename taker fee ) simplename taker fee ) memberaccess ( memberaccess ( simplename buy ) simplename buy ( simplename taker fee ) simplename taker fee ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename charge fee ) simplename charge fee ( memberaccess ( simplename sell ) simplename sell ( simplename maker ) simplename maker ) memberaccess ( memberaccess ( simplename sell ) simplename sell ( simplename fee recipient ) simplename fee recipient ) memberaccess ( memberaccess ( simplename sell ) simplename sell ( simplename maker fee ) simplename maker fee ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename charge fee ) simplename charge fee ( memberaccess ( simplename buy ) simplename buy ( simplename maker ) simplename maker ) memberaccess ( memberaccess ( simplename sell ) simplename sell ( simplename fee recipient ) simplename fee recipient ) memberaccess ( memberaccess ( simplename sell ) simplename sell ( simplename taker fee ) simplename taker fee ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename buy ) simplename buy ( simplename taker fee ) simplename taker fee ) memberaccess ( memberaccess ( simplename sell ) simplename sell ( simplename taker fee ) simplename taker fee ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename charge fee ) simplename charge fee ( memberaccess ( simplename buy ) simplename buy ( simplename maker ) simplename maker ) memberaccess ( memberaccess ( simplename buy ) simplename buy ( simplename fee recipient ) simplename fee recipient ) memberaccess ( memberaccess ( simplename buy ) simplename buy ( simplename maker fee ) simplename maker fee ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename charge fee ) simplename charge fee ( memberaccess ( simplename sell ) simplename sell ( simplename maker ) simplename maker ) memberaccess ( memberaccess ( simplename buy ) simplename buy ( simplename fee recipient ) simplename fee recipient ) memberaccess ( memberaccess ( simplename buy ) simplename buy ( simplename taker fee ) simplename taker fee ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename
candidate: Execute all the order match ( fees and / state ) must purchase for the state .
ref: Execute all ERC20 token transfers associated with an order match ( fees and buyer seller transfer ) .

473:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename my dividends ) simplename my dividends ( booleanliteral false ) booleanliteral false ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename payouts to ) simplename payouts to ( simplename customer address ) simplename customer address ) indexaccess ( functioncall ( tupleexpression ( simpletypeexpression ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) simpletypeexpression ) tupleexpression ( binaryoperation * ) binaryoperation * ( simplename dividends ) simplename dividends ( simplename magnitude ) simplename magnitude ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename dividends ) simplename dividends ( indexaccess ( simplename referral balance ) simplename referral balance ( simplename customer address ) simplename customer address ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename referral balance ) simplename referral balance ( simplename customer address ) simplename customer address ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename customer address ) simplename customer address ( simplename transfer ) simplename transfer ) memberaccess ( simplename dividends ) simplename dividends ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename on withdraw ) simplename on withdraw ( simplename customer address ) simplename customer address ( simplename dividends ) simplename dividends ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename onlyhodler ) simplename onlyhodler ) modifierinvocation ) functiondefinition
candidate: Withdraws all of the callers earnings .
ref: Withdraws all of the callers earnings .

474:
src: ( functiondefinition ( simplename check tok dev ) simplename check tok dev ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation / ) binaryoperation / ( functioncall ( simplename check tok sold ) simplename check tok sold ) functioncall ( simplename dev ratio ) simplename dev ratio ) returnstatement ) block ) functiondefinition
candidate: Function to check the amount of tokens that are locked during the ICO .
ref: Function to get Dev Tokens issued during ICO .

475:
src: ( functiondefinition ( simplename update icostatus ) simplename update icostatus ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( functioncall ( simplename has ended ) simplename has ended ) functioncall ( binaryoperation == ) binaryoperation == ( simplename stage ) simplename stage ( memberaccess ( simplename stage ) simplename stage ( simplename publicsale ) simplename publicsale ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( functioncall ( simplename has ended ) simplename has ended ) functioncall ( binaryoperation >= ) binaryoperation >= ( simplename wei raised ) simplename wei raised ( simplename soft cap ) simplename soft cap ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename stage ) simplename stage ( memberaccess ( simplename stage ) simplename stage ( simplename success ) simplename success ) memberaccess ) expressionstatement ) block ( ifstatement ( functioncall ( simplename has ended ) simplename has ended ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename stage ) simplename stage ( memberaccess ( simplename stage ) simplename stage ( simplename failure ) simplename failure ) memberaccess ) expressionstatement ) block ) ifstatement ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to allow the contract owner to update the balance of the contract .
ref: Validate and update the crowdsale stage .

476:
src: ( functiondefinition ( simplename redeem token ) simplename redeem token ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename total supply ) simplename total supply ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename tokens ) simplename tokens ( binaryoperation >= ) binaryoperation >= ( simplename total supply ) simplename total supply ( simplename tokens ) simplename tokens ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename tokens ) simplename tokens ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total supply ) simplename total supply ( simplename tokens ) simplename tokens ) expressionstatement ( ifstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ( block ( expressionstatement ( functioncall ( simplename log redeem token ) simplename log redeem token ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ) block ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ) block ) functiondefinition
candidate: Allows user to redeem tokens .
ref: Converts token quantity defined by '_token' into ether and sends back to msg . sender .

477:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename x3 ddatasets event returns ) simplename x3 ddatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename x3 ddatasets event returns ) simplename x3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename pot ) simplename pot ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename xcom ) simplename xcom ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename xcom ) simplename xcom ) memberaccess ) functioncall
candidate: ends the round .
ref: ends the round .

478:
src: ( functiondefinition ( simplename tokens has sold out ) simplename tokens has sold out ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename get tokens left ) simplename get tokens left ) functioncall ( simplename leftover tokens buffer ) simplename leftover tokens buffer ( block ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Checks that a token has been sold .
ref: Getter functions for crowdsale parameters .

479:
src: ( functiondefinition ( simplename mint token ) simplename mint token ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename receipent ) simplename receipent ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename locked balances ) simplename locked balances ( simplename receipent ) simplename receipent ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename locked balances ) simplename locked balances ( simplename receipent ) simplename receipent ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only minter ) simplename only minter ) modifierinvocation ( modifierinvocation ( simplename max wan token amount not reached ) simplename max wan token amount not reached ( simplename amount ) simplename amount ) modifierinvocation ) functiondefinition
candidate: SeeleCrowdSale contract instance mint token .
ref: Contribution contract instance mint token .

480:
src: ( functiondefinition ( simplename deploy network ) simplename deploy network ( visibility public ) visibility public ( variabledeclaration ( simplename network address ) simplename network address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename network placeholder ) simplename network placeholder ( simplename change controller ) simplename change controller ) memberaccess ( simplename network address ) simplename network address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only finalized sale ) simplename only finalized sale ) modifierinvocation ( modifierinvocation ( simplename non zero address ) simplename non zero address ( simplename network address ) simplename network address ) modifierinvocation ( modifierinvocation ( simplename only ) simplename only ( simplename genaro dev multisig ) simplename genaro dev multisig ) modifierinvocation ) functiondefinition
candidate: Deploy all ERC20 compatible tokens .
ref: Deploy Genaro Network contract .

481:
src: ( functiondefinition ( simplename transfer private reserved uft ) simplename transfer private reserved uft ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename soft cap reached ) simplename soft cap reached ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename private reserved uft ) simplename private reserved uft ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from vault ) simplename transfer from vault ) memberaccess ( simplename token ) simplename token ( simplename beneficiary ) simplename beneficiary ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename private reserved uft ) simplename private reserved uft ( functioncall ( memberaccess ( simplename private reserved uft ) simplename private reserved uft ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: sets boundaries for incoming tx .
ref: Total Reserved from Private Sale <UNK> 4 , 000 , 000 UFT .

482:
src: ( functiondefinition ( simplename disapprove to sell ) simplename disapprove to sell ( visibility public ) visibility public ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename lottery ) simplename lottery ( simpletype ( simplename lottery ) simplename lottery ) simpletype ) variabledeclaration ( indexaccess ( simplename lotteries ) simplename lotteries ( binaryoperation - ) binaryoperation - ( simplename lottery count ) simplename lottery count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( memberaccess ( simplename lottery ) simplename lottery ( simplename owner token count to sell ) simplename owner token count to sell ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename token count ) simplename token count ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seller index ) simplename seller index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( memberaccess ( simplename lottery ) simplename lottery ( simplename seller id ) simplename seller id ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( memberaccess ( simplename lottery ) simplename lottery ( simplename selling amounts ) simplename selling amounts ) memberaccess ( simplename seller index ) simplename seller index ) indexaccess ( simplename token count ) simplename token count ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( memberaccess ( simplename lottery ) simplename lottery ( simplename owner token count to sell ) simplename owner token count to sell ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename token count ) simplename token count ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( memberaccess ( simplename lottery ) simplename lottery ( simplename token count to sell ) simplename token count to sell ) memberaccess ( simplename token count ) simplename token count ) expressionstatement ) block ) functiondefinition
candidate: Allow user to claim their tokens .
ref: Removes tokens from selling .

483:
src: ( functiondefinition ( simplename withdraw fund ) simplename withdraw fund ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename is finalized ) simplename is finalized ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename min funding goal reached ) simplename min funding goal reached ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token amount ) simplename token amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename wallet ) simplename wallet ( simplename token amount ) simplename token amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to withdraw funds if crowdsale is finalized .
ref: withdrow for manual distribution .

484:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename spender ) simplename spender ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Allow another contract to spend some tokens in your behalf .
ref: To approve another user to use your tokens .

485:
src: ( functiondefinition ( simplename distribute pre sold shares ) simplename distribute pre sold shares ( visibility default ) visibility default ( block ( ifstatement ( simplename pre sold shares distributed ) simplename pre sold shares distributed ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre sold shares distributed ) simplename pre sold shares distributed ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current supply ) simplename current supply ( binaryoperation * ) binaryoperation * ( tupleexpression ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( simplename atto ) simplename atto ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename ico address ) simplename ico address ) indexaccess ( functioncall ( memberaccess ( simplename initial supply ) simplename initial supply ( simplename sub ) simplename sub ) memberaccess ( simplename current supply ) simplename
candidate: Buy the tokens by sending ether .
ref: Some percentage of the tokens is already reserved by early employees and investors .

486:
src: ( functiondefinition ( simplename create app instance ) simplename create app instance ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename exec id ) simplename exec id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename version ) simplename version ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename app name ) simplename app name ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename init calldata ) simplename init calldata ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename app name ) simplename app name ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename init calldata ) simplename init calldata ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename exec id ) simplename exec id ( simplename version ) simplename version ) tupleexpression ( functioncall ( memberaccess ( functioncall ( simplename storage interface ) simplename storage interface ( simplename app storage ) simplename app storage ) functioncall ( simplename create instance ) simplename create instance ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename app name ) simplename app name ( simplename provider ) simplename provider ( simplename registry exec id ) simplename registry exec id ( simplename init calldata ) simplename init calldata ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename deployed by ) simplename deployed by ( simplename exec id ) simplename exec id ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename app instances ) simplename app instances ( simplename app name ) simplename app name ) indexaccess ( simplename push ) simplename push ) memberaccess ( simplename exec id ) simplename exec id ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename inst ) simplename inst ( simpletype ( simplename instance ) simplename instance ) simpletype ) variabledeclaration ( functioncall ( simplename instance ) simplename instance ( simplename provider ) simplename provider ( simplename registry exec id ) simplename registry exec id ( simplename exec id ) simplename exec id ( simplename app name ) simplename app name ( simplename version ) simplename version ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename instance info ) simplename instance info ( simplename exec id ) simplename exec id ) indexaccess ( simplename inst ) simplename inst ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename deployed instances ) simplename deployed instances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename push ) simplename push ) memberaccess ( simplename inst ) simplename inst ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename app instance created ) simplename app instance created ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename exec id ) simplename exec id
candidate: _value number of tokens and send it to the registry .
ref: exec_id : The execution id ( within the application's storage ) of the created application instance .

487:
src: ( functiondefinition ( simplename check prize ) simplename check prize ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename prize ) simplename prize ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename prize ) simplename prize ( indexaccess ( simplename prizes ) simplename prizes ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) expressionstatement ( returnstatement ( simplename prize ) simplename prize ) returnstatement ) block ) functiondefinition
candidate: Check how much prize ( in contract will be applied ) .
ref: <UNK> can check if there is some prize waiting for them .

488:
src: ( functiondefinition ( simplename get status ) simplename get status ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename <UNK> state ) simplename <UNK> state ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename is completed ) simplename is completed ( booleanliteral true ) booleanliteral true ( block ( returnstatement ( memberaccess ( simplename <UNK> state ) simplename <UNK> state ( simplename <UNK> ) simplename <UNK> ) memberaccess ) returnstatement ) block ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename date issue ) simplename date issue ( simplename expiry time ) simplename expiry time ) tupleexpression ( block ( returnstatement ( memberaccess ( simplename <UNK> state ) simplename <UNK> state ( simplename expired ) simplename expired ) memberaccess ) returnstatement ) block ( block ( returnstatement ( memberaccess ( simplename <UNK> state ) simplename <UNK> state ( simplename pending ) simplename pending ) memberaccess ) returnstatement ) block ) ifstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Get the status of an ICO .
ref: param1 <UNK> The state of license .

489:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename minting finished ) simplename minting finished ( booleanliteral true ) booleanliteral true ( binaryoperation == ) binaryoperation == ( simplename goal reached ) simplename goal reached ( booleanliteral false ) booleanliteral false ( binaryoperation == ) binaryoperation == ( simplename already minted once ) simplename already minted once ( booleanliteral true ) booleanliteral true ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename value of assets ) simplename value of assets ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename value of assets ) simplename value of assets ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: Allows owner to get back if minimum goal was not reached .
ref: Function refunds contributors if ICO was unsuccesful .

490:
src: ( functiondefinition ( simplename funds of ) simplename funds of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename funds ) simplename funds ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename funds ) simplename funds ( indexaccess ( simplename library index to funds ) simplename library index to funds ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) functiondefinition
candidate: returns the funds of this token .
ref: <UNK> The funds availale for a fo .

491:
src: ( functiondefinition ( simplename close assignments if open ) simplename close assignments if open ( visibility internal ) visibility internal ( block ( ifstatement ( simplename assignments closed ) simplename assignments closed ( block ( returnstatement ) returnstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename assignments closed ) simplename assignments closed ( booleanliteral true ) booleanliteral true ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total tokens target ) simplename total tokens target ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename total unrestricted tokens ) simplename total unrestricted tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename restricted share ) simplename restricted share ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total tokens existing ) simplename total tokens existing ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename total restricted tokens ) simplename total restricted tokens ( simplename total unrestricted tokens ) simplename total unrestricted tokens ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total burn ) simplename total burn ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename total tokens existing ) simplename total tokens existing ( simplename total tokens target ) simplename total tokens target ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total burn ) simplename total burn ( binaryoperation - ) binaryoperation - ( simplename total tokens existing ) simplename total tokens existing ( simplename total tokens target ) simplename total tokens target ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename burn mult nom ) simplename burn mult nom ( simplename total burn ) simplename total burn ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename burn mult den ) simplename burn mult den ( simplename total restricted tokens ) simplename total restricted tokens ) expressionstatement ) block ) functiondefinition
candidate: Called by the Standard Token upon creation .
ref: Close future assignments .

492:
src: ( functiondefinition ( simplename split ) simplename split ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename to ) simplename to ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename val ) simplename val ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename to ) simplename to ( simplename i ) simplename i ) indexaccess ( simplename send ) simplename send ) memberaccess ( simplename val ) simplename val ) functioncall ) expressionstatement ) block ) forstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: split function allows users to get their money from the contract .
ref: Split <UNK> among addresses , no safemath is needed for <UNK> .

493:
src: ( functiondefinition ( simplename unset erc777 ) simplename unset erc777 ( visibility public ) visibility public ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename is erc777 ) simplename is erc777 ( simplename token ) simplename token ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Only the owner of the token .
ref: <UNK> a token as an ERC777 token .

494:
src: ( functiondefinition ( simplename check lock ) simplename check lock ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename locked ) simplename locked ( simplename from ) simplename from ) indexaccess ( simplename locked amount ) simplename locked amount ) memberaccess ( simplename minimum lock amount ) simplename minimum lock amount ( block ( returnstatement ( functioncall ( simplename mint bonus ) simplename mint bonus ( simplename from ) simplename from ( memberaccess ( indexaccess ( simplename locked ) simplename locked ( simplename from ) simplename from ) indexaccess ( simplename locked amount ) simplename locked amount ) memberaccess ) functioncall ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: Function to check if locked amount is locked .
ref: Used by lock , <UNK> and unlock functions .

495:
src: ( functiondefinition ( simplename distribute internal ) simplename distribute internal ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename exit scamsdatasets event returns ) simplename exit scamsdatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys ) simplename keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename exit scamsdatasets event returns ) simplename exit scamsdatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename fees ) simplename fees ( simplename team ) simplename team ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename air ) simplename air ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename air drop pot ) simplename air drop pot ( functioncall ( memberaccess ( simplename air drop pot ) simplename air drop pot ( simplename add ) simplename add ) memberaccess ( simplename air ) simplename air ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename eth ) simplename eth ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename sub ) simplename sub ) memberaccess ( tupleexpression ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename sub ) simplename sub ) memberaccess ( simplename gen ) simplename gen ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dust ) simplename dust ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename update masks ) simplename update masks ( simplename r id ) simplename r id ( simplename p id ) simplename p id ( simplename gen ) simplename gen ( simplename keys ) simplename keys ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename dust ) simplename dust ( numberliteral 「NUM」 )
candidate: distributes eth based on fees to gen and pot .
ref: distributes eth based on fees to gen and pot .

496:
src: ( functiondefinition ( simplename add identities ) simplename add identities ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename thing index ) simplename thing index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ids ) simplename ids ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( booleanliteral false ) booleanliteral false ( functioncall ( simplename rewire identities ) simplename rewire identities ( simplename ids ) simplename ids ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename thing index ) simplename thing index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( memberaccess ( indexaccess ( simplename things ) simplename things ( simplename thing index ) simplename thing index ) indexaccess ( simplename identities ) simplename identities ) memberaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename things ) simplename things ( simplename thing index ) simplename thing index ) indexaccess ( simplename identities ) simplename identities ) memberaccess ( simplename ids ) simplename ids ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cell ) simplename cell ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( memberaccess ( memberaccess ( indexaccess ( simplename things ) simplename things ( simplename thing index ) simplename thing index ) indexaccess ( simplename identities ) simplename identities ) memberaccess ( simplename length ) simplename length ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( memberaccess ( indexaccess ( simplename things ) simplename things ( simplename thing index ) simplename thing index ) indexaccess ( simplename identities ) simplename identities ) memberaccess ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename ids ) simplename ids ( simplename length ) simplename length ) memberaccess ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename k ) simplename k ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename k ) simplename k ( memberaccess ( simplename ids ) simplename ids ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename k ) simplename k ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename things ) simplename things ( simplename thing index ) simplename thing index ) indexaccess ( simplename identities ) simplename identities ) memberaccess ( unaryoperation ++ ) unaryoperation ++ ( simplename cell ) simplename cell ) indexaccess ( indexaccess ( simplename ids ) simplename ids ( simplename k ) simplename k ) indexaccess ) expressionstatement ) block ) forstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Add a new identity .
ref: Add Identities to already existing Thing .

497:
src: ( functiondefinition ( simplename deposit tokens ) simplename deposit tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount tokens ) simplename amount tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename amount tokens ) simplename amount tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename investors ) simplename investors ( simplename beneficiary ) simplename beneficiary ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename investor count ) simplename investor count ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename investors ) simplename investors ( simplename beneficiary ) simplename beneficiary ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename investors ) simplename investors ( simplename beneficiary ) simplename beneficiary ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount tokens ) simplename amount tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename mintable fida ) simplename mintable fida ( simplename send bought tokens ) simplename send bought tokens ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename amount tokens ) simplename amount tokens ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal function for handling tokens during stage three .
ref: Internal function for depositing tokens after they had been bought .

498:
src: ( functiondefinition ( simplename check for received tokens ) simplename check for received tokens ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( functioncall ( simplename get token balance ) simplename get token balance ) functioncall ( simplename internal balance ) simplename internal balance ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename received funds ) simplename received funds ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename get token balance ) simplename get token balance ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename internal balance ) simplename internal balance ) functioncall ) variabledeclarationstatement ( ifstatement ( simplename can receive tokens ) simplename can receive tokens ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount locked in vestings ) simplename amount locked in vestings ( functioncall ( memberaccess ( simplename amount locked in vestings ) simplename amount locked in vestings ( simplename add ) simplename add ) memberaccess ( simplename received funds ) simplename received funds ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename internal balance ) simplename internal balance ( functioncall ( simplename get token balance ) simplename get token balance ) functioncall ) expressionstatement ) block ( block ( emitstatement ( functioncall ( simplename not allowed tokens received ) simplename not allowed tokens received ( simplename received funds ) simplename received funds ) functioncall ) emitstatement ) block ) ifstatement ( emitstatement ( functioncall ( simplename tokens received since last check ) simplename tokens received since last check ( simplename received funds ) simplename received funds ) functioncall ) emitstatement ) block ( block ( emitstatement ( functioncall ( simplename tokens received since last check ) simplename tokens received since last check ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fallback triggered ) simplename fallback triggered ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) functiondefinition
candidate: Internal check for received if you sold X keys .
ref: check for changes in balance in order to track amount of locked tokens .

499:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( emitstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename amount ) simplename amount ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Sets approved amount of tokens for spender .
ref: set allowance for someone to spend tokens from your address .

500:
src: ( functiondefinition ( simplename release vesting ) simplename release vesting ( visibility external ) visibility external ( variabledeclaration ( simplename vesting contract ) simplename vesting contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename vesting exists ) simplename vesting exists ( simplename vesting contract ) simplename vesting contract ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( indexaccess ( simplename address to vesting struct ) simplename address to vesting struct ( simplename vesting contract ) simplename vesting contract ) indexaccess ( simplename beneficiary ) simplename beneficiary ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename moderator ) simplename moderator ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename token vesting interface ) simplename token vesting interface ( simplename vesting contract ) simplename vesting contract ) functioncall ( simplename release ) simplename release ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Function to release vesting schedule entry that will vest for a given user .
ref: releases funds to beneficiary .

501:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( simplename up ) simplename up ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename bonus ) simplename bonus ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( binaryoperation + ) binaryoperation + ( simplename std balance ) simplename std balance ( indexaccess ( simplename bonus ) simplename bonus ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) returnstatement ) block ( block ( returnstatement ( simplename std balance ) simplename std balance ) returnstatement ) block ) ifstatement ) block ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Token holder balance .
ref: Everyone has tokens ! . . .

502:
src: ( functiondefinition ( simplename unlock for development ) simplename unlock for development ( visibility external ) visibility external ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename unlocked block for dev ) simplename unlocked block for dev ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( simplename unlocked all tokens for dev ) simplename unlocked all tokens for dev ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename unlocked all tokens for dev ) simplename unlocked all tokens for dev ( booleanliteral true ) booleanliteral true ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total balance ) simplename total balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename bcdc token ) simplename bcdc token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename development tokens ) simplename development tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe div ) simplename safe div ( functioncall ( simplename safe mul ) simplename safe mul ( simplename total balance ) simplename total balance ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename bcdc token ) simplename bcdc token ( simplename transfer ) simplename transfer ) memberaccess ( simplename bcdc multisig ) simplename bcdc multisig ( simplename development tokens ) simplename development tokens ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ) block ) functiondefinition
candidate: To call to enable the transfers of the team .
ref: Transfer Development Team Tokens To MultiSigWallet - 30 Days Locked .

503:
src: ( functiondefinition ( simplename take ownership ) simplename take ownership ( visibility public ) visibility public ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old owner ) simplename old owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename country index to owner ) simplename country index to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename new owner ) simplename new owner ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename approved ) simplename approved ( simplename new owner ) simplename new owner ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename old owner ) simplename old owner ( simplename new owner ) simplename new owner ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allow pre-approved user to take ownership of a token .
ref: Allow pre-approved user to take ownership of a token .

504:
src: ( functiondefinition ( simplename create canvas ) simplename create canvas ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename canvas id ) simplename canvas id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename canvases ) simplename canvases ( simplename length ) simplename length ) memberaccess ( simplename max canvas count ) simplename max canvas count ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename active canvas count ) simplename active canvas count ( simplename max active canvas ) simplename max active canvas ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename canvases ) simplename canvases ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename canvas ) simplename canvas ( simplename state not finished ) simplename state not finished ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( booleanliteral false ) booleanliteral false ) functioncall ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( emitstatement ( functioncall ( simplename canvas created ) simplename canvas created ( simplename id ) simplename id ) functioncall ) emitstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename active canvas count ) simplename active canvas count ) expressionstatement ( returnstatement ( simplename id ) simplename id ) returnstatement ) block ) functiondefinition
candidate: Create a new canvas .
ref: Creates new canvas .

505:
src: ( functiondefinition ( simplename can trade ) simplename can trade ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addresses ) simplename addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename values ) simplename values ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename signature ) simplename signature ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename order ) simplename order ( simpletype ( simplename order library order ) simplename order library order ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename order library ) simplename order library ( simplename create order ) simplename create order ) memberaccess ( simplename addresses ) simplename addresses ( simplename values ) simplename values ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename order ) simplename order ( simplename hash ) simplename hash ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename can trade ) simplename can trade ( simplename order ) simplename order ( simplename signature ) simplename signature ( simplename hash ) simplename hash ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Helper function to return a min betwen the two uints .
ref: Checks if a order can be traded .

506:
src: ( functiondefinition ( simplename get token amount ) simplename get token amount ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Override to extend the way in which ether is converted to tokens .
ref: Override to extend the way in which ether is converted to tokens .

507:
src: ( functiondefinition ( simplename error ) simplename error ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename error code ) simplename error code ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename message ) simplename message ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename <UNK> emitter ) simplename <UNK> emitter ( simplename events history ) simplename events history ) functioncall ( simplename emit error ) simplename emit error ) memberaccess ( simplename message ) simplename message ) functioncall ) expressionstatement ( returnstatement ( simplename error code ) simplename error code ) returnstatement ) block ) functiondefinition
candidate: Emits Error event with specified error message .
ref: Emits Error event with specified error message .

508:
src: ( functiondefinition ( simplename claim ) simplename claim ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( functioncall ( simplename current block ) simplename current block ) functioncall ( simplename funding end block ) simplename funding end block ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename erc20 token ) simplename erc20 token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename third release ) simplename third release ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename second release ) simplename second release ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename first release ) simplename first release ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename init claim ) simplename init claim ( simplename balance ) simplename balance ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This method can be used by the controller to extract mistakenly sent tokens to this contract .
ref: in total 40 of <UNK> tokens will be sent to this contract .

509:
src: ( functiondefinition ( simplename set minimum hydro stakes ) simplename set minimum hydro stakes ( visibility public ) visibility public ( variabledeclaration ( simplename new minimum hydro stake user ) simplename new minimum hydro stake user ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new minimum hydro stake delegated user ) simplename new minimum hydro stake delegated user ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hydro ) simplename hydro ( simpletype ( simplename erc20 basic ) simplename erc20 basic ) simpletype ) variabledeclaration ( functioncall ( simplename erc20 basic ) simplename erc20 basic ( simplename hydro token address ) simplename hydro token address ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename new minimum hydro stake user ) simplename new minimum hydro stake user ( tupleexpression ( binaryoperation / ) binaryoperation / ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename hydro ) simplename hydro ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename new minimum hydro stake delegated user ) simplename new minimum hydro stake delegated user ( tupleexpression ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename hydro ) simplename hydro ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimum hydro stake user ) simplename minimum hydro stake user ( simplename new minimum hydro stake user ) simplename new minimum hydro stake user ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimum hydro stake delegated user ) simplename minimum hydro stake delegated user ( simplename new minimum hydro stake delegated user ) simplename new minimum hydro stake delegated user ) expressionstatement ) block ) functiondefinition
candidate: Allows the Hydro API to set minimum for Allows the Hydro API to set minimum .
ref: Allows the Hydro API to set minimum hydro balances required for sign ups .

510:
src: ( functiondefinition ( simplename set rate for round ) simplename set rate for round ( visibility public ) visibility public ( variabledeclaration ( simplename round ) simplename round ( simpletype ( simplename sale rounds ) simplename sale rounds ) simpletype ) variabledeclaration ( variabledeclaration ( simplename rate ) simplename rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename round ) simplename round ( simplename round ) simplename round ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round infos ) simplename round infos ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename round ) simplename round ) functioncall ) indexaccess ( simplename rate ) simplename rate ) memberaccess ( conditional ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( simplename base <UNK> to eth rate ) simplename base <UNK> to eth rate ( simplename rate ) simplename rate ) conditional ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename at stage ) simplename at stage ( memberaccess ( simplename stages ) simplename stages ( simplename set up ) simplename set up ) memberaccess ) modifierinvocation ) functiondefinition
candidate: Set current round rate .
ref: Set <UNK> to Ether rate for round .

511:
src: ( functiondefinition ( simplename total transfers in schedule ) simplename total transfers in schedule ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename contributors ) simplename contributors ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename contributors ) simplename contributors ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename contributors ) simplename contributors ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cid ) simplename cid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename contributors ) simplename contributors ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename schedules ) simplename schedules ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename schedules ) simplename schedules ( simplename cid ) simplename cid ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename j ) simplename j ( memberaccess ( simplename schedules ) simplename schedules ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename j ) simplename j ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sid ) simplename sid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename schedules ) simplename schedules ( simplename j ) simplename j ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename timestamp ) simplename timestamp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( memberaccess ( indexaccess ( simplename schedule chains ) simplename schedule chains ( simplename cid ) simplename cid ) indexaccess ( simplename nodes ) simplename nodes ) memberaccess ( simplename sid ) simplename sid ) indexaccess ( simplename timestamp ) simplename timestamp ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename timestamp ) simplename timestamp ( simplename now ) simplename now ( block ( expressionstatement
candidate: Get total number of tokens for a given address .
ref: Is there any transfer in schedule .

512:
src: ( modifierdefinition ( simplename owner only ) simplename owner only ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename owner ) simplename owner ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the owner .
ref: Only the contract owner can call these methods .

513:
src: ( functiondefinition ( simplename claim tokens ) simplename claim tokens ( visibility external ) visibility external ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: in case of a failed refund or win send .
ref: Claim some of tokens stored on the contract .

514:
src: ( modifierdefinition ( simplename cap was not reached ) simplename cap was not reached ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename tokens minted during pre ico ) simplename tokens minted during pre ico ( indexaccess ( simplename tokens hold map ) simplename tokens hold map ( simplename address ) simplename address ) indexaccess ) functioncall ( simplename tokens hard cap ) simplename tokens hard cap ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Check if the specified address was not available .
ref: Throws if preICO hard cap will be exceeded after minting .

515:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balances ) simplename previous balances ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename previous balances ) simplename previous balances ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename transfer allowed ) simplename transfer allowed ( simplename from ) simplename from ) modifierinvocation ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

516:
src: ( functiondefinition ( simplename process transaction ) simplename process transaction ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename txn ) simplename txn ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tx hash ) simplename tx hash ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename btcaddr ) simplename btcaddr ( simpletype ( simplename bytes20 ) simplename bytes20 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename value sent ) simplename value sent ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename is valid ) simplename is valid ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current state ) simplename current state ( simpletype ( simplename icosale state ) simplename icosale state ) simpletype ) variabledeclaration ( functioncall ( simplename get state funding ) simplename get state funding ) functioncall ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename transactions claimed ) simplename transactions claimed ( simplename tx hash ) simplename tx hash ) indexaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename a ) simplename a ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ) variabledeclaration ( functioncall ( memberaccess ( simplename btc ) simplename btc ( simplename check value sent ) simplename check value sent ) memberaccess ( simplename txn ) simplename txn ( simplename btcaddr ) simplename btcaddr ( simplename value to be sent ) simplename value to be sent ) functioncall ) variabledeclarationstatement ( ifstatement ( simplename a ) simplename a ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename value sent ) simplename value sent ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename transactions claimed ) simplename transactions claimed ( simplename tx hash ) simplename tx hash ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename allott tokens btc ) simplename allott tokens btc ( simplename addr ) simplename addr ( simplename b ) simplename b ( simplename current state ) simplename current state ) functioncall ) expressionstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Return the transaction , status of a transaction .
ref: Token distribution for the case of the ICO function to run when the transaction has been veified .

517:
src: ( functiondefinition ( simplename participate ) simplename participate ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename recipient ) simplename recipient ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei already participated ) simplename wei already participated ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename participation history ) simplename participation history ( simplename recipient ) simplename recipient ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename participation cap ) simplename participation cap ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename min256 ) simplename min256 ) memberaccess ( indexaccess ( simplename participation caps ) simplename participation caps ( simplename recipient ) simplename recipient ) indexaccess ( simplename hard participation cap ) simplename hard participation cap ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename capped wei received ) simplename capped wei received ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename min256 ) simplename min256 ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( functioncall ( memberaccess ( simplename participation cap ) simplename participation cap ( simplename sub ) simplename sub ) memberaccess ( simplename wei already participated ) simplename wei already participated ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename capped wei received ) simplename capped wei received ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens left in sale ) simplename tokens left in sale ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename max tokens sold ) simplename max tokens sold ( simplename sub ) simplename sub ) memberaccess ( simplename tokens sold ) simplename tokens sold ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei left in sale ) simplename wei left in sale ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens left in sale ) simplename tokens left in sale ( simplename div ) simplename div ) memberaccess ( simplename cln per eth ) simplename cln per eth ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei to participate ) simplename wei to participate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename min256 ) simplename min256 ) memberaccess ( simplename capped wei received ) simplename capped wei received ( simplename wei left in sale ) simplename wei left in sale ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename participation history ) simplename
candidate: adds msg . sender .
ref: Create and sell tokens to the caller .

518:
src: ( functiondefinition ( simplename update purchasing state ) simplename update purchasing state ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename update purchasing state ) simplename update purchasing state ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename purchased tokens ) simplename purchased tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get token amount ) simplename get token amount ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens raised ) simplename tokens raised ( functioncall ( memberaccess ( simplename tokens raised ) simplename tokens raised ( simplename add ) simplename add ) memberaccess ( simplename purchased tokens ) simplename purchased tokens ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename cap reached ) simplename cap reached ) functioncall ( block ( emitstatement ( functioncall ( simplename cap overflow ) simplename cap overflow ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ( simplename purchased tokens ) simplename purchased tokens ) functioncall ) emitstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Internal function to update the tokens based on the off the contribution .
ref: Update the amount of tokens raised emit cap overflow events .

519:
src: ( functiondefinition ( simplename token fallback ) simplename token fallback ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename date end ) simplename date end ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename accepted tokens ) simplename accepted tokens ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename value ) simplename value ( indexaccess ( simplename accepted tokens values ) simplename accepted tokens values ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename proposal idx ) simplename proposal idx ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename parse int ) simplename parse int ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is valid proposal ) simplename is valid proposal ( simplename proposal idx ) simplename proposal idx ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is address not voted ) simplename is address not voted ( simplename from ) simplename from ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename weight ) simplename weight ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename value ) simplename value ( simplename div ) simplename div ) memberaccess ( indexaccess ( simplename accepted tokens values ) simplename accepted tokens values ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename votes ) simplename votes ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename vote ) simplename vote ( simplename proposal idx ) simplename proposal idx ( simplename value ) simplename value ( simplename weight ) simplename weight ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename voters ) simplename voters ( simplename push ) simplename push ) memberaccess ( simplename from ) simplename from ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename proposals weights ) simplename proposals weights ( simplename proposal idx ) simplename proposal idx ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename
candidate: called by customer or not the msg . sender .
ref: Executes automatically when user transfer his token to this contract address .

520:
src: ( functiondefinition ( simplename set signer ) simplename set signer ( visibility default ) visibility default ( variabledeclaration ( simplename signer address ) simplename signer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename signer ) simplename signer ( simplename signer address ) simplename signer address ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: This function can set the server side address .
ref: allows the owner to change the signer address .

521:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: A contract attempts to get the coins .
ref: A contract attempts to get the coins .

522:
src: ( functiondefinition ( simplename forbid direct debit ) simplename forbid direct debit ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename direct debit allowances ) simplename direct debit allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) functiondefinition
candidate: Allow the contract to only allow the sender to do a user .
ref: Forbid the master to withdraw Beercoins from you account .

523:
src: ( functiondefinition ( simplename update batch support ) simplename update batch support ( visibility public ) visibility public ( variabledeclaration ( simplename flag ) simplename flag ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is batch supported ) simplename is batch supported ( simplename flag ) simplename flag ) expressionstatement ) block ( modifierinvocation ( simplename only game manager ) simplename only game manager ) modifierinvocation ) functiondefinition
candidate: Add or remove game to whitelist .
ref: Helps to toggle batch supported flag .

524:
src: ( functiondefinition ( simplename batch ) simplename batch ( visibility public ) visibility public ( variabledeclaration ( simplename data ) simplename data ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename data ) simplename data ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename amount ) simplename amount ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename data ) simplename data ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename transfer ) simplename transfer ) memberaccess ( indexaccess ( simplename data ) simplename data ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename amount ) simplename amount ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: This is used to batch transfer tokens to multiple addresses .
ref: This is an especial function to make massive tokens assignments .

525:
src: ( modifierdefinition ( simplename before sale ends ) simplename before sale ends ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename end time ) simplename end time ( binaryoperation < ) binaryoperation < ( simplename funds raised ) simplename funds raised ( simplename hard cap ) simplename hard cap ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to ensure it is before the crowdsale starts .
ref: Modifier to make a function callable only during the sale .

526:
src: ( functiondefinition ( simplename update <UNK> func ) simplename update <UNK> func ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount of <UNK> ) simplename amount of <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total <UNK> ) simplename total <UNK> ( functioncall ( memberaccess ( simplename total <UNK> ) simplename total <UNK> ( simplename sub ) simplename sub ) memberaccess ( simplename amount of <UNK> ) simplename amount of <UNK> ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total <UNK> ) simplename total <UNK> ( simplename amount of <UNK> ) simplename amount of <UNK> ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename total <UNK> ) simplename total <UNK> ( simplename total <UNK> ) simplename total <UNK> ( binaryoperation > ) binaryoperation > ( simplename total <UNK> ) simplename total <UNK> ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance safe ) simplename balance safe ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount of <UNK> ) simplename amount of <UNK> ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( simplename balance safe ) simplename balance safe ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance safe ) simplename balance safe ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance div ) simplename balance div ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount of <UNK> ) simplename amount of <UNK> ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename balance div ) simplename balance div ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total <UNK> ) simplename total <UNK> ( functioncall ( memberaccess ( simplename total <UNK> ) simplename total <UNK> ( simplename add ) simplename add ) memberaccess ( simplename amount of <UNK> ) simplename amount of <UNK> ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total <UNK> ) simplename total <UNK> ( simplename amount of <UNK> ) simplename amount of <UNK> ) expressionstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Update state of one token .
ref: Function for updating the balance and double checks allocated EDU tokens .

527:
src: ( modifierdefinition ( simplename only owner or crowdsale ) simplename only owner or crowdsale ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename crowdsale ) simplename crowdsale ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the owner or the crowdsale .
ref: For the crowsale closing function .

528:
src: ( functiondefinition ( simplename init game ) simplename init game ( visibility public ) visibility public ( variabledeclaration ( simplename player ) simplename player ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename deck ) simplename deck ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename srv seed ) simplename srv seed ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename c seed ) simplename c seed ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename value ) simplename value ( simplename minimum bet ) simplename minimum bet ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename maximum bet ) simplename maximum bet ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename over ) simplename over ( simplename srv seed ) simplename srv seed ) indexaccess ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename bets ) simplename bets ( simplename srv seed ) simplename srv seed ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename bets ) simplename bets ( simplename srv seed ) simplename srv seed ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename call ) simplename call ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) simpletypeexpression ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) functioncall ( simplename player ) simplename player ( simplename value ) simplename value ( booleanliteral false ) booleanliteral false ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename new game ) simplename new game ( simplename srv seed ) simplename srv seed ( simplename deck ) simplename deck ( simplename c seed ) simplename c seed ( simplename player ) simplename player ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only authorized ) simplename only authorized ) modifierinvocation ) functiondefinition
candidate: Initialize a game with the player .
ref: initializes a round of blackjack .

529:
src: ( modifierdefinition ( simplename only once ) simplename only once ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename <UNK> attempts ) simplename <UNK> attempts ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check if not yet .
ref: modifier to limit the number of times a function can be called to once .

530:
src: ( functiondefinition ( simplename buy price ) simplename buy price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token supply ) simplename token supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( binaryoperation + ) binaryoperation + ( simplename token price initial ) simplename token price initial ( simplename token price incremental ) simplename token price incremental ) returnstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ethereum ) simplename ethereum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename tokens to ethereum ) simplename tokens to ethereum ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename ethereum ) simplename ethereum ( simplename dividend fee ) simplename dividend fee ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename jackpot payout ) simplename jackpot payout ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename ethereum ) simplename ethereum ( simplename jackpot fee ) simplename jackpot fee ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taxed ethereum ) simplename taxed ethereum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename ethereum ) simplename ethereum ( simplename dividends ) simplename dividends ) functioncall ( simplename jackpot payout ) simplename jackpot payout ) functioncall ) variabledeclarationstatement ( returnstatement ( simplename taxed ethereum ) simplename taxed ethereum ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Return the sell price of 1 individual token .
ref: Return the sell price of 1 individual token .

531:
src: ( functiondefinition ( simplename bid ) simplename bid ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename bid amount ) simplename bid amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename sale ) simplename sale ( simpletype ( simplename sale ) simplename sale ) simpletype ) variabledeclaration ( indexaccess ( simplename token id to sale ) simplename token id to sale ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename token ids store ) simplename token ids store ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( memberaccess ( indexaccess ( simplename token id to sale ) simplename token id to sale ( simplename token id ) simplename token id ) indexaccess ( simplename token ids ) simplename token ids ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is on sale ) simplename is on sale ( simplename sale ) simplename sale ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename current price ) simplename current price ( simplename sale ) simplename sale ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename bid amount ) simplename bid amount ( simplename price ) simplename price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seller ) simplename seller ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename sale ) simplename sale ( simplename seller ) simplename seller ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename token ids store ) simplename token ids store ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ii ) simplename ii ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename ii ) simplename ii ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename ii ) simplename ii ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename remove sale ) simplename remove sale ( indexaccess ( simplename token ids store ) simplename token ids store ( simplename ii ) simplename ii ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ( block ( expressionstatement ( functioncall ( simplename remove sale ) simplename remove sale ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename price ) simplename price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration
candidate: internal function to change the bid is in the auction .
ref: Computes the price and transfers winnings .

532:
src: ( modifierdefinition ( simplename only admin ) simplename only admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename administrators ) simplename administrators ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier that requires function can only be called by admin .
ref: modifier to check admin status .

533:
src: ( functiondefinition ( simplename set <UNK> sig ) simplename set <UNK> sig ( visibility external ) visibility external ( variabledeclaration ( simplename <UNK> multisig ) simplename <UNK> multisig ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename <UNK> multisig ) simplename <UNK> multisig ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> ) simplename <UNK> ( simplename <UNK> multisig ) simplename <UNK> multisig ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set address of Standard the contract applies to .
ref: Owner can Set Multisig wallet .

534:
src: ( functiondefinition ( simplename accept ownership of vesting ) simplename accept ownership of vesting ( visibility external ) visibility external ( variabledeclaration ( simplename vesting ) simplename vesting ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename token vesting contract ) simplename token vesting contract ( simplename vesting ) simplename vesting ) functioncall ( simplename accept ownership ) simplename accept ownership ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: used by a vesting contract to accept ownership transfer .
ref: Used to transfer ownership of a vesting contract to this master contract .

535:
src: ( functiondefinition ( simplename get price ) simplename get price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename total number token sold ) simplename total number token sold ( simplename pre sale supply ) simplename pre sale supply ) tupleexpression ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename total number token sold ) simplename total number token sold ( binaryoperation + ) binaryoperation + ( simplename pre sale supply ) simplename pre sale supply ( simplename phase1 supply ) simplename phase1 supply ) tupleexpression ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename total number token sold ) simplename total number token sold ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( simplename pre sale supply ) simplename pre sale supply ( simplename phase1 supply ) simplename phase1 supply ( simplename phase2 supply ) simplename phase2 supply ) tupleexpression ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename total number token sold ) simplename total number token sold ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( simplename pre sale supply ) simplename pre sale supply ( simplename phase1 supply ) simplename phase1 supply ( simplename phase2 supply ) simplename phase2 supply ( simplename final supply ) simplename final supply ) tupleexpression ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Get the price according to the present time .
ref: the price or token value for a ether .

536:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename name hash ) simplename name hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename description hash ) simplename description hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename file hashes ) simplename file hashes ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename mint ) simplename mint ) memberaccess ( simplename to ) simplename to ( simplename name hash ) simplename name hash ( simplename description hash ) simplename description hash ( simplename file hashes ) simplename file hashes ( simplename data ) simplename data ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename can pay fees ) simplename can pay fees ( simplename creation fee ) simplename creation fee ) modifierinvocation ) functiondefinition
candidate: Mints some new NFT .
ref: Make mint ( ) pausable .

537:
src: ( functiondefinition ( simplename set end timestamp ) simplename set end timestamp ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename end ) simplename end ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename end ) simplename end ( simplename start timestamp ) simplename start timestamp ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old value ) simplename old value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename end timestamp ) simplename end timestamp ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename end timestamp ) simplename end timestamp ( simplename end ) simplename end ) expressionstatement ( expressionstatement ( functioncall ( simplename end timestamp updated ) simplename end timestamp updated ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename old value ) simplename old value ( simplename end timestamp ) simplename end timestamp ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Sets the new end timestamp for the last end of the ICO .
ref: Updates the <UNK> propety with the new <UNK> value .

538:
src: ( functiondefinition ( simplename accept converter ownership ) simplename accept converter ownership ( visibility private ) visibility private ( variabledeclaration ( simplename old converter ) simplename old converter ( simpletype ( simplename ibancor converter ) simplename ibancor converter ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( memberaccess ( simplename old converter ) simplename old converter ( simplename owner ) simplename owner ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename old converter ) simplename old converter ( simplename accept ownership ) simplename accept ownership ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename converter owned ) simplename converter owned ( simplename old converter ) simplename old converter ( simplename this ) simplename this ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: the contract owner has a new converter contract .
ref: the first step when upgrading a converter is to transfer the ownership to the local contract .

539:
src: ( functiondefinition ( simplename get me out of here ) simplename get me out of here ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename sell my tokens ) simplename sell my tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is open ) simplename is open ) modifierinvocation ) functiondefinition
candidate: The slam-the - button escape hatch .
ref: The slam-the - button escape hatch .

540:
src: ( functiondefinition ( simplename toggle drain ) simplename toggle drain ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( memberaccess ( simplename shop ) simplename shop ( simplename toggle drain ) simplename toggle drain ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only a ) simplename only a ) modifierinvocation ) functiondefinition
candidate: Change the final case of any emergency .
ref: Management interface below .

541:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility internal ) visibility internal ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename burn ) simplename burn ) memberaccess ( simplename owner ) simplename owner ( simplename token id ) simplename token id ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token index ) simplename token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename id to index ) simplename id to index ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename tokens ) simplename tokens ( simplename token index ) simplename token index ) indexaccess ( simplename token id ) simplename token id ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token index ) simplename last token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token ) simplename last token ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename tokens ) simplename tokens ( simplename last token index ) simplename last token index ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename tokens ) simplename tokens ( simplename token index ) simplename token index ) indexaccess ( simplename last token ) simplename last token ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to index ) simplename id to index ( simplename last token ) simplename last token ) indexaccess ( simplename token index ) simplename token index ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to index ) simplename id to index ( simplename token id ) simplename token id ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: This is a private function which should be called from user-implemented external burn function .
ref: This is a private function which should be called from user-implemented external burn function .

542:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename pot ) simplename pot ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p3d ) simplename p3d ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename p3d ) simplename p3d ) memberaccess ) functioncall
candidate: ends the round .
ref: ends the round .

543:
src: ( functiondefinition ( simplename deposit ) simplename deposit ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename got participants ) simplename got participants ( simplename participants ) simplename participants ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename push ) simplename push ) memberaccess ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename push ) simplename push ) memberaccess ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename got participants ) simplename got participants ) expressionstatement ) block ) functiondefinition
candidate: Allow anyone to deposit .
ref: add new participant to the mixing .

544:
src: ( functiondefinition ( simplename buy for investor ) simplename buy for investor ( visibility external ) visibility external ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename phnvalue ) simplename phnvalue ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tx hash ) simplename tx hash ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename buy ) simplename buy ( simplename investor ) simplename investor ( simplename phnvalue ) simplename phnvalue ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log buy for investor ) simplename log buy for investor ( simplename investor ) simplename investor ( simplename phnvalue ) simplename phnvalue ( simplename tx hash ) simplename tx hash ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename controllers only ) simplename controllers only ) modifierinvocation ) functiondefinition
candidate: Allows the owner to send tokens to investors who paid in other cryptocurrencies .
ref: Function to issues tokens for investors who made purchases in other cryptocurrencies .

545:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename beneficiary ) simplename beneficiary ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( tupleexpression ( simplename wei amount ) simplename wei amount ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename tokens ) simplename tokens ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename tokens sold ) simplename tokens sold ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( throwstatement throw ) throwstatement throw ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename tokens ) simplename tokens ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename tokens ) simplename tokens ( numberliteral
candidate: low level token purchase function .
ref: low level token purchase function .

546:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility default ) visibility default ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename num accounts ) simplename num accounts ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename partner accounts ) simplename partner accounts ( simplename i ) simplename i ) indexaccess ( simplename addr ) simplename addr ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename addr ) simplename addr ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename partner accounts ) simplename partner accounts ( simplename i ) simplename i ) indexaccess ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename stat event ) simplename stat event ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename partner accounts ) simplename partner accounts ( simplename i ) simplename i ) indexaccess ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total funds withdrawn ) simplename total funds withdrawn ( simplename amount ) simplename amount ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( functioncall ( memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename addr ) simplename addr ( simplename call ) simplename call ) memberaccess ( simplename gas ) simplename gas ) memberaccess ( simplename withdraw gas ) simplename withdraw gas ) functioncall ( simplename value ) simplename value ) memberaccess ( simplename amount ) simplename amount ) functioncall ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( functioncall ( simplename stat event i ) simplename stat event i ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ) forstatement ) block ) functiondefinition
candidate: withdraw account balance .
ref: withdraw account balance .

547:
src: ( functiondefinition ( simplename bid ) simplename bid ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename receiver ) simplename receiver ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename receiver ) simplename receiver ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is in whitelist ) simplename is in whitelist ( simplename receiver ) simplename receiver ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename max wei ) simplename max wei ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( binaryoperation * ) binaryoperation * ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename max tokens sold ) simplename max tokens sold ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( functioncall ( simplename calc token price ) simplename calc token price ) functioncall ( simplename total received ) simplename total received ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename max wei based on total received ) simplename max wei based on total received ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename ceiling ) simplename ceiling ( simplename total received ) simplename total received ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename max wei based on total received ) simplename max wei based on total received ( simplename max wei ) simplename max wei ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max wei ) simplename max wei ( simplename max wei based on total received ) simplename max wei based on total received ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( simplename max wei ) simplename max wei ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( simplename max wei ) simplename max wei ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename receiver ) simplename receiver ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename bids ) simplename bids
candidate: Allows to send a bid to the auction .
ref: Allows to send a bid to the auction .

548:
src: ( functiondefinition ( simplename refund bet ) simplename refund bet ( visibility external ) visibility external ( variabledeclaration ( simplename commit ) simplename commit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename bet ) simplename bet ( simpletype ( simplename bet ) simplename bet ) simpletype ) variabledeclaration ( indexaccess ( simplename bets ) simplename bets ( simplename commit ) simplename commit ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename bet ) simplename bet ( simplename amount ) simplename amount ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename bet ) simplename bet ( simplename place block number ) simplename place block number ) memberaccess ( simplename bet expiration blocks ) simplename bet expiration blocks ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename bet ) simplename bet ( simplename amount ) simplename amount ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename dice win amount ) simplename dice win amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename jackpot fee ) simplename jackpot fee ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename dice win amount ) simplename dice win amount ( simplename jackpot fee ) simplename jackpot fee ) tupleexpression ( functioncall ( simplename get dice win amount ) simplename get dice win amount ( simplename amount ) simplename amount ( memberaccess ( simplename bet ) simplename bet ( simplename modulo ) simplename modulo ) memberaccess ( memberaccess ( simplename bet ) simplename bet ( simplename roll under ) simplename roll under ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename locked in bets ) simplename locked in bets ( functioncall ( simpletypeexpression ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) simpletypeexpression ( simplename dice win amount ) simplename dice win amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename jackpot size ) simplename jackpot size ( functioncall ( simpletypeexpression ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) simpletypeexpression ( simplename jackpot fee ) simplename jackpot fee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename send funds ) simplename send funds ( memberaccess ( simplename bet ) simplename bet ( simplename gambler ) simplename gambler ) memberaccess ( simplename amount ) simplename amount ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Refund the bet request in case of a failed refund or win send .
ref: Refund transaction - return the bet amount of a roll that was not processed in a due timeframe .

549:
src: ( functiondefinition ( simplename annual interest ) simplename annual interest ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename interest ) simplename interest ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename interest ) simplename interest ( simplename max mint proof of stake ) simplename max mint proof of stake ) expressionstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename interest ) simplename interest ( functioncall ( memberaccess ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename max mint proof of stake ) simplename max mint proof of stake ) tupleexpression ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename now ) simplename now ( simplename sub ) simplename sub ) memberaccess ( simplename stake start time ) simplename stake start time ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall
candidate: Function to stop minting new interest .
ref: Year 1 300 1 , 000 , 000 .

550:
src: ( modifierdefinition ( simplename only bonding manager ) simplename only bonding manager ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename get contract ) simplename get contract ) memberaccess ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Only the execution by the contract owner .
ref: Checks if caller is BondingManager .

551:
src: ( functiondefinition ( simplename withdraw champ ) simplename withdraw champ ( visibility external ) visibility external ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename champ ) simplename champ ( simpletype ( simplename champ ) simplename champ ) simpletype ) variabledeclaration ( indexaccess ( simplename champs ) simplename champs ( simplename id ) simplename id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename champ ) simplename champ ( simplename position ) simplename position ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename champ ) simplename champ ( simplename withdraw cooldown ) simplename withdraw cooldown ) memberaccess ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename withdrawal ) simplename withdrawal ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get champ reward ) simplename get champ reward ( memberaccess ( simplename champ ) simplename champ ( simplename position ) simplename position ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( indexaccess ( simplename address info ) simplename address info ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename withdrawal ) simplename withdrawal ) memberaccess ( simplename withdrawal ) simplename withdrawal ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename pending withdrawal ) simplename pending withdrawal ( simplename withdrawal ) simplename withdrawal ) expressionstatement ) block ( modifierinvocation ( simplename only owner of champ ) simplename only owner of champ ( simplename id ) simplename id ) modifierinvocation ( modifierinvocation ( simplename contract min balance reached ) simplename contract min balance reached ) modifierinvocation ( modifierinvocation ( simplename is champ withdraw ready ) simplename is champ withdraw ready ( simplename id ) simplename id ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Withdraw money from contract balance to beneficiary .
ref: Withdraw champ's reward .

552:
src: ( functiondefinition ( simplename get applications ) simplename get applications ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename storage ) simplename storage ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename exec id ) simplename exec id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename provider ) simplename provider ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seed ) simplename seed ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( functioncall ( simplename registered apps ) simplename registered apps ( simplename provider ) simplename provider ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename getter interface ) simplename getter interface ) simpletype ) variabledeclaration ( functioncall ( simplename getter interface ) simplename getter interface ( simplename storage ) simplename storage ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename target ) simplename target ( simplename read ) simplename read ) memberaccess ( simplename exec id ) simplename exec id ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) simpletypeexpression ( simplename seed ) simplename seed ) functioncall ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename arr indices ) simplename arr indices ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( simplename length ) simplename length ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename length ) simplename length ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename arr indices ) simplename arr indices ( binaryoperation - ) binaryoperation - ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) simpletypeexpression ( binaryoperation + ) binaryoperation + ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename i ) simplename i ) tupleexpression ( simplename seed ) simplename seed ) functioncall ) expressionstatement ) forstatement ( returnstatement ( functioncall ( memberaccess ( simplename target ) simplename target ( simplename read multi ) simplename read multi ) memberaccess ( simplename exec id ) simplename exec id ( simplename
candidate: Returns list of active IDs in defined range .
ref: Return a list of applications registered by the address given .

553:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename investor supply ) simplename investor supply ( functioncall ( memberaccess ( simplename investor supply ) simplename investor supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename free to extra minting ) simplename free to extra minting ( functioncall ( memberaccess ( simplename free to extra minting ) simplename free to extra minting ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( simplename investor supply ) simplename investor supply ( simplename maxsold supply ) simplename maxsold supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( simplename total supply ) simplename total supply ( simplename hardcapped supply ) simplename hardcapped supply ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ) functiondefinition
candidate: Function to mint tokens .
ref: Function to mint tokens for investor .

554:
src: ( functiondefinition ( simplename get content by key index ) simplename get content by key index ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename content ) simplename content ( simpletype ( simplename content ) simplename content ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( simpletype ( simplename content mapping ) simplename content mapping ) simpletype ) variabledeclaration ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename is valid index ) simplename is valid index ( simplename index ) simplename index ( memberaccess ( memberaccess ( simplename self ) simplename self ( simplename keys ) simplename keys ) memberaccess ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( tupleexpression ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename data ) simplename data ) memberaccess ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename keys ) simplename keys ) memberaccess ( simplename index ) simplename index ) indexaccess ) indexaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: get content hash in an array with given index .
ref: get content by _index into key array .

555:
src: ( functiondefinition ( simplename string to array ) simplename string to array ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename string ) simplename string ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( array ( simpletype ( simplename string ) simplename string ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename str ) simplename str ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename string ) simplename string ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename delim ) simplename delim ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename to slice ) simplename to slice ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename parts ) simplename parts ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename string ) simplename string ) simpletype ) array ( binaryoperation + ) binaryoperation + ( functioncall ( memberaccess ( simplename str ) simplename str ( simplename count ) simplename count ) memberaccess ( simplename delim ) simplename delim ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename parts ) simplename parts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename parts ) simplename parts ( simplename i ) simplename i ) indexaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename str ) simplename str ( simplename split ) simplename split ) memberaccess ( simplename delim ) simplename delim ) functioncall ( simplename to string ) simplename to string ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( simplename parts ) simplename parts ) returnstatement ) block ) functiondefinition
candidate: Joins an array of slices , using self as a delimiter , returning a newly allocated string .
ref: Slices a string according to specified delimiter , returning the <UNK> parts in an array .

556:
src: ( functiondefinition ( simplename allow direct debit ) simplename allow direct debit ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename direct debit allowances ) simplename direct debit allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) functiondefinition
candidate: Allow the owner to do a user .
ref: Allow the master to withdraw Beercoins from your account so you don't have to send Beercoins yourself .

557:
src: ( functiondefinition ( simplename allocate reserve tokens ) simplename allocate reserve tokens ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename founder ) simplename founder ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename <UNK> unlock ) simplename <UNK> unlock ( unaryoperation ! ) unaryoperation ! ( simplename <UNK> year ) simplename <UNK> year ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> year ) simplename <UNK> year ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( simplename safe div ) simplename safe div ( simplename total tokens reserve ) simplename total tokens reserve ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename safe add ) simplename safe add ( simplename total supply ) simplename total supply ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename <UNK> unlock ) simplename <UNK> unlock ( unaryoperation ! ) unaryoperation ! ( simplename <UNK> year ) simplename <UNK> year ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> year ) simplename <UNK> year ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( simplename safe div ) simplename safe div ( simplename total tokens reserve ) simplename total tokens reserve ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename safe add ) simplename safe add ( simplename total supply ) simplename total supply ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename <UNK> unlock ) simplename <UNK> unlock ( unaryoperation ! ) unaryoperation ! ( simplename
candidate: Allocate tokens to investor , .
ref: Allocate reserved tokens based on the running time and state of the contract .

558:
src: ( functiondefinition ( simplename remove address from whitelist ) simplename remove address from whitelist ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename number of whitelists ) simplename number of whitelists ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename addr ) simplename addr ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename addr ) simplename addr ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( simplename number of whitelists ) simplename number of whitelists ) expressionstatement ( emitstatement ( functioncall ( simplename whitelisted address removed ) simplename whitelisted address removed ( simplename addr ) simplename addr ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename success ) simplename success ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only whitelisted ) simplename only whitelisted ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: remove an address from the whitelist .
ref: remove an address from the whitelist .

559:
src: ( functiondefinition ( simplename set activation fee ) simplename set activation fee ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename activation fee ) simplename activation fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename activation fee ) simplename activation fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename activation fee ) simplename activation fee ( simplename activation fee ) simplename activation fee ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename activation fee ) simplename activation fee ( simplename activation fee ) simplename activation fee ) expressionstatement ( emitstatement ( functioncall ( simplename activation fee updated ) simplename activation fee updated ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename activation fee ) simplename activation fee ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the owner's fee .
ref: sets the global activation fee .

560:
src: ( functiondefinition ( simplename safe withdrawal ) simplename safe withdrawal ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation || ) binaryoperation || ( unaryoperation ! ) unaryoperation ! ( simplename funding goal reached ) simplename funding goal reached ( binaryoperation == ) binaryoperation == ( simplename unlock funders balance ) simplename unlock funders balance ( booleanliteral true ) booleanliteral true ) tupleexpression ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( ifstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( simplename amount ) simplename amount ) functioncall ( block ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount withdrawn ) simplename amount withdrawn ( functioncall ( simplename safe add ) simplename safe add ( simplename amount withdrawn ) simplename amount withdrawn ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename after deadline ) simplename after deadline ) modifierinvocation ) functiondefinition
candidate: Withdraw the funds .
ref: Fund withdraw to backers if crowdsale not successful .

561:
src: ( functiondefinition ( simplename set cap ) simplename set cap ( visibility public ) visibility public ( variabledeclaration ( simplename cap tokens ) simplename cap tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename end time ) simplename end time ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename cap tokens ) simplename cap tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap tokens ) simplename cap tokens ( simplename cap tokens ) simplename cap tokens ) expressionstatement ) block ( modifierinvocation ( simplename if authorized ) simplename if authorized ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename aphrodite ) simplename aphrodite ) modifierinvocation ) functiondefinition
candidate: Sets the maximum amount of tokens for be sent .
ref: Set the cap , i . e .

562:
src: ( functiondefinition ( simplename disable initial stage ) simplename disable initial stage ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename only ambassadors ) simplename only ambassadors ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename disable time ) simplename disable time ( binaryoperation + ) binaryoperation + ( simplename now ) simplename now ( simplename time to start ) simplename time to start ) expressionstatement ) block ( modifierinvocation ( simplename only administrator ) simplename only administrator ) modifierinvocation ) functiondefinition
candidate: In case the amassador quota is not met , the administrator can manually disable the ambassador phase .
ref: In case the amassador quota is not met , the administrator can manually disable the ambassador phase .

563:
src: ( functiondefinition ( simplename forward funds ) simplename forward funds ( visibility internal ) visibility internal ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename account number ) simplename account number ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename pre sale wallets ) simplename pre sale wallets ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename account number ) simplename account number ( binaryoperation - ) binaryoperation - ( functioncall ( simplename get random ) simplename get random ( memberaccess ( simplename pre sale wallets ) simplename pre sale wallets ( simplename length ) simplename length ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename account ) simplename account ( indexaccess ( simplename pre sale wallets ) simplename pre sale wallets ( simplename account number ) simplename account number ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename account ) simplename account ( simplename transfer ) simplename transfer ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log fund transfer ) simplename log fund transfer ( simplename account ) simplename account ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Send ether to the fund collection wallet .
ref: Send ether to the presale collection wallets .

564:
src: ( functiondefinition ( simplename create siring auction ) simplename create siring auction ( visibility external ) visibility external ( variabledeclaration ( simplename panda id ) simplename panda id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename starting price ) simplename starting price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ending price ) simplename ending price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename panda id ) simplename panda id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is ready to breed ) simplename is ready to breed ( simplename panda id ) simplename panda id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename approve ) simplename approve ( simplename panda id ) simplename panda id ( simplename siring auction ) simplename siring auction ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename siring auction ) simplename siring auction ( simplename create auction ) simplename create auction ) memberaccess ( simplename panda id ) simplename panda id ( simplename starting price ) simplename starting price ( simplename ending price ) simplename ending price ( simplename duration ) simplename duration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Put a kitten up for auction to be sire .
ref: Put a panda up for auction to be sire .

565:
src: ( functiondefinition ( simplename open for public trade ) simplename open for public trade ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename open for public ) simplename open for public ( booleanliteral true ) booleanliteral true ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename is operational ) simplename is operational ) modifierinvocation ) functiondefinition
candidate: Function to call the token allocation .
ref: open the Market Maker for public trade .

566:
src: ( functiondefinition ( simplename get info ) simplename get info ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( functioncall ( simplename is mining ) simplename is mining ( simplename owner ) simplename owner ) functioncall ( indexaccess ( simplename nodes ) simplename nodes ( simplename owner ) simplename owner ) indexaccess ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ( functioncall ( simplename calculate reward ) simplename calculate reward ( simplename owner ) simplename owner ) functioncall ( functioncall ( simplename reward per node ) simplename reward per node ) functioncall ( simplename total nodes ) simplename total nodes ( functioncall ( simplename total supply ) simplename total supply ) functioncall ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Retrieve the current info for the specified node .
ref: A batch query to get all node information for a specified address .

567:
src: ( modifierdefinition ( simplename only admin ) simplename only admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( memberaccess ( indexaccess ( simplename admins ) simplename admins ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is admin ) simplename is admin ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check whether the msg . sender .
ref: Contract <UNK> access modifier .

568:
src: ( functiondefinition ( simplename add ether for oraclize ) simplename add ether for oraclize ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename oraclize balance ) simplename oraclize balance ( functioncall ( memberaccess ( simplename oraclize balance ) simplename oraclize balance ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: public function in case of emergency .
ref: add some ETH for oraclize updater .

569:
src: ( functiondefinition ( simplename deploy ) simplename deploy ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename setup cost ) simplename setup cost ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename poly token ) simplename poly token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( simplename setup cost ) simplename setup cost ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename percentage transfer manager ) simplename percentage transfer manager ( simpletype ( simplename percentage transfer manager ) simplename percentage transfer manager ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename percentage transfer manager ) simplename percentage transfer manager ) simpletype ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename poly token ) simplename poly token ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename get sig ) simplename get sig ( simplename data ) simplename data ) functioncall ( functioncall ( memberaccess ( simplename percentage transfer manager ) simplename percentage transfer manager ( simplename get init function ) simplename get init function ) memberaccess ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename percentage transfer manager ) simplename percentage transfer manager ) functioncall ( simplename call ) simplename call ) memberaccess ( simplename data ) simplename data ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log generate module from factory ) simplename log generate module from factory ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename percentage transfer manager ) simplename percentage transfer manager ) functioncall ( functioncall ( simplename get name ) simplename get name ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename now ) simplename now ) functioncall ) emitstatement ( returnstatement ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename percentage transfer manager ) simplename percentage transfer manager ) functioncall ) returnstatement ) block ) functiondefinition
candidate: used to deploy a new ST .
ref: used to launch the Module with the help of factory .

570:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total supply ) simplename total supply ( simplename value ) simplename value ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Destroy tokens from specified address .
ref: Burns a specific amount of tokens .

571:
src: ( functiondefinition ( simplename unregister auditor ) simplename unregister auditor ( visibility default ) visibility default ( variabledeclaration ( simplename auditor address ) simplename auditor address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename return deposit ) simplename return deposit ( simplename auditor address ) simplename auditor address ( simplename security deposit registry ) simplename security deposit registry ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename auditor registry ) simplename auditor registry ( simplename unregister ) simplename unregister ) memberaccess ( simplename auditor address ) simplename auditor address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename auditor unregistered ) simplename auditor unregistered ( simplename auditor address ) simplename auditor address ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: unregister the registered address .
ref: Unregister Auditor and return unused deposit .

572:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename greys ) simplename greys ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

573:
src: ( functiondefinition ( simplename end game ) simplename end game ( visibility public ) visibility public ( variabledeclaration ( simplename target address ) simplename target address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename target game index ) simplename target game index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename game address id map ) simplename game address id map ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename target address ) simplename target address ) functioncall ) indexaccess ) variabledeclarationstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename ended game count ) simplename ended game count ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename ended games ) simplename ended games ( simplename push ) simplename push ) memberaccess ( simplename target address ) simplename target address ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename deployed games ) simplename deployed games ( binaryoperation - ) binaryoperation - ( simplename target game index ) simplename target game index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename deployed games ) simplename deployed games ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename deployed games ) simplename deployed games ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename game address id map ) simplename game address id map ( indexaccess ( simplename deployed games ) simplename deployed games ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename deployed games ) simplename deployed games ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) indexaccess ( simplename target game index ) simplename target game index ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename deployed games ) simplename deployed games ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename deployed games ) simplename deployed games ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( memberaccess ( simplename deployed games ) simplename deployed games ( simplename length ) simplename length ) memberaccess ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename m game ) simplename m game ( simpletype ( simplename majority game ) simplename majority game ) simpletype ) variabledeclaration ( functioncall ( simplename majority game ) simplename majority game ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename target address ) simplename target address ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename m game ) simplename m game ( simplename end game ) simplename end game ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: removes game and returns the contract with the specified game .
ref: end the game .

574:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename data ) simplename data ( simplename balance of ) simplename balance of ) memberaccess ( simplename addr ) simplename addr ) functioncall ) returnstatement ) block ) functiondefinition
candidate: The following functions are used by the front-end for display purposes .
ref: Check the contract token .

575:
src: ( functiondefinition ( simplename transfer with reserving net ) simplename transfer with reserving net ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename net transfer ) simplename net transfer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total transfer ) simplename total transfer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename net transfer ) simplename net transfer ( tupleexpression ( binaryoperation + ) binaryoperation + ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename reserving percentage ) simplename reserving percentage ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename total transfer ) simplename total transfer ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename total transfer ) simplename total transfer ( simplename net transfer ) simplename net transfer ) tupleexpression ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( functioncall ( simplename transfer main ) simplename transfer main ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename net transfer ) simplename net transfer ) functioncall ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename total transfer ) simplename total transfer ( simplename reserving step ) simplename reserving step ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename process jackpot deposit ) simplename process jackpot deposit ( simplename total transfer ) simplename total transfer ( simplename net transfer ) simplename net transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Using this function a user a user transfers tokens and call a function .
ref: Using this function a user transfers tokens and participates in operating jackpot .

576:
src: ( functiondefinition ( simplename sub ) simplename sub ( visibility public ) visibility public ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename equivalent eth amount ) simplename equivalent eth amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens amount ) simplename tokens amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token rate ) simplename token rate ( simplename mul ) simplename mul ) memberaccess ( simplename equivalent eth amount ) simplename equivalent eth amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename tokens ) simplename tokens ( simplename receiver ) simplename receiver ) indexaccess ( simplename tokens amount ) simplename tokens amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename tokens ) simplename tokens ( simplename receiver ) simplename receiver ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename receiver ) simplename receiver ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename tokens amount ) simplename tokens amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename issued tokens amount ) simplename issued tokens amount ( functioncall ( memberaccess ( simplename issued tokens amount ) simplename issued tokens amount ( simplename sub ) simplename sub ) memberaccess ( simplename tokens amount ) simplename tokens amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token subtracted ) simplename token subtracted ( simplename receiver ) simplename receiver ( simplename tokens amount ) simplename tokens amount ( simplename equivalent eth amount ) simplename equivalent eth amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Transfer different amount of tokens for each investor .
ref: Reduce bought token amount .

577:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility internal ) visibility internal ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token addr ) simplename token addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( simplename contract stage ) simplename contract stage ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename c ) simplename c ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename contributors ) simplename contributors ( simplename receiver ) simplename receiver ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token addr ) simplename token addr ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token addr ) simplename token addr ( simplename active token ) simplename active token ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename d ) simplename d ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename distribution ) simplename distribution ( simplename token addr ) simplename token addr ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename refund pct ) simplename refund pct ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( unaryoperation ! ) unaryoperation ! ( memberaccess ( simplename c ) simplename c ( simplename refunded eth ) simplename refunded eth ) memberaccess ) tupleexpression ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename d ) simplename d ( simplename claim round ) simplename claim round ) memberaccess ( indexaccess ( memberaccess ( simplename c ) simplename c ( simplename tokens claimed ) simplename tokens claimed ) memberaccess ( simplename token addr ) simplename token addr ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename refund pct ) simplename refund pct ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( unaryoperation ! ) unaryoperation ! ( memberaccess ( simplename c ) simplename c ( simplename refunded eth ) simplename refunded eth ) memberaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eth amount ) simplename eth amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename apply pct ) simplename apply pct ( memberaccess ( simplename c ) simplename c ( simplename balance ) simplename balance ) memberaccess ( simplename refund pct ) simplename refund pct ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename c ) simplename c ( simplename refunded eth ) simplename refunded eth ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename eth amount ) simplename eth amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( simplename eth amount ) simplename eth amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename c ) simplename c ( simplename balance ) simplename balance ) memberaccess ( block ( expressionstatement
candidate: This internal function handles withdrawals during stage three .
ref: This internal function handles withdrawals during stage three .

578:
src: ( functiondefinition ( simplename change burn bounds ) simplename change burn bounds ( visibility public ) visibility public ( variabledeclaration ( simplename new min ) simplename new min ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new max ) simplename new max ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename change burn bounds event ) simplename change burn bounds event ( simplename new min ) simplename new min ( simplename new max ) simplename new max ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename true usd ) simplename true usd ( simplename change burn bounds ) simplename change burn bounds ) memberaccess ( simplename new min ) simplename new min ( simplename new max ) simplename new max ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Change the minimum and maximum amount that can be burned at once .
ref: Change the minimum and maximum amounts that TrueUSD users can burn to <UNK> and <UNK> .

579:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from the from account to the to account .
ref: Transfer tokens from the from account to the to account .

580:
src: ( functiondefinition ( simplename withdraw tokens ) simplename withdraw tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename total cents collected ) simplename total cents collected ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename total tokens ) simplename total tokens ( simplename min price in cents ) simplename min price in cents ( simplename token decimals multiplier ) simplename token decimals multiplier ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename cents received ) simplename cents received ( simplename recipient ) simplename recipient ) indexaccess ( simplename token decimals multiplier ) simplename token decimals multiplier ( simplename min price in cents ) simplename min price in cents ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename cents received ) simplename cents received ( simplename recipient ) simplename recipient ) indexaccess ( simplename total tokens ) simplename total tokens ( simplename total cents collected ) simplename total cents collected ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename withdrawn ) simplename withdrawn ( simplename recipient ) simplename recipient ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename erc223 ) simplename erc223 ( simplename token ) simplename token ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( simplename recipient ) simplename recipient ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename tokens withdraw ) simplename tokens withdraw ( simplename recipient ) simplename recipient ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows owner to transfer unsold tokens .
ref: Internal function to withdraw tokens by final price .

581:
src: ( functiondefinition ( simplename buy ticket ) simplename buy ticket ( visibility internal ) visibility internal ( variabledeclaration ( simplename c nums ) simplename c nums ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename entrant ) simplename entrant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename c nums ) simplename c nums ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename raffle ) simplename raffle ( simplename week ) simplename week ) indexaccess ( simplename time stamp ) simplename time stamp ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( memberaccess ( indexaccess ( simplename raffle ) simplename raffle ( simplename week ) simplename week ) indexaccess ( simplename time stamp ) simplename time stamp ) memberaccess ( simplename raf end ) simplename raf end ( binaryoperation < ) binaryoperation < ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation <= ) binaryoperation <= ( indexaccess ( simplename c nums ) simplename c nums ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( memberaccess ( indexaccess ( simplename raffle ) simplename raffle ( simplename week ) simplename week ) indexaccess ( simplename num entries ) simplename
candidate: Function to buy tickets .
ref: Function to buy tickets .

582:
src: ( functiondefinition ( simplename unregister dsp ) simplename unregister dsp ( visibility default ) visibility default ( variabledeclaration ( simplename dsp address ) simplename dsp address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename return deposit ) simplename return deposit ( simplename dsp address ) simplename dsp address ( simplename security deposit registry ) simplename security deposit registry ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename dsp registry ) simplename dsp registry ( simplename unregister ) simplename unregister ) memberaccess ( simplename dsp address ) simplename dsp address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename dsp address ) simplename dsp address ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: unregister registered address .
ref: Unregister DSP and return unused deposit .

583:
src: ( functiondefinition ( simplename transfer ownership ) simplename transfer ownership ( visibility public ) visibility public ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new owner ) simplename new owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename ownership transferred ) simplename ownership transferred ( simplename publish owner ) simplename publish owner ( simplename new owner ) simplename new owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename publish owner ) simplename publish owner ( simplename new owner ) simplename new owner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the current owner to transfer control of the contract to a newOwner .
ref: Allows the current owner to transfer control of the contract to a newOwner .

584:
src: ( functiondefinition ( simplename transfer token ownership ) simplename transfer token ownership ( visibility public ) visibility public ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename minting finished ) simplename minting finished ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ownership ) simplename transfer ownership ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to transfer ownership of token to the owner of the contract .
ref: transfer token ownership after allocation .

585:
src: ( functiondefinition ( simplename owners of area ) simplename owners of area ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename result ) simplename result ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename x2 ) simplename x2 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y2 ) simplename y2 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename x2 ) simplename x2 ( simplename x ) simplename x ( binaryoperation > ) binaryoperation > ( simplename y2 ) simplename y2 ( simplename y ) simplename y ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename x2 ) simplename x2 ( simplename width ) simplename width ( binaryoperation <= ) binaryoperation <= ( simplename y2 ) simplename y2 ( simplename height ) simplename height ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename result ) simplename result ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( binaryoperation * ) binaryoperation * ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename y2 ) simplename y2 ( simplename y ) simplename y ) tupleexpression ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename x2 ) simplename x2 ( simplename x ) simplename x ) tupleexpression ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename y ) simplename y ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename y2 ) simplename y2 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( simplename width ) simplename width ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename x ) simplename x ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename j ) simplename j ( simplename x2 ) simplename x2 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename j ) simplename j ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename result ) simplename result ( simplename r ) simplename r ) indexaccess ( indexaccess ( simplename pixel index
candidate: Returns an area to world .
ref: Returns the addresses currently assigned ownership of the given pixel area .

586:
src: ( modifierdefinition ( simplename timed state change ) simplename timed state change ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( functioncall ( simplename get current state ) simplename get current state ) functioncall ( memberaccess ( simplename state ) simplename state ( simplename init ) simplename init ) memberaccess ( binaryoperation >= ) binaryoperation >= ( functioncall ( simplename get current time ) simplename get current time ) functioncall ( functioncall ( simplename get start time ) simplename get start time ) functioncall ( block ( expressionstatement ( functioncall ( simplename change state ) simplename change state ( memberaccess ( simplename state ) simplename state ( simplename running ) simplename running ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check if period is still running .
ref: Triggers some state changes based on current time .

587:
src: ( functiondefinition ( simplename fund ) simplename fund ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename date sale started ) simplename date sale started ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename date sale started ) simplename date sale started ( returnstatement ( functioncall ( simplename error buying tokens ) simplename error buying tokens ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename date sale ended ) simplename date sale ended ( returnstatement ( functioncall ( simplename error buying tokens ) simplename error buying tokens ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) returnstatement ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename total raised ) simplename total raised ( simplename hard cap ) simplename hard cap ( returnstatement ( functioncall ( simplename error buying tokens ) simplename error buying tokens ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) returnstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( binaryoperation % ) binaryoperation % ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( functioncall ( simplename error buying tokens ) simplename error buying tokens ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) returnstatement ) ifstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename was sale started ) simplename was sale started ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename was sale started ) simplename was sale started ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename sale started ) simplename sale started ( simplename now ) simplename now ) functioncall ) emitstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amt to fund ) simplename amt to fund ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( conditional ( binaryoperation > ) binaryoperation > ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename total raised ) simplename total raised ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) tupleexpression ( simplename hard cap ) simplename hard cap ( binaryoperation - ) binaryoperation - ( simplename hard cap ) simplename hard cap ( simplename total raised ) simplename total raised ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) conditional ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename num tokens ) simplename num tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get tokens from eth ) simplename get tokens from eth ( simplename amt to fund ) simplename amt to fund ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename num tokens ) simplename num tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total raised ) simplename total raised ( simplename amt to fund ) simplename amt to fund ) expressionstatement ( emitstatement
candidate: function can be called by owner to create a sale .
ref: Allows the sender to buy tokens .

588:
src: ( functiondefinition ( simplename update instance ) simplename update instance ( visibility external ) visibility external ( statemutability view ) statemutability view ( variabledeclaration ( simplename app name ) simplename app name ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current version ) simplename current version ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename registry id ) simplename registry id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename contract ) simplename contract ( simplename authorize ) simplename authorize ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename app name ) simplename app name ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename current version ) simplename current version ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename registry id ) simplename registry id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename current selectors ) simplename current selectors ( array ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename get version selectors ) simplename get version selectors ( simplename app name ) simplename app name ( simplename current version ) simplename current version ( simplename registry id ) simplename registry id ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename current selectors ) simplename current selectors ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename latest version ) simplename latest version ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename get latest version ) simplename get latest version ( simplename app name ) simplename app name ( simplename registry id ) simplename registry id ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename latest version ) simplename latest version ( simplename current version ) simplename current version ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename latest version ) simplename latest version ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename latest idx ) simplename latest idx ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename get version index ) simplename get version index ( simplename app name ) simplename app name ( simplename latest version ) simplename latest version ( simplename registry id ) simplename registry id ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename latest selectors ) simplename latest selectors ( array ( simpletype ( simplename bytes4 ) simplename bytes4
candidate: Get a implementation .
ref: Updates an application to the latest version .

589:
src: ( functiondefinition ( simplename withdraw non top ) simplename withdraw non top ( visibility public ) visibility public ( variabledeclaration ( simplename round index ) simplename round index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename is complete active ) simplename is complete active ) memberaccess ( booleanliteral true ) booleanliteral true ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename is open ) simplename is open ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename withdrawable ) simplename withdrawable ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is active ) simplename is active ) memberaccess ( booleanliteral false ) booleanliteral false ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is withdrawn ) simplename is withdrawn ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is withdrawn ) simplename is withdrawn ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename withdraw ) simplename withdraw ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename round index ) simplename round index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename stake ) simplename stake ) memberaccess ( simplename now ) simplename now ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename withdraw nac ) simplename withdraw nac ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename round index ) simplename round index ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: withdraw NAC for investor .
ref: withdraw NAC and ETH for non top investor execute by investor .

590:
src: ( functiondefinition ( simplename finalize sale ) simplename finalize sale ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename sale ended ) simplename sale ended ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin ) simplename admin ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename burn ) simplename burn ) memberaccess ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename finalize sale ) simplename finalize sale ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: should be called after crowdsale ends , to do some extra finalization work .
ref: function is callable by everyone .

591:
src: ( functiondefinition ( simplename seed market ) simplename seed market ( visibility public ) visibility public ( variabledeclaration ( simplename eggs ) simplename eggs ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename ceo address ) simplename ceo address ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename initialized ) simplename initialized ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename market eggs ) simplename market eggs ( simplename eggs ) simplename eggs ) expressionstatement ) block ) functiondefinition
candidate: Dev should initially seed the game before start .
ref: Dev should initially seed the game before start .

592:
src: ( functiondefinition ( simplename withdraw accumulated fees ) simplename withdraw accumulated fees ( visibility external ) visibility external ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename transfer amount ) simplename transfer amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename accumulated gas fees ) simplename accumulated gas fees ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename accumulated gas fees ) simplename accumulated gas fees ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename to ) simplename to ( simplename transfer ) simplename transfer ) memberaccess ( simplename transfer amount ) simplename transfer amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: function to withdraw accumulated fees , to the owner , this function .
ref: Withdraw accumulated gas fees from the <UNK> releasing escrow .

593:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename allowance ) simplename allowance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename allowance ) simplename allowance ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename allowance ) simplename allowance ( simplename max uint ) simplename max uint ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true )
candidate: Transfer tokens from one address to another .
ref: ERC20 transferFrom , modified such that an allowance of MAX_UINT represents an unlimited allowance .

594:
src: ( functiondefinition ( simplename check balance ) simplename check balance ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename red balance ) simplename red balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( variabledeclaration ( simplename all deposit sum ) simplename all deposit sum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename int16 ) simplename int16 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename max id ) simplename max id ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename all deposit sum ) simplename all deposit sum ( functioncall ( memberaccess ( simplename all deposit sum ) simplename all deposit sum ( simplename add ) simplename add ) memberaccess ( memberaccess ( indexaccess ( simplename partners ) simplename partners ( simplename i ) simplename i ) indexaccess ( simplename amount ) simplename amount ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename red balance ) simplename red balance ( functioncall ( memberaccess ( functioncall ( memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename not distributed amount ) simplename not distributed amount ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename all deposit sum ) simplename all deposit sum ) functioncall ) expressionstatement ( returnstatement ( simplename red balance ) simplename red balance ) returnstatement ) block ) functiondefinition
candidate: Internal balance function , used to check if all the dynamic reserve value .
ref: Check of <UNK> .

595:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( tupleexpression ( functioncall ( simplename revert ) simplename revert ) functioncall ) tupleexpression ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: A contract attempts to get the coins .
ref: A contract attempts to get the coins .

596:
src: ( modifierdefinition ( simplename finished only ) simplename finished only ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename pre sale finished ) simplename pre sale finished ) memberaccess ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename round afinished ) simplename round afinished ) memberaccess ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename round bfinished ) simplename round bfinished ) memberaccess ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename round cfinished ) simplename round cfinished ) memberaccess ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename status ico ) simplename status ico ( memberaccess ( simplename status ico ) simplename status ico ( simplename round dfinished ) simplename round dfinished ) memberaccess ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the ICO finished .
ref: Allows execution if the any round finished only .

597:
src: ( functiondefinition ( simplename lotto count ) simplename lotto count ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ticket price ) simplename ticket price ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimum bounty ) simplename minimum bounty ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max tickets ) simplename max tickets ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename direction ) simplename direction ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename lotto index ) simplename lotto index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename last ticket time ) simplename last ticket time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename numtickets ) simplename numtickets ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total bounty ) simplename total bounty ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename total bounty ) simplename total bounty ( simplename minimum bounty ) simplename minimum bounty ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Create new instance sets custom rules .
ref: Create a new Lotto .

598:
src: ( modifierdefinition ( simplename accepting payments ) simplename accepting payments ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename is accepting payments ) simplename is accepting payments ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Allows a function to be executed only by the owner .
ref: modifier to check if payments being accepted .

599:
src: ( functiondefinition ( simplename purchase ) simplename purchase ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old owner ) simplename old owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename movie index to owner ) simplename movie index to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename selling price ) simplename selling price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename movie index to price ) simplename movie index to price ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename old owner ) simplename old owner ( simplename new owner ) simplename new owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename new owner ) simplename new owner ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename selling price ) simplename selling price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payment ) simplename payment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename selling price ) simplename selling price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename purchase excess ) simplename purchase excess ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename selling price ) simplename selling price ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename movie index to price ) simplename movie index to price ( simplename token id ) simplename token id ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename selling price ) simplename selling price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral
candidate: Allows someone to send ether and obtain the token .
ref: Allows someone to send ether and obtain the token .

600:
src: ( functiondefinition ( simplename start ico ) simplename start ico ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico started ) simplename ico started ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: called by the owner to start the ICO .
ref: Start the ico manually .

601:
src: ( functiondefinition ( simplename add to whitelist ) simplename add to whitelist ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename beneficiary ) simplename beneficiary ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only white list agent ) simplename only white list agent ) modifierinvocation ) functiondefinition
candidate: Adds single address to whitelist .
ref: Adds single address to whitelist .

602:
src: ( modifierdefinition ( simplename only investors ) simplename only investors ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename buyins ) simplename buyins ( simplename receiver ) simplename receiver ) indexaccess ( simplename accounted ) simplename accounted ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename purchases ) simplename purchases ( simplename receiver ) simplename receiver ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Ensure a participant .
ref: Ensure <UNK> is a participant .

603:
src: ( functiondefinition ( simplename set as minter ) simplename set as minter ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is minter ) simplename is minter ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename minters ) simplename minters ( simplename addr ) simplename addr ) indexaccess ( simplename is minter ) simplename is minter ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to set a new minter .
ref: Function to set addresses that will be able to mint tokens .

604:
src: ( functiondefinition ( simplename contract ) simplename contract ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: Owner can transfer out any accidentally sent ERC20 tokens .
ref: The Ownable constructor sets the original owner of the contract to the sender account .

605:
src: ( functiondefinition ( simplename check goal reached ) simplename check goal reached ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename beneficiary ) simplename beneficiary ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename amount raised ) simplename amount raised ( simplename funding goal ) simplename funding goal ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename funding goal reached ) simplename funding goal reached ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename goal reached ) simplename goal reached ( simplename beneficiary ) simplename beneficiary ( simplename amount raised ) simplename amount raised ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale closed ) simplename crowdsale closed ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename after deadline ) simplename after deadline ) modifierinvocation ) functiondefinition
candidate: Check if goal was reached .
ref: Check if goal was reached .

606:
src: ( functiondefinition ( simplename claim tokens ) simplename claim tokens ( visibility public ) visibility public ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation != ) binaryoperation != ( simplename token ) simplename token ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename aix ) simplename aix ) functioncall ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token ) simplename token ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 ) simplename erc20 ) simpletype ) variabledeclaration ( functioncall ( simplename erc20 ) simplename erc20 ( simplename token ) simplename token ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename controller ) simplename controller ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename claimed tokens ) simplename claimed tokens ( simplename token ) simplename token ( simplename controller ) simplename controller ( simplename balance ) simplename balance ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only controller ) simplename only controller ) modifierinvocation ) functiondefinition
candidate: This method can be used by the controller to extract mistakenly sent tokens to this contract .
ref: This method can be used by the controller to extract mistakenly sent tokens to this contract .

607:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename pixel id ) simplename pixel id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename pixel to owner ) simplename pixel to owner ( simplename pixel id ) simplename pixel id ) indexaccess ) variabledeclarationstatement ( returnstatement ( simplename owner ) simplename owner ) returnstatement ) block ) functiondefinition
candidate: returns the owner of a pixel .
ref: returns the owner of a pixel .

608:
src: ( functiondefinition ( simplename run sweep stake ) simplename run sweep stake ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename rounds index ) simplename rounds index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename rd ) simplename rd ( simpletype ( simplename round data ) simplename round data ) simpletype ) variabledeclaration ( indexaccess ( simplename rounds ) simplename rounds ( unaryoperation -- ) unaryoperation -- ( simplename rounds index ) simplename rounds index ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename participant number ) simplename participant number ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( memberaccess ( simplename rd ) simplename rd ( simplename last participant ) simplename last participant ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename level ) simplename level ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( memberaccess ( simplename rd ) simplename rd ( simplename level ) simplename level ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename min range ) simplename min range ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename participant number ) simplename participant number ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename max participants ) simplename max participants ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename max range ) simplename max range ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( simplename participant number ) simplename participant number ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename query participants ) simplename query participants ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename k ) simplename k ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename level ) simplename level ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( simplename min range ) simplename min range ) expressionstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename max range ) simplename max range ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename query participants ) simplename query participants ( simplename k ) simplename k ) indexaccess ( indexaccess ( simplename participants eth001 ) simplename participants eth001 ( simplename i ) simplename i
candidate: Setup redemption requests .
ref: This function prepares the round participants for the random number generation .

609:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to address ) simplename to address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( functioncall ( simplename my dividends ) simplename my dividends ( booleanliteral true ) booleanliteral true ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ) functioncall ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token fee ) simplename token fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename transfer fee ) simplename transfer fee ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taxed tokens ) simplename taxed tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename tokens to ethereum ) simplename tokens to ethereum ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token supply ) simplename token supply ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename token supply ) simplename token supply ( simplename token fee ) simplename token fee ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( simplename amount of tokens ) simplename amount of tokens ) functioncall ) expressionstatement ( expressionstatement
candidate: Transfer tokens from the caller to a new holder .
ref: Transfer tokens from the caller to a new holder .

610:
src: ( functiondefinition ( simplename adjust rate ) simplename adjust rate ( visibility public ) visibility public ( variabledeclaration ( simplename new rate ) simplename new rate ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei per btc ) simplename wei per btc ( simplename new rate ) simplename new rate ) expressionstatement ( expressionstatement ( functioncall ( simplename rate changed ) simplename rate changed ( simplename new rate ) simplename new rate ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Adjust the rate of tokens per wei at the present time .
ref: Adjust the <UNK> rate .

611:
src: ( functiondefinition ( simplename check proposal code ) simplename check proposal code ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename code checks out ) simplename code checks out ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename proposal number ) simplename proposal number ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ether amount ) simplename ether amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename transaction bytecode ) simplename transaction bytecode ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p ) simplename p ( simpletype ( simplename proposal ) simplename proposal ) simpletype ) variabledeclaration ( indexaccess ( simplename proposals ) simplename proposals ( simplename proposal number ) simplename proposal number ) indexaccess ) variabledeclarationstatement ( returnstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename p ) simplename p ( simplename proposal hash ) simplename proposal hash ) memberaccess ( functioncall ( simplename sha3 ) simplename sha3 ( simplename beneficiary ) simplename beneficiary ( simplename ether amount ) simplename ether amount ( simplename transaction bytecode ) simplename transaction bytecode ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Check if a proposal code matches .
ref: function to check if a proposal code matches .

612:
src: ( functiondefinition ( simplename confirm ) simplename confirm ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename confirmed ) simplename confirmed ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename action id ) simplename action id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename is member ) simplename is member ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( indexaccess ( indexaccess ( simplename confirmations ) simplename confirmations ( simplename action id ) simplename action id ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename action id ) simplename action id ( simplename last action id ) simplename last action id ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename actions ) simplename actions ( simplename action id ) simplename action id ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( memberaccess ( simplename a ) simplename a ( simplename expiration ) simplename expiration ) memberaccess ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( memberaccess ( simplename a ) simplename a ( simplename triggered ) simplename triggered ) memberaccess ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename confirmations ) simplename confirmations ( simplename action id ) simplename action id ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename a ) simplename a ( simplename confirmations ) simplename confirmations ) memberaccess ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename a ) simplename a ( simplename confirmations ) simplename confirmations ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename actions ) simplename actions ( simplename action id ) simplename action id ) indexaccess ( simplename a ) simplename a ) expressionstatement ( expressionstatement ( functioncall ( simplename confirmed ) simplename confirmed ( simplename action id ) simplename action id ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Confirm the action .
ref: Attempts to confirm the action .

613:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is minimum goal reached ) simplename is minimum goal reached ) functioncall ( binaryoperation > ) binaryoperation > ( simplename loaded refund ) simplename loaded refund ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei value ) simplename wei value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename invested amount of ) simplename invested amount of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename wei value ) simplename wei value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename invested amount of ) simplename invested amount of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei refunded ) simplename wei refunded ( functioncall ( memberaccess ( simplename wei refunded ) simplename wei refunded ( simplename add ) simplename add ) memberaccess ( simplename wei value ) simplename wei value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename refund ) simplename refund ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wei value ) simplename wei value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename wei value ) simplename wei value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Investors can claim refund .
ref: Investors can claim refund .

614:
src: ( functiondefinition ( simplename set foundation wallet ) simplename set foundation wallet ( visibility default ) visibility default ( variabledeclaration ( simplename new addr ) simplename new addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename master auth ) simplename master auth ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( functioncall ( simplename get phase at time ) simplename get phase at time ( simplename now ) simplename now ) functioncall ( simplename phase of round0 ) simplename phase of round0 ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename foundation wallet ) simplename foundation wallet ( simplename new addr ) simplename new addr ) expressionstatement ) block ) functiondefinition
candidate: Set the amount of wei that the foundation can claim .
ref: Set the forwarding address for donated ether .

615:
src: ( functiondefinition ( simplename change owner two ) simplename change owner two ( visibility public ) visibility public ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new owner ) simplename new owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename owner changed ) simplename owner changed ( simplename owner ) simplename owner ( simplename new owner ) simplename new owner ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner two ) simplename owner two ( simplename new owner ) simplename new owner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the current owner to transfer control of the contract to a newOwner .
ref: Allows the current owner to transfer control of the contract to a newOwner .

616:
src: ( functiondefinition ( simplename unlock ) simplename unlock ( visibility public ) visibility public ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename lock info ) simplename lock info ( simpletype ( simplename token time lock info ) simplename token time lock info ) simpletype ) variabledeclaration ( indexaccess ( simplename locks ) simplename locks ( simplename id ) simplename id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename locks ) simplename locks ( simplename id ) simplename id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename lock info ) simplename lock info ( simplename amount ) simplename amount ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename lock info ) simplename lock info ( simplename unlock time ) simplename unlock time ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename unlock ) simplename unlock ( simplename id ) simplename id ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( memberaccess ( simplename lock info ) simplename lock info ( simplename token ) simplename token ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename lock info ) simplename lock info ( simplename beneficiary ) simplename beneficiary ) memberaccess ( memberaccess ( simplename lock info ) simplename lock info ( simplename amount ) simplename amount ) memberaccess ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Unlock tokens locked under time lock with given ID and transfer them to corresponding beneficiary .
ref: Unlock tokens locked under time lock with given ID and transfer them to corresponding beneficiary .

617:
src: ( functiondefinition ( simplename set token ) simplename set token ( visibility public ) visibility public ( variabledeclaration ( simplename promo ) simplename promo ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token ) simplename token ( functioncall ( simplename i promo ) simplename i promo ( simplename promo ) simplename promo ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to change the token address , in case of a given _price and assignes it to an address .
ref: set promo token .

618:
src: ( modifierdefinition ( simplename only owner or admin ) simplename only owner or admin ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin address ) simplename admin address ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner address ) simplename owner address ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the admin .
ref: Throws if called by any account other than the owner or admin .

619:
src: ( functiondefinition ( simplename get sum of values ) simplename get sum of values ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename values ) simplename values ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sum ) simplename sum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename values ) simplename values ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sum ) simplename sum ( functioncall ( memberaccess ( simplename sum ) simplename sum ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename values ) simplename values ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( simplename sum ) simplename sum ) returnstatement ) block ) functiondefinition
candidate: Returns the sum of all the values .
ref: Called internally by the airdrop function to ensure the contract holds enough tokens to succesfully execute the airdrop .

620:
src: ( functiondefinition ( simplename set crowdsale completed ) simplename set crowdsale completed ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename crowdsale contract ) simplename crowdsale contract ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename crowdsale completed ) simplename crowdsale completed ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale completed ) simplename crowdsale completed ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) functiondefinition
candidate: Allow completed crowdsale to set completed .
ref: This is called to unlock tokens once the crowdsale ( and subsequent audit + legal process ) are completed .

621:
src: ( functiondefinition ( simplename send award ) simplename send award ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename winner list ) simplename winner list ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename count ) simplename count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename winner list ) simplename winner list ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename count ) simplename count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( simplename this ) simplename this ( simplename send award to last winner ) simplename send award to last winner ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename j ) simplename j ( simplename count ) simplename count ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename j ) simplename j ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( simplename this ) simplename this ( simplename send award to last winner ) simplename send award to last winner ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename is ended ) simplename is ended ) modifierinvocation ) functiondefinition
candidate: use this function to send the default winner , they can only be called from the winner .
ref: send award to winner .

622:
src: ( functiondefinition ( simplename remove nftoken ) simplename remove nftoken ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename remove nftoken ) simplename remove nftoken ) memberaccess ( simplename from ) simplename from ( simplename token id ) simplename token id ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename owner to ids ) simplename owner to ids ( simplename from ) simplename from ) indexaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token to remove index ) simplename token to remove index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename id to owner index ) simplename id to owner index ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token index ) simplename last token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename owner to ids ) simplename owner to ids ( simplename from ) simplename from ) indexaccess ( simplename length ) simplename length ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token ) simplename last token ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename owner to ids ) simplename owner to ids ( simplename from ) simplename from ) indexaccess ( simplename last token index ) simplename last token index ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename owner to ids ) simplename owner to ids ( simplename from ) simplename from ) indexaccess ( simplename token to remove index ) simplename token to remove index ) indexaccess ( simplename last token ) simplename last token ) expressionstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( memberaccess ( indexaccess ( simplename owner to ids ) simplename owner to ids ( simplename from ) simplename from ) indexaccess ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to owner index ) simplename id to owner index ( simplename token id ) simplename token id ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename id to owner index ) simplename id to owner index ( simplename last token ) simplename last token ) indexaccess ( simplename token to remove index ) simplename token to remove index ) expressionstatement ) block ) functiondefinition
candidate: Use and override this function with caution .
ref: Use and override this function with caution .

623:
src: ( functiondefinition ( simplename add black list ) simplename add black list ( visibility public ) visibility public ( variabledeclaration ( simplename who ) simplename who ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename black list ) simplename black list ( simplename who ) simplename who ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename black list ) simplename black list ( simplename who ) simplename who ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add address to the black list .
ref: Add the blacklist member .

624:
src: ( functiondefinition ( simplename convert to <UNK> ) simplename convert to <UNK> ( visibility private ) visibility private ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename burn amount allowed ) simplename burn amount allowed ( simplename sender ) simplename sender ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename elixaddress ) simplename elixaddress ) functioncall ( simplename create amount from <UNK> address ) simplename create amount from <UNK> address ) memberaccess ( simplename amount ) simplename amount ( simplename sender ) simplename sender ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename burn amount allowed ) simplename burn amount allowed ( simplename sender ) simplename sender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: Send _amount amount of tokens to address _to .
ref: Conversion to ELIX function .

625:
src: ( functiondefinition ( simplename end tx ) simplename end tx ( visibility private ) visibility private ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys ) simplename keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename event data ) simplename event data ( simplename compressed data ) simplename compressed data ) memberaccess ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename event data ) simplename event data ( simplename compressed data ) simplename compressed data ) memberaccess ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename team ) simplename team ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename event data ) simplename event data ( simplename compressed ids ) simplename compressed ids ) memberaccess ( binaryoperation + ) binaryoperation + ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename event data ) simplename event data ( simplename compressed ids ) simplename compressed ids ) memberaccess ( simplename p id ) simplename p id ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename r id ) simplename r id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ( emitstatement ( functioncall ( memberaccess ( simplename f3 devents ) simplename f3 devents ( simplename on end tx ) simplename on end tx ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename compressed data ) simplename compressed data ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename compressed ids ) simplename compressed ids ) memberaccess ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename name ) simplename name ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename eth ) simplename eth ( simplename keys ) simplename keys ( memberaccess ( simplename event data ) simplename event data ( simplename winner addr ) simplename winner addr ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename winner id ) simplename winner id ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename amount won ) simplename amount won ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename new pot ) simplename new pot ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename event data ) simplename event data ( simplename gen amount ) simplename gen amount ) memberaccess ( memberaccess ( simplename event data ) simplename event data ( simplename pot amount ) simplename pot amount ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) emitstatement ) block ) functiondefinition
candidate: prepares compression data and fires event for buy or reload tx's .
ref: prepares compression data and fires event for buy or reload tx's .

626:
src: ( functiondefinition ( simplename set pixel color ) simplename set pixel color ( visibility default ) visibility default ( variabledeclaration ( simplename row ) simplename row ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename col ) simplename col ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename color ) simplename color ( simpletype ( simplename uint24 ) simplename uint24 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( indexaccess ( simplename pixels ) simplename pixels ( simplename row ) simplename row ) indexaccess ( simplename col ) simplename col ) indexaccess ( simplename color ) simplename color ) memberaccess ( simplename color ) simplename color ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename pixels ) simplename pixels ( simplename row ) simplename row ) indexaccess ( simplename col ) simplename col ) indexaccess ( simplename color ) simplename color ) memberaccess ( simplename color ) simplename color ) expressionstatement ( expressionstatement ( functioncall ( simplename pixel color ) simplename pixel color ( simplename row ) simplename row ( simplename col ) simplename col ( memberaccess ( indexaccess ( indexaccess ( simplename pixels ) simplename pixels ( simplename row ) simplename row ) indexaccess ( simplename col ) simplename col ) indexaccess ( simplename owner ) simplename owner ) memberaccess ( simplename color ) simplename color ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename valid pixel ) simplename valid pixel ( simplename row ) simplename row ( simplename col ) simplename col ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ( simplename row ) simplename row ( simplename col ) simplename col ) modifierinvocation ) functiondefinition
candidate: Public Owner Management API .
ref: Owner Management API .

627:
src: ( functiondefinition ( simplename core ) simplename core ( visibility private ) visibility private ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename plyr rnds ) simplename plyr rnds ( simplename p id ) simplename p id ) indexaccess ( simplename r id ) simplename r id ) indexaccess ( simplename keys ) simplename keys ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename event data ) simplename event data ( functioncall ( simplename manage player ) simplename manage player ( simplename p id ) simplename p id ( simplename event data ) simplename event data ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename keys ) simplename keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename eth ) simplename eth ) memberaccess ) tupleexpression ( simplename keys rec ) simplename keys rec ) memberaccess ( simplename eth ) simplename eth ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename keys ) simplename keys ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename update timer ) simplename update timer ( simplename keys ) simplename keys ( simplename r id ) simplename r id ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( simplename p id ) simplename p id ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( simplename p id ) simplename p id ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename update last buy keys pids ) simplename update last buy keys pids ( simplename r id ) simplename r id ( simplename p id ) simplename p id ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id
candidate: this is the core logic for any buy / reload that happens while a round is live .
ref: this is the core logic for any buy / reload that happens while a round is live .

628:
src: ( functiondefinition ( simplename distribute external ) simplename distribute external ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p1 ) simplename p1 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename com ) simplename com ( functioncall ( memberaccess ( simplename com ) simplename com ( simplename add ) simplename add ) memberaccess ( simplename p1 ) simplename p1 ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename p3d ) simplename p3d ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( functioncall ( memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename admin ) simplename admin ) functioncall ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( simplename com ) simplename com ) functioncall ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename p3d ) simplename p3d ( simplename com ) simplename com ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename com ) simplename com ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename aff ) simplename aff ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename aff id ) simplename aff id ( simplename p id ) simplename p id ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename aff id ) simplename aff id ) indexaccess ( simplename name ) simplename name ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename
candidate: distributes eth based on fees to com , aff , and p3d .
ref: distributes eth based on fees to com , aff , and p3d .

629:
src: ( functiondefinition ( simplename exchange ) simplename exchange ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get price ) simplename get price ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename num tokens ) simplename num tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( simplename price ) simplename price ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename num tokens ) simplename num tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename receiver ) simplename receiver ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename receiver ) simplename receiver ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount raised ) simplename amount raised ( functioncall ( memberaccess ( simplename amount raised ) simplename amount raised ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename token owner ) simplename token owner ( simplename receiver ) simplename receiver ( simplename num tokens ) simplename num tokens ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( simplename receiver ) simplename receiver ( simplename amount ) simplename amount ( booleanliteral true ) booleanliteral true ( simplename amount raised ) simplename amount raised ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfer bounty exchange from exchange to target address .
ref: Make an exchangement .

630:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( simplename m total supply ) simplename m total supply ) returnstatement ) block ) functiondefinition
candidate: total number of tokens in existence .
ref: the total supply of the token .

631:
src: ( functiondefinition ( simplename get identity info ) simplename get identity info ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( tupleexpression ( simplename override ) simplename override ( simplename owner ) simplename owner ( functioncall ( simplename bytes32 to string ) simplename bytes32 to string ( simplename identity name ) simplename identity name ) functioncall ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Get the identity info for an address .
ref: Get the identity detail information .

632:
src: ( functiondefinition ( simplename at ) simplename at ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename d ) simplename d ( simpletype ( simplename dapp ) simplename dapp ) simpletype ) variabledeclaration ( indexaccess ( simplename dapps ) simplename dapps ( indexaccess ( simplename ids ) simplename ids ( simplename index ) simplename index ) indexaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename id ) simplename id ( memberaccess ( simplename d ) simplename d ( simplename id ) simplename id ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( memberaccess ( simplename d ) simplename d ( simplename owner ) simplename owner ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: returns the amount of fees to the owner .
ref: a dapp from the list .

633:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The only ether from contract can be called by the owner .
ref: Withdraw amount to owner .

634:
src: ( functiondefinition ( simplename finish minting ) simplename finish minting ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minting finished ) simplename minting finished ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename mint finished ) simplename mint finished ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner or manager ) simplename only owner or manager ) modifierinvocation ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ) functiondefinition
candidate: Function to stop minting new tokens .
ref: Function to stop minting new tokens .

635:
src: ( functiondefinition ( simplename unfreeze ) simplename unfreeze ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename ico ) simplename ico ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is frozen ) simplename is frozen ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) functiondefinition
candidate: Allow token transfer .
ref: Allow token transfer .

636:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: A contract attempts to get the coins .
ref: A contract attempts to get the coins .

637:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename spender ) simplename spender ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Allows other address to spend tokens on behalf of msg . sender .
ref: Allows the owner of tokens to approve another to spend tokens on his or her behalf .

638:
src: ( functiondefinition ( simplename try advance ) simplename try advance ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename king total points ) simplename king total points ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( functioncall ( simplename calculate points ) simplename calculate points ( simplename crowned time ) simplename crowned time ( simplename now ) simplename now ) functioncall ( memberaccess ( indexaccess ( simplename players ) simplename players ( simplename king ) simplename king ) indexaccess ( simplename points ) simplename points ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename king total points ) simplename king total points ( simplename points to win ) simplename points to win ( block ( expressionstatement ( functioncall ( simplename force advance ) simplename force advance ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: checks if the address already in the active .
ref: Utility function to advance the round / payout the winner .

639:
src: ( functiondefinition ( simplename max token purchase ) simplename max token purchase ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename spend ) simplename spend ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename available tokens ) simplename available tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token cap phase two ) simplename token cap phase two ( simplename sub ) simplename sub ) memberaccess ( simplename tokens purchased ) simplename tokens purchased ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename funding goal offset ) simplename funding goal offset ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename funding goal ) simplename funding goal ( simplename sub ) simplename sub ) memberaccess ( simplename total received ) simplename total received ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename max investment ) simplename max investment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename buyins ) simplename buyins ( simplename receiver ) simplename receiver ) indexaccess ( simplename received ) simplename received ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max investment ) simplename max investment ( functioncall ( memberaccess ( simplename available tokens ) simplename available tokens ( simplename mul ) simplename mul ) memberaccess ( simplename auction end price ) simplename auction end price ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max investment ) simplename max investment ( functioncall ( memberaccess ( simplename available tokens ) simplename available tokens ( simplename mul ) simplename mul ) memberaccess ( simplename fixed price ) simplename fixed price ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename max investment ) simplename max investment ( simplename funding goal offset ) simplename funding goal offset ( block ( returnstatement ( simplename funding goal offset ) simplename funding goal offset ) returnstatement ) block ( block ( returnstatement ( simplename max investment ) simplename max investment ) returnstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename when active ) simplename when active ) modifierinvocation ( modifierinvocation ( simplename only in phase 2 ) simplename only in phase 2 ) modifierinvocation ) functiondefinition
candidate: Get maximum tokens purchase in wei .
ref: Maximum current purchase amount in Phase 2 .

640:
src: ( functiondefinition ( simplename setup race ) simplename setup race ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename betting period ) simplename betting period ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> period ) simplename <UNK> period ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( functioncall ( memberaccess ( simplename oraclize lib ) simplename oraclize lib ( simplename oraclize get price ) simplename oraclize get price ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename dogs count ) simplename dogs count ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename chronus ) simplename chronus ( simplename starting time ) simplename starting time ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename chronus ) simplename chronus ( simplename betting open ) simplename betting open ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename delay ) simplename delay ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename betting period ) simplename betting period ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename chronus ) simplename chronus ( simplename betting duration ) simplename betting duration ) memberaccess ( simplename delay ) simplename delay ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename oraclize query ids ) simplename oraclize query ids ( functioncall ( memberaccess ( simplename oraclize lib ) simplename oraclize lib ( simplename oraclize query ) simplename oraclize query ) memberaccess ( simplename delay ) simplename delay ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename oraclize query ids ) simplename oraclize query ids ( functioncall ( memberaccess ( simplename oraclize lib ) simplename oraclize lib ( simplename oraclize query ) simplename oraclize query ) memberaccess ( simplename delay ) simplename delay ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename oraclize query ids ) simplename oraclize query ids ( functioncall ( memberaccess ( simplename oraclize lib ) simplename oraclize lib ( simplename oraclize query ) simplename oraclize query ) memberaccess ( simplename delay ) simplename delay ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess
candidate: method to place the oraclize queries .
ref: race lifecycle management functions place the oraclize queries and open betting .

641:
src: ( functiondefinition ( simplename get bracket data finals ) simplename get bracket data finals ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename a ) simplename a ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename a ) simplename a ( memberaccess ( simplename brackets results ) simplename brackets results ( simplename finals teams ids ) simplename finals teams ids ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: return all data about to get the second array .
ref: Testing function to corroborate <UNK> data from oraclize call .

642:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is user in black list ) simplename is user in black list ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Transfer token for a specified address .
ref: transfer token for a specified address .

643:
src: ( modifierdefinition ( simplename only whitelist manager ) simplename only whitelist manager ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename whitelist manager ) simplename whitelist manager ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account that's not whitelisted .
ref: Throws if called by any account other than the whitelist manager .

644:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename mint done ) simplename mint done ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename tmp from ) simplename tmp from ( simpletype ( simplename account ) simplename account ) simpletype ) variabledeclaration ( indexaccess ( simplename accounts ) simplename accounts ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename tmp from ) simplename tmp from ( simplename value mod ) simplename value mod ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename from ) simplename from ( simpletype ( simplename account ) simplename account ) simpletype ) variabledeclaration ( functioncall ( simplename update account ) simplename update account ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename update mode ) simplename update mode ( simplename both ) simplename both ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename to ) simplename to ( simpletype ( simplename account ) simplename account ) simpletype ) variabledeclaration ( functioncall ( simplename update account ) simplename update account ( simplename to ) simplename to ( memberaccess ( simplename update mode ) simplename update mode ( simplename both ) simplename both ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename from ) simplename from ( simplename value mod ) simplename value mod ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename from ) simplename from ( simplename value mod ) simplename value mod ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename to ) simplename to ( simplename value mod ) simplename value mod ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename to ) simplename to ( simplename value mod ) simplename value mod ) memberaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Send _value amount of tokens from address _from to address _to .
ref: Send _value amount of tokens to address _to .

645:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is burned ) simplename is burned ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Burn token of an specified address .
ref: Burning <UNK> Tokens .

646:
src: ( functiondefinition ( simplename receive player info ) simplename receive player info ( visibility external ) visibility external ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename laff ) simplename laff ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename chives book ) simplename chives book ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename p idx addr ) simplename p idx addr ( simplename addr ) simplename addr ) indexaccess ( simplename p id ) simplename p id ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename p idx addr ) simplename p idx addr ( simplename addr ) simplename addr ) indexaccess ( simplename p id ) simplename p id ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename p idx name ) simplename p idx name ( simplename name ) simplename name ) indexaccess ( simplename p id ) simplename p id ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename p idx name ) simplename p idx name ( simplename name ) simplename name ) indexaccess ( simplename p id ) simplename p id ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename addr ) simplename addr ) memberaccess ( simplename addr ) simplename addr ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename addr ) simplename addr ) memberaccess ( simplename addr ) simplename addr ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename name ) simplename name ) memberaccess ( simplename name ) simplename name ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename name ) simplename name ) memberaccess ( simplename name ) simplename name ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename laff ) simplename laff ) memberaccess ( simplename laff ) simplename laff ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename laff ) simplename laff ) memberaccess ( simplename laff ) simplename laff ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( indexaccess ( simplename
candidate: receives name / player info from names contract .
ref: receives name / player info from names contract .

647:
src: ( modifierdefinition ( simplename distribute sale input ) simplename distribute sale input ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename contract owner commision ) simplename contract owner commision ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename player share ) simplename player share ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename contract owner commision ) simplename contract owner commision ( tupleexpression ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename player share ) simplename player share ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename contract owner commision ) simplename contract owner commision ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename contract owner commision ) simplename contract owner commision ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename player share ) simplename player share ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( indexaccess ( simplename address info ) simplename address info ( simplename owner ) simplename owner ) indexaccess ( simplename withdrawal ) simplename withdrawal ) memberaccess ( simplename player share ) simplename player share ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( indexaccess ( simplename address info ) simplename address info ( simplename contract owner ) simplename contract owner ) indexaccess ( simplename withdrawal ) simplename withdrawal ) memberaccess ( simplename contract owner commision ) simplename contract owner commision ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename pending withdrawal ) simplename pending withdrawal ( binaryoperation + ) binaryoperation + ( simplename player share ) simplename player share ( simplename contract owner commision ) simplename contract owner commision ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: when sale is finalized , and owner can call this function .
ref: Distribute sale eth input .

648:
src: ( functiondefinition ( simplename un blacklist ) simplename un blacklist ( visibility public ) visibility public ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename blacklisted ) simplename blacklisted ( simplename account ) simplename account ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( emitstatement ( functioncall ( simplename un blacklisted ) simplename un blacklisted ( simplename account ) simplename account ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only blacklister ) simplename only blacklister ) modifierinvocation ) functiondefinition
candidate: Remove _account from an account .
ref: Removes account from blacklist .

649:
src: ( modifierdefinition ( simplename having roll address ) simplename having roll address ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename roll address ) simplename roll address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: requires the caller to be a function with this modifier can only be called from a contract address .
ref: Requires that the roll address was set .

650:
src: ( functiondefinition ( simplename get jackpot round end time ) simplename get jackpot round end time ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation + ) binaryoperation + ( simplename last action ) simplename last action ( simplename time before jackpot ) simplename time before jackpot ) returnstatement ) block ) functiondefinition
candidate: Function to check the current round .
ref: Return end time for the jackpot round .

651:
src: ( functiondefinition ( simplename finalize bet ) simplename finalize bet ( visibility public ) visibility public ( variabledeclaration ( simplename bet id ) simplename bet id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current time stamp ) simplename current time stamp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new market cap ) simplename new market cap ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename bet id ) simplename bet id ( simplename num bets ) simplename num bets ( binaryoperation < ) binaryoperation < ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename status ) simplename status ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename current time stamp ) simplename current time stamp ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename time stamp evaluation ) simplename time stamp evaluation ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename new market cap ) simplename new market cap ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result amount ) simplename result amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename bet amount ) simplename bet amount ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename initial market cap ) simplename initial market cap ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( simplename decimals factor ) simplename decimals factor ) functioncall ) tupleexpression ( simplename div ) simplename div ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( simplename new market cap ) simplename new market cap ) functioncall ) functioncall ) tupleexpression ) functioncall ) tupleexpression ( simplename div ) simplename div ) memberaccess ( simplename decimals factor ) simplename decimals factor ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename result amount ) simplename result amount ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename bet amount ) simplename bet amount ) memberaccess ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( binaryoperation >= ) binaryoperation >= ( simplename result amount ) simplename result amount ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename bet mapping ) simplename bet mapping ( simplename bet id ) simplename bet id ) indexaccess ( simplename bet amount
candidate: This function will finalize the bet , if the swap , and adds a bet is valid .
ref: Finalize a bet and transfer the resulting amount to the better .

652:
src: ( functiondefinition ( simplename bet ) simplename bet ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename better ) simplename better ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bet amount ) simplename bet amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename bet amount ) simplename bet amount ( simplename min bet amount ) simplename min bet amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename better bet amounts ) simplename better bet amounts ( simplename better ) simplename better ) indexaccess ( simplename team ) simplename team ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename better bet amounts ) simplename better bet amounts ( simplename better ) simplename better ) indexaccess ( simplename team ) simplename team ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename bet amount ) simplename bet amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total bet amount ) simplename total bet amount ( functioncall ( memberaccess ( simplename total bet amount ) simplename total bet amount ( simplename add ) simplename add ) memberaccess ( simplename bet amount ) simplename bet amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename team total bet amount ) simplename team total bet amount ( simplename team ) simplename team ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename team total bet amount ) simplename team total bet amount ( simplename team ) simplename team ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename bet amount ) simplename bet amount ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename total bets ) simplename total bets ) expressionstatement ( expressionstatement ( functioncall ( simplename bet placed ) simplename bet placed ( simplename better ) simplename better ( simplename bet amount ) simplename bet amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not closed ) simplename when not closed ) modifierinvocation ( modifierinvocation ( simplename is valid team ) simplename is valid team ( simplename team ) simplename team ) modifierinvocation ) functiondefinition
candidate: Function for user to bet on team idx , .
ref: Places a bet for a given team .

653:
src: ( functiondefinition ( simplename create forwarder ) simplename create forwarder ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new forwarder ) simplename new forwarder ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename forwarder ) simplename forwarder ) simpletype ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename deployed forwarders ) simplename deployed forwarders ( simplename push ) simplename push ) memberaccess ( simplename new forwarder ) simplename new forwarder ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename last forwarder created ) simplename last forwarder created ( simplename new forwarder ) simplename new forwarder ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename forwarders count ) simplename forwarders count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( emitstatement ( functioncall ( simplename forwarder created ) simplename forwarder created ( simplename new forwarder ) simplename new forwarder ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner or creator ) simplename only owner or creator ) modifierinvocation ) functiondefinition
candidate: Create new instance of contract .
ref: Create new Forwarder .

654:
src: ( functiondefinition ( simplename set next upgrade agent ) simplename set next upgrade agent ( visibility external ) visibility external ( variabledeclaration ( simplename agent ) simplename agent ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename agent ) simplename agent ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename next upgrade master ) simplename next upgrade master ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename next upgrade agent ) simplename next upgrade agent ( functioncall ( simplename next upgrade agent ) simplename next upgrade agent ( simplename agent ) simplename agent ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename next upgrade agent ) simplename next upgrade agent ( simplename is upgrade agent ) simplename is upgrade agent ) memberaccess ) functioncall ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename next upgrade agent ) simplename next upgrade agent ( simplename set original supply ) simplename set original supply ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename upgrade agent set ) simplename upgrade agent set ( simplename next upgrade agent ) simplename next upgrade agent ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Set an upgrade agent that handles .
ref: Set address of next upgrade target contract and enable upgrade process .

655:
src: ( functiondefinition ( simplename reclaim token ) simplename reclaim token ( visibility external ) visibility external ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 basic ) simplename erc20 basic ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename token ) simplename token ( simplename art token contract ) simplename art token contract ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename owner ) simplename owner ( simplename balance ) simplename balance ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Reclaim all ERC20Basic compatible tokens .
ref: Reclaim all ( <UNK> ART ) ERC20Basic compatible tokens .

656:
src: ( functiondefinition ( simplename set covman ) simplename set covman ( visibility public ) visibility public ( variabledeclaration ( simplename new covman ) simplename new covman ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new covman ) simplename new covman ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename covman address ) simplename covman address ( simplename new covman ) simplename new covman ) expressionstatement ) block ( modifierinvocation ( simplename only covman ) simplename only covman ) modifierinvocation ) functiondefinition
candidate: Assigns a new address to act as the COO .
ref: Assigns a new address to act as the <UNK> .

657:
src: ( functiondefinition ( simplename pre sale open ) simplename pre sale open ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( tupleexpression ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename presale start time ) simplename presale start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename presale end time ) simplename presale end time ( binaryoperation < ) binaryoperation < ( simplename pre sale wei raised ) simplename pre sale wei raised ( simplename hard cap in wei presale ) simplename hard cap in wei presale ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: sale start time .
ref: return if the presale is open .

658:
src: ( functiondefinition ( simplename player info ) simplename player info ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename input ) simplename input ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename timestamp ) simplename timestamp ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename in game ) simplename in game ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename input ) simplename input ( simplename timestamp ) simplename timestamp ( simplename in game ) simplename in game ) tupleexpression ( functioncall ( memberaccess ( simplename m players storage ) simplename m players storage ( simplename player info ) simplename player info ) memberaccess ( simplename addr ) simplename addr ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename at state ) simplename at state ( memberaccess ( simplename state ) simplename state ( simplename active ) simplename active ) memberaccess ) modifierinvocation ( modifierinvocation ( simplename game is available ) simplename game is available ) modifierinvocation ) functiondefinition
candidate: Get info about specified player .
ref: Get info about specified player .

659:
src: ( functiondefinition ( simplename pause phase ) simplename pause phase ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico on paused ) simplename ico on paused ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Called by the owner on emergency , triggers paused state .
ref: Called by the owner , to emergency pause the current phase .

660:
src: ( functiondefinition ( simplename app selectors ) simplename app selectors ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename selector ) simplename selector ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename selector ) simplename selector ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the location of an app's function as a given called from the Admin .
ref: Storage seed for a function <UNK> implementation address .

661:
src: ( functiondefinition ( simplename deposit tokens ) simplename deposit tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename manufacturer id ) simplename manufacturer id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename manufacturer id ) simplename manufacturer id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename manufacturer ) simplename manufacturer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename manufacturer rewards ) simplename manufacturer rewards ( simplename manufacturer id ) simplename manufacturer id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename manufacturer ) simplename manufacturer ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename deposit tokens ) simplename deposit tokens ( simplename manufacturer ) simplename manufacturer ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename tokens deposited ) simplename tokens deposited ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename manufacturer id ) simplename manufacturer id ( simplename manufacturer ) simplename manufacturer ( simplename amount ) simplename amount ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: This is used for the default function , allowing the ability to deposit .
ref: anyone can donate tokens to a <UNK> pool .

662:
src: ( modifierdefinition ( simplename only owner ) simplename only owner ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the owner .
ref: Throws if called by any account other than the owner .

663:
src: ( functiondefinition ( simplename reserve tokens ) simplename reserve tokens ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens qty ) simplename tokens qty ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename distributed ) simplename distributed ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens distributed ) simplename tokens distributed ( simplename add ) simplename add ) memberaccess ( simplename tokens qty ) simplename tokens qty ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename distributed ) simplename distributed ( simplename tokens total supply ) simplename tokens total supply ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token balances ) simplename token balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ( functioncall ( memberaccess ( simplename tokens qty ) simplename tokens qty ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename token balances ) simplename token balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens distributed ) simplename tokens distributed ( simplename distributed ) simplename distributed ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename acj token ) simplename acj token ) simpletype ) variabledeclaration ( functioncall ( simplename acj token ) simplename acj token ( simplename token ) simplename token ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename initial transfer ) simplename initial transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens qty ) simplename tokens qty ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename admin only ) simplename admin only ) modifierinvocation ( modifierinvocation ( simplename below total supply ) simplename below total supply ) modifierinvocation ) functiondefinition
candidate: Distributes the tokens .
ref: Pre-ICO and offline Investors , collaborators and team tokens .

664:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename amount ) simplename amount ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The only ether was sent to this contract .
ref: Contract balance withdrawal .

665:
src: ( functiondefinition ( simplename buy for ) simplename buy for ( visibility default ) visibility default ( variabledeclaration ( simplename user ) simplename user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ) returnstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current index ) simplename current index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename dynamic ) simplename dynamic ( simplename current index ) simplename current index ) memberaccess ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename current index ) simplename current index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( functioncall ( memberaccess ( simplename dynamic ) simplename dynamic ( simplename revealed curves ) simplename revealed curves ) memberaccess ) functioncall ( block ( variabledeclarationstatement ( variabledeclaration ( simplename limit ) simplename limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename limit ) simplename limit ) tupleexpression ( functioncall ( memberaccess ( simplename dynamic ) simplename dynamic ( simplename curves ) simplename curves ) memberaccess ( simplename current index ) simplename current index ) functioncall ) expressionstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename limit ) simplename limit ( functioncall ( memberaccess ( simplename sale ) simplename sale ( simplename total normal collected ) simplename total normal collected ) memberaccess ) functioncall ( returnstatement ) returnstatement ) ifstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bought tokens ) simplename bought tokens ( booleanliteral true ) booleanliteral true ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old contract eth balance ) simplename old contract eth balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename sale ) simplename sale ( simplename proxy payment ) simplename proxy payment ) memberaccess ( simplename value ) simplename value ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename bounty ) simplename bounty ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename old contract eth balance ) simplename old contract eth balance ( throwstatement throw ) throwstatement throw ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eth spent ) simplename eth spent ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename old contract eth balance ) simplename old contract eth balance ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename purchased snt ) simplename purchased snt
candidate: Buys tokens in the crowdsale and rewards the caller , callable by anyone .
ref: Buys tokens in the crowdsale and rewards the given address .

666:
src: ( functiondefinition ( simplename withdraw eth batch ) simplename withdraw eth batch ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wallets ) simplename wallets ( array ( simpletype ( simplename wallet ) simplename wallet ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename size ) simplename size ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename wallets ) simplename wallets ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename wallet ) simplename wallet ( simpletype ( simplename wallet ) simplename wallet ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename size ) simplename size ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wallet ) simplename wallet ( indexaccess ( simplename wallets ) simplename wallets ( simplename i ) simplename i ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename balance ) simplename balance ( memberaccess ( simplename wallet ) simplename wallet ( simplename balance ) simplename balance ) memberaccess ) expressionstatement ( ifstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ether ) simplename transfer ether ) memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) functioncall ( block ( emitstatement ( functioncall ( simplename withdraw eth ) simplename withdraw eth ( simplename wallet ) simplename wallet ( simplename forward ) simplename forward ( simplename balance ) simplename balance ) functioncall ) emitstatement ) block ) ifstatement ) block ) forstatement ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename forward ) simplename forward ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only worker ) simplename only worker ) modifierinvocation ) functiondefinition
candidate: Withdraws all ETH deposited from the contract .
ref: Withdraws all ETH from a list of wallets and sends all the funds to the forward address .

667:
src: ( functiondefinition ( simplename migrate craft token master ) simplename migrate craft token master ( visibility public ) visibility public ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new master contract ) simplename new master contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename craft token ) simplename craft token ( indexaccess ( simplename emoji craft token address ) simplename emoji craft token address ( simplename token id ) simplename token id ) indexaccess ) functioncall ( simplename set contract master ) simplename set contract master ) memberaccess ( simplename new master contract ) simplename new master contract ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only clevel ) simplename only clevel ) modifierinvocation ) functiondefinition
candidate: For creating contracts .
ref: Here for bug related migration .

668:
src: ( functiondefinition ( simplename is activated ) simplename is activated ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation && ) binaryoperation && ( indexaccess ( simplename activated ) simplename activated ( simplename this ) simplename this ) indexaccess ( indexaccess ( simplename activated ) simplename activated ( simplename escbdev multisig ) simplename escbdev multisig ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: used to make sure no one can interact with contract until it has been activated .
ref: Whether the needed accounts have activated the sale .

669:
src: ( functiondefinition ( simplename add player order ) simplename add player order ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename round id ) simplename round id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys ) simplename keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys available ) simplename keys available ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename keys eth ) simplename keys eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename address2 pid ) simplename address2 pid ( simplename addr ) simplename addr ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename p id ) simplename p id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename round id ) simplename round id ( simplename round id ) simplename round id ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename keys ) simplename keys ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename eth ) simplename eth ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename <UNK> ) simplename <UNK> ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename keys available ) simplename keys available ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename p id2 round ) simplename p id2 round ( simplename p id ) simplename p id ) indexaccess ( simplename round id ) simplename round id ) indexaccess ( simplename eth ) simplename eth ) memberaccess ( simplename keys eth ) simplename keys eth ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename p id2 round ) simplename p id2 round ( simplename p id ) simplename p id ) indexaccess ( simplename round id ) simplename round id ) indexaccess ( simplename keys ) simplename keys ) memberaccess ( simplename keys available ) simplename keys available ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename player order ) simplename player order
candidate: buy a player by sending round .
ref: add player order .

670:
src: ( functiondefinition ( simplename add to whitelist ) simplename add to whitelist ( visibility public ) visibility public ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename address ) simplename address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename whitelist add ) simplename whitelist add ( simplename whitelister ) simplename whitelister ( simplename address ) simplename address ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename address ) simplename address ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only whitelister ) simplename only whitelister ) modifierinvocation ) functiondefinition
candidate: Add address to the whitelist .
ref: Only callable by the whitelister .

671:
src: ( functiondefinition ( simplename decrease approval ) simplename decrease approval ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename subtracted value ) simplename subtracted value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old value ) simplename old value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename subtracted value ) simplename subtracted value ( simplename old value ) simplename old value ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( functioncall ( memberaccess ( simplename old value ) simplename old value ( simplename sub ) simplename sub ) memberaccess ( simplename subtracted value ) simplename subtracted value ) functioncall ) expressionstatement ) block ) ifstatement ( emitstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Decrease the amount of tokens that an owner allowed to a spender .
ref: Decrease the amount of tokens that an owner allowed to a spender .

672:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Send _value amount of tokens from address _from to address _to .
ref: Send _value amount of tokens from address _from to address _to .

673:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename token per owners ) simplename token per owners ( simplename owner ) simplename owner ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Returns the number of tokens owned by a specific address .
ref: This function is used to find the number of tokens that a given address owns .

674:
src: ( functiondefinition ( simplename get winner key ) simplename get winner key ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename total buyers ) simplename total buyers ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename n ) simplename n ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( dowhilestatement ( booleanliteral true ) booleanliteral true ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ( simplename at ticket ) simplename at ticket ) memberaccess ( simplename winner ticket ) simplename winner ticket ( block ( returnstatement ( simplename i ) simplename i ) returnstatement ) block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( memberaccess ( indexaccess ( simplename buyers ) simplename buyers ( simplename j ) simplename j ) indexaccess ( simplename at ticket ) simplename at ticket ) memberaccess ( simplename winner ticket ) simplename winner ticket ( block ( returnstatement ( simplename j ) simplename j ) returnstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( tupleexpression ( binaryoperation + ) binaryoperation + ( binaryoperation - ) binaryoperation - ( simplename j ) simplename j ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( simplename j ) simplename j ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename n ) simplename n ( binaryoperation + ) binaryoperation + ( tupleexpression ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename j ) simplename j ( simplename i ) simplename i ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( simplename i ) simplename i ) expressionstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( memberaccess ( indexaccess ( simplename buyers ) simplename buyers ( simplename n ) simplename n ) indexaccess ( simplename at ticket ) simplename at ticket ) memberaccess ( simplename winner ticket ) simplename winner ticket ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( simplename n ) simplename n ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename j ) simplename j ( simplename n ) simplename n ) expressionstatement ) block ) ifstatement ) block ) dowhilestatement ) block ) functiondefinition
candidate: Determines the winner .
ref: Get the winner key for a winner ticket .

675:
src: ( functiondefinition ( simplename pull rip cord ) simplename pull rip cord ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total pool ) simplename total pool ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename prize pool ) simplename prize pool ( simplename add ) simplename add ) memberaccess ( simplename giveth pool ) simplename giveth pool ) functioncall ) tupleexpression ( simplename add ) simplename add ) memberaccess ( simplename admin pool ) simplename admin pool ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename btctkn ) simplename btctkn ( simplename transfer from ) simplename transfer from ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename administrator ) simplename administrator ( simplename total pool ) simplename total pool ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename selfdestruct ) simplename selfdestruct ( simplename administrator ) simplename administrator ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is administrator ) simplename is administrator ) modifierinvocation ) functiondefinition
candidate: The emergency escape hatch in case something has issues with bonus tokens .
ref: The emergency escape hatch in case something has gone wrong .

676:
src: ( functiondefinition ( simplename refund ) simplename refund ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( simplename refund status ) simplename refund status ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename batch size ) simplename batch size ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( conditional ( binaryoperation < ) binaryoperation < ( functioncall ( memberaccess ( simplename count investors refunded ) simplename count investors refunded ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename count total investors ) simplename count total investors ( functioncall ( memberaccess ( simplename count investors refunded ) simplename count investors refunded ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename count total investors ) simplename count total investors ) conditional ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename count investors refunded ) simplename count investors refunded ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename batch size ) simplename batch size ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename investor address ) simplename investor address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename investor list ) simplename investor list ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename investor struct ) simplename investor struct ( simpletype ( simplename investor ) simplename investor ) simpletype ) variabledeclaration ( indexaccess ( simplename investors ) simplename investors ( simplename investor address ) simplename investor address ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename investor struct ) simplename investor struct ( simplename exh sent crowdsale type1 ) simplename exh sent crowdsale type1 ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename investor struct ) simplename investor struct ( simplename exh sent crowdsale type1 ) simplename exh sent crowdsale type1 ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename investor address ) simplename investor address ) indexaccess ( block ( expressionstatement ( functioncall ( memberaccess ( simplename investor address ) simplename investor address ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename investor struct ) simplename investor struct ( simplename wei received crowdsale type1 ) simplename wei received crowdsale type1 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ethreceived ) simplename ethreceived ( functioncall ( memberaccess ( simplename ethreceived ) simplename ethreceived ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename investor struct ) simplename investor struct ( simplename wei received crowdsale type1 ) simplename wei received crowdsale type1 ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall
candidate: Refund the investors in case target of crowdsale not reached and refund the investor can refunded .
ref: Refund the investors in case target of crowdsale not achieved .

677:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename to ) simplename to ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

678:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( simplename from ) simplename from ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename approved ) simplename approved ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename to ) simplename to ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

679:
src: ( functiondefinition ( simplename withdraw ether ) simplename withdraw ether ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ether amount ) simplename ether amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename transfer ) simplename transfer ) memberaccess ( simplename ether amount ) simplename ether amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: transfer balance to owner .
ref: called by the owner to transfer <UNK> to 'beneficiary' .

680:
src: ( functiondefinition ( simplename generate order hashes ) simplename generate order hashes ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token and eoa addresses ) simplename token and eoa addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename maker order hash ) simplename maker order hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taker order hash ) simplename taker order hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename token and eoa addresses ) simplename token and eoa addresses ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename amounts expiration and salt ) simplename amounts expiration and salt ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( tupleexpression ( simplename maker order hash ) simplename maker order hash ( simplename taker order hash ) simplename taker order hash ) tupleexpression
candidate: The following functions designed to have no longer have a buy order for a buy shares .
ref: Calculates Keccak-256 hash of order with specified parameters .

681:
src: ( functiondefinition ( simplename close claims ) simplename close claims ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename allow claiming ) simplename allow claiming ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: called by the owner to close the crowdsale .
ref: Closes the opportunity to claim free blocks for the owner for good .

682:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility default ) visibility default ( variabledeclaration ( simplename amount in weis ) simplename amount in weis ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename log withdrawal ) simplename log withdrawal ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount in weis ) simplename amount in weis ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update solvency ) simplename update solvency ( tupleexpression ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( simplename amount in weis ) simplename amount in weis ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update profit ) simplename update profit ( simplename amount in weis ) simplename amount in weis ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount in weis ) simplename amount in weis ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: The owner withdraws Ether from the contract .
ref: The owner withdraws Ether from the contract .

683:
src: ( functiondefinition ( simplename order ) simplename order ( visibility public ) visibility public ( variabledeclaration ( simplename token get ) simplename token get ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount get ) simplename amount get ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token give ) simplename token give ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount give ) simplename amount give ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename expires ) simplename expires ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename hash ) simplename hash ( functioncall ( simplename sha256 ) simplename sha256 ( simplename this ) simplename this ( simplename token get ) simplename token get ( simplename amount get ) simplename amount get ( simplename token give ) simplename token give ( simplename amount give ) simplename amount give ( simplename expires ) simplename expires ( simplename nonce ) simplename nonce ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename orders ) simplename orders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename hash ) simplename hash ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename order ) simplename order ( simplename token get ) simplename token get ( simplename amount get ) simplename amount get ( simplename token give ) simplename token give ( simplename amount give ) simplename amount give ( simplename expires ) simplename expires ( simplename nonce ) simplename nonce ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Exchange msg . sender .
ref: Exchange specific functions .

684:
src: ( functiondefinition ( simplename convert to <UNK> ) simplename convert to <UNK> ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename eth <UNK> ) simplename eth <UNK> ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: user can call this function to get their amount of tokens .
ref: Convert you Eth to <UNK> .

685:
src: ( functiondefinition ( simplename set card perk text ) simplename set card perk text ( visibility external ) visibility external ( variabledeclaration ( simplename card id ) simplename card id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename perk text ) simplename perk text ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename card claimer ) simplename card claimer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename card claimer ) simplename card claimer ) tupleexpression ( functioncall ( memberaccess ( simplename storage contract ) simplename storage contract ( simplename all cards ) simplename all cards ) memberaccess ( simplename card id ) simplename card id ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename card claimer ) simplename card claimer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename perk text ) simplename perk text ) functioncall ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update card perk text ) simplename update card perk text ( simplename card id ) simplename card id ( simplename perk text ) simplename perk text ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename card perk text updated ) simplename card perk text updated ( simplename card id ) simplename card id ( simplename perk text ) simplename perk text ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Set new data of a new card .
ref: The <UNK> perk text is displayed <UNK> on its profile and will likely be used for promotional reasons .

686:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint48 ) simplename uint48 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename custom fallback ) simplename custom fallback ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( functioncall ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) functioncall ( simplename value ) simplename value ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename contract receiver ) simplename contract receiver ) simpletype ) variabledeclaration ( functioncall ( simplename contract receiver ) simplename contract receiver ( simplename to ) simplename to ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename receiver ) simplename receiver ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) simpletypeexpression ( functioncall ( simplename sha3 ) simplename sha3 ( simplename custom fallback ) simplename custom fallback ) functioncall ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( functioncall ( simplename transfer to address ) simplename transfer to address ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) returnstatement ) block
candidate: Function that is called when a user or another contract wants to transfer funds .
ref: Function that is called when a user or another contract wants to transfer funds .

687:
src: ( functiondefinition ( simplename finish bet ) simplename finish bet ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename roll ) simplename roll ( simpletype ( simplename player roll ) simplename player roll ) simpletype ) variabledeclaration ( indexaccess ( simplename player rolls ) simplename player rolls ( simplename target ) simplename target ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename roll ) simplename roll ( simplename token value ) simplename token value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename roll ) simplename roll ( simplename blockn ) simplename blockn ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( memberaccess ( simplename roll ) simplename roll ( simplename blockn ) simplename blockn ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename result ) simplename result ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename result ) simplename result ( binaryoperation + ) binaryoperation + ( functioncall ( simplename random ) simplename random ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename roll ) simplename roll ( simplename blockn ) simplename blockn ) memberaccess ( simplename target ) simplename target ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename roll under ) simplename roll under ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename roll ) simplename roll ( simplename roll under ) simplename roll under ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename result ) simplename result ( simplename roll under ) simplename roll under ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename profit ) simplename profit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename calculate profit ) simplename calculate profit ( memberaccess ( simplename roll ) simplename roll ( simplename token value ) simplename token value ) memberaccess ( simplename roll under ) simplename roll under ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename m profit ) simplename m profit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get max profit ) simplename get max profit ( memberaccess ( simplename roll ) simplename roll ( simplename div rate ) simplename div rate ) memberaccess ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename profit )
candidate: Pay winner , update contract balance to calculate new max bet , and send reward .
ref: Pay winner , update contract balance to calculate new max bet , and send reward .

688:
src: ( functiondefinition ( simplename charity balance ) simplename charity balance ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( functioncall ( simplename active ) simplename active ) functioncall ( block ( returnstatement ( functioncall ( memberaccess ( memberaccess ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename total ) simplename total ) memberaccess ( simplename balance eth ) simplename balance eth ) memberaccess ( simplename wmul ) simplename wmul ) memberaccess ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename charity fraction ) simplename charity fraction ) memberaccess ) functioncall ) returnstatement ) block ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename finalized ) simplename finalized ) memberaccess ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( memberaccess ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename total ) simplename total ) memberaccess ( simplename balance eth ) simplename balance eth ) memberaccess ( simplename wmul ) simplename wmul ) memberaccess ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename charity fraction ) simplename charity fraction ) memberaccess ) functioncall ( simplename wmul ) simplename wmul ) memberaccess ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename new campaign fraction ) simplename new campaign fraction ) memberaccess ) functioncall ) returnstatement ) block ( block ( returnstatement ( functioncall ( memberaccess ( memberaccess ( simplename next campaign ) simplename next campaign ( simplename balance eth ) simplename balance eth ) memberaccess ( simplename wmul ) simplename wmul ) memberaccess ( simplename charity fraction ) simplename charity fraction ) functioncall ) returnstatement ) block ) ifstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Total charity balance .
ref: Current / next campaign charity balance .

689:
src: ( functiondefinition ( simplename withdraw eth ) simplename withdraw eth ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename total eth raised ) simplename total eth raised ( simplename min eth to raise ) simplename min eth to raise ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename end block ) simplename end block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico has sucessfuly ended ) simplename ico has sucessfuly ended ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename icoended <UNK> ) simplename icoended <UNK> ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename total eth raised ) simplename total eth raised ( simplename ico ended <UNK> message ) simplename ico ended <UNK> message ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( functioncall ( memberaccess ( simplename multisig address ) simplename multisig address ( simplename send ) simplename send ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ( block ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Withdraws ETH deposited or ICO Owner .
ref: Withdraw funds from contract .

690:
src: ( functiondefinition ( simplename release ) simplename release ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename calculate amount to release ) simplename calculate amount to release ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename released ) simplename released ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfers tokens held by timelock to beneficiary .
ref: Transfers <UNK> tokens to beneficiary .

691:
src: ( functiondefinition ( simplename return all ) simplename return all ( visibility default ) visibility default ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename idx ) simplename idx ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename idx ) simplename idx ( memberaccess ( simplename vote a ) simplename vote a ( simplename length ) simplename length ) memberaccess ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename idx ) simplename idx ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename vote a ) simplename vote a ( simplename idx ) simplename idx ) indexaccess ( simplename ether address ) simplename ether address ) memberaccess ( simplename send ) simplename send ) memberaccess ( memberaccess ( indexaccess ( simplename vote a ) simplename vote a ( simplename idx ) simplename idx ) indexaccess ( simplename amount ) simplename amount ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename idx b ) simplename idx b ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename idx b ) simplename idx b ( memberaccess ( simplename vote b ) simplename vote b ( simplename length ) simplename length ) memberaccess ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename idx b ) simplename idx b ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename vote b ) simplename vote b ( simplename idx b ) simplename idx b ) indexaccess ( simplename ether address ) simplename ether address ) memberaccess ( simplename send ) simplename send ) memberaccess ( memberaccess ( indexaccess ( simplename vote b ) simplename vote b ( simplename idx b ) simplename idx b ) indexaccess ( simplename amount ) simplename amount ) memberaccess ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( functioncall ( simplename clear ) simplename clear ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename onlyowner ) simplename onlyowner ) modifierinvocation ) functiondefinition
candidate: return all of a given address .
ref: basically private ( only called if last transaction was 4 weeks ago ) .

692:
src: ( functiondefinition ( simplename check goal reached ) simplename check goal reached ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( memberaccess ( simplename ico ends ) simplename ico ends ( simplename date ) simplename date ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( simplename pre tokens sold ) simplename pre tokens sold ( simplename add ) simplename add ) memberaccess ( simplename tokens sold ) simplename tokens sold ) functioncall ( simplename funding goal ) simplename funding goal ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename burn ) simplename burn ) memberaccess ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename goal reached ) simplename goal reached ( simplename token owner ) simplename token owner ( simplename amount raised ) simplename amount raised ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale ended ) simplename crowdsale ended ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) functiondefinition
candidate: Check if goal was reached .
ref: Checks if the goal or time limit has been reached and ends the campaign .

693:
src: ( functiondefinition ( simplename buy spike ) simplename buy spike ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename deposit ) simplename deposit ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename buyers ) simplename buyers ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename deposit ) simplename deposit ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ) block ( modifierinvocation ( simplename on sale ) simplename on sale ) modifierinvocation ( modifierinvocation ( simplename valid value ) simplename valid value ) modifierinvocation ) functiondefinition
candidate: buy function allows to buy a new buy with Ether .
ref: buy function allows to buy ether .

694:
src: ( functiondefinition ( simplename fund ) simplename fund ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename minimum funding amount ) simplename minimum funding amount ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is funder ) simplename is funder ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total current funders ) simplename total current funders ( functioncall ( memberaccess ( simplename total current funders ) simplename total current funders ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename funders ) simplename funders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename funder ) simplename funder ( simplename exists ) simplename exists ( simplename balance ) simplename balance ( simplename withdrawal entry ) simplename withdrawal entry ( simplename contribution ) simplename contribution ( simplename contribution claimed ) simplename contribution claimed ( booleanliteral true ) booleanliteral true ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename withdrawal counter ) simplename withdrawal counter ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename consolidate funder ) simplename consolidate funder ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename payment ) simplename payment ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only when live ) simplename only when live ) modifierinvocation ) functiondefinition
candidate: in case of funding goal has been reached .
ref: Additional api for contracts to use as well .

695:
src: ( functiondefinition ( simplename allocate ) simplename allocate ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename type ) simplename type ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename allocations ) simplename allocations ( simplename address ) simplename address ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename type ) simplename type ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename advisors allocated amount ) simplename advisors allocated amount ( simplename amount ) simplename amount ( simplename advisors amount ) simplename advisors amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename advisors allocated amount ) simplename advisors allocated amount ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename advisors ) simplename advisors ( simplename address ) simplename address ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename type ) simplename type ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename founders allocated amount ) simplename founders allocated amount ( simplename amount ) simplename amount ( simplename founders amount ) simplename founders amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename founders allocated amount ) simplename founders allocated amount ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename founders ) simplename founders ( simplename address ) simplename address ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename holders allocated amount ) simplename holders allocated amount ( simplename amount ) simplename amount ( binaryoperation + ) binaryoperation + ( simplename holders amount ) simplename holders amount ( simplename reserve amount ) simplename reserve amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename holders allocated amount ) simplename holders allocated amount ( simplename amount ) simplename amount ) expressionstatement ) block ) ifstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename allocations ) simplename allocations ( simplename address ) simplename address ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename initial allocations ) simplename initial allocations ( simplename address ) simplename address ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename address ) simplename address ) indexaccess ( simplename amount ) simplename amount
candidate: Transfer the balance from owner's account to another account .
ref: Whether the allocation was successful or not .

696:
src: ( functiondefinition ( simplename trade ) simplename trade ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename trading proxy index ) simplename trading proxy index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename src ) simplename src ( simpletype ( simplename erc20 ) simplename erc20 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename src amount ) simplename src amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dest ) simplename dest ( simpletype ( simplename erc20 ) simplename erc20 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename min dest amount ) simplename min dest amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename dest amount ) simplename dest amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename ether erc20 ) simplename ether erc20 ( simplename src ) simplename src ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename dest amount ) simplename dest amount ( functioncall ( simplename trade ether to token ) simplename trade ether to token ( simplename trading proxy index ) simplename trading proxy index ( simplename src amount ) simplename src amount ( simplename dest ) simplename dest ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename ether erc20 ) simplename ether erc20 ( simplename dest ) simplename dest ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename dest amount ) simplename dest amount ( functioncall ( simplename trade token to ether ) simplename trade token to ether ( simplename trading proxy index ) simplename trading proxy index ( simplename src ) simplename src ( simplename src amount ) simplename src amount ) functioncall ) expressionstatement ) block ( block ) block ) ifstatement ) ifstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation >= ) binaryoperation >= ( simplename dest amount ) simplename dest amount ( simplename min dest amount ) simplename min dest amount ) functioncall ) expressionstatement ( returnstatement ( simplename dest amount ) simplename dest amount ) returnstatement ) block ) functiondefinition
candidate: use token address ETH_TOKEN_ADDRESS for ether .
ref: Ex1 : trade 0 . 5 ETH - EOS 0 , 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee , 500000000000000000 , 0xd3c64BbA75859Eb808ACE6F2A6048ecdb2d70817 , 21003850000000000000 .

697:
src: ( functiondefinition ( simplename change founder ) simplename change founder ( visibility default ) visibility default ( variabledeclaration ( simplename new founder ) simplename new founder ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename founder ) simplename founder ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename founder ) simplename founder ( simplename new founder ) simplename new founder ) expressionstatement ) block ) functiondefinition
candidate: Set founder address .
ref: Change founder address ( <UNK> address for contract ) .

698:
src: ( functiondefinition ( simplename mint tokens ) simplename mint tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename block number ) simplename block number ) memberaccess ( functioncall ( simplename get current block number ) simplename get current block number ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cur total supply ) simplename cur total supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename total supply ) simplename total supply ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename cur total supply ) simplename cur total supply ( simplename amount ) simplename amount ( simplename cur total supply ) simplename cur total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename cur total supply ) simplename cur total supply ( simplename amount ) simplename amount ( simplename total supply cap ) simplename total supply cap ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balance to ) simplename previous balance to ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename previous balance to ) simplename previous balance to ( simplename amount ) simplename amount ( simplename previous balance to ) simplename previous balance to ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename cur total supply ) simplename cur total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( functioncall ( memberaccess ( simplename previous balance to ) simplename previous balance to ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename
candidate: Burns _amount tokens that are assigned to _owner .
ref: Mints _amount tokens that are assigned to _owner .

699:
src: ( functiondefinition ( simplename unauthorized address ) simplename unauthorized address ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( memberaccess ( simplename call database ) simplename call database ( simplename unauthorized relay ) simplename unauthorized relay ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Check that address is allowed to call .
ref: Scheduling Authorization API .

700:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility default ) visibility default ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename sealed ) simplename sealed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only administrator ) simplename only administrator ) modifierinvocation ) functiondefinition
candidate: If sealed , transfer is enabled .
ref: Mint coins for a single account .

701:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename wei amount ) simplename wei amount ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename access time ) simplename access time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename access time ) simplename access time ( simplename pre start time ) simplename pre start time ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( simplename access time ) simplename access time ( simplename pre end time ) simplename pre end time ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename preico supply ) simplename preico supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename pre icobonus ) simplename pre icobonus ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename preico supply ) simplename preico supply ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename preico supply ) simplename preico supply ( functioncall ( memberaccess ( simplename preico supply ) simplename preico supply ( simplename sub ) simplename sub ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement
candidate: High level token purchase function .
ref: High level token purchase function .

702:
src: ( functiondefinition ( simplename forward funds ) simplename forward funds ( visibility internal ) visibility internal ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename send ) simplename send ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ) block ) functiondefinition
candidate: send ether to the fund collection wallet override to create custom fund forwarding mechanisms .
ref: send ether to the fund collection wallet override to create custom fund forwarding mechanisms .

703:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename shit fund address ) simplename shit fund address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename shit fund address ) simplename shit fund address ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename shit fund ) simplename shit fund ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename assigned supply ) simplename assigned supply ( functioncall ( memberaccess ( simplename assigned supply ) simplename assigned supply ( simplename add ) simplename add ) memberaccess ( simplename shit fund ) simplename shit fund ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename claim shit ) simplename claim shit ( simplename shit fund address ) simplename shit fund address ( simplename shit fund ) simplename shit fund ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename shit fund address ) simplename shit fund address ( simplename shit fund ) simplename shit fund ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename assigned supply ) simplename assigned supply ( simplename total supply ) simplename total supply ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename unassigned supply ) simplename unassigned supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename assigned supply ) simplename assigned supply ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename shit fund address ) simplename shit fund address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename shit fund address ) simplename shit fund address ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename unassigned supply ) simplename unassigned supply ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename assigned supply ) simplename assigned supply ( functioncall ( memberaccess ( simplename assigned supply ) simplename assigned supply ( simplename add ) simplename add ) memberaccess ( simplename unassigned supply ) simplename unassigned supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename claim shit ) simplename claim shit ( simplename shit fund address ) simplename shit fund address ( simplename unassigned supply ) simplename unassigned supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename shit fund address ) simplename shit fund address ( simplename unassigned supply ) simplename unassigned supply ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename eth fund address ) simplename eth fund address ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is finalized ) simplename is finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename min cap reached ) simplename min cap reached ) modifierinvocation ( modifierinvocation ( simplename sale period completed ) simplename sale period completed ) modifierinvocation ( modifierinvocation ( simplename is valid state ) simplename is
candidate: Allows user to finalize the sale .
ref: Sends the ETH to ETH fund wallet and finalizes the token sale .

704:
src: ( functiondefinition ( simplename create promo team ) simplename create promo team ( visibility public ) visibility public ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename promo created count ) simplename promo created count ( simplename promo creation limit ) simplename promo creation limit ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename team owner ) simplename team owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename owner ) simplename owner ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename team owner ) simplename team owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename team owner ) simplename team owner ( simplename coo address ) simplename coo address ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename price ) simplename price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price ) simplename price ( simplename starting price ) simplename starting price ) expressionstatement ) block ) ifstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename promo created count ) simplename promo created count ) expressionstatement ( expressionstatement ( functioncall ( simplename create team ) simplename create team ( simplename name ) simplename name ( simplename team owner ) simplename team owner ( simplename price ) simplename price ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only coo ) simplename only coo ) modifierinvocation ) functiondefinition
candidate: Creates a new promo team with the given name , with given _price and assignes it to an address .
ref: Creates a new promo Team with the given name , with given _price and assignes it to an address .

705:
src: ( functiondefinition ( simplename set status ) simplename set status ( visibility default ) visibility default ( variabledeclaration ( simplename is closed buy ) simplename is closed buy ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename is closed sell ) simplename is closed sell ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename close buy ) simplename close buy ( simplename is closed buy ) simplename is closed buy ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename close sell ) simplename close sell ( simplename is closed sell ) simplename is closed sell ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Sets the state of buy and sell operations .
ref: Sets the state of buy and sell operations .

706:
src: ( functiondefinition ( simplename get fees ) simplename get fees ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename fee funds ) simplename fee funds ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( block ( expressionstatement ( functioncall ( simplename log debug ) simplename log debug ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename safe send ) simplename safe send ( simplename arbiter ) simplename arbiter ( simplename fee funds ) simplename fee funds ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee funds ) simplename fee funds ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( modifierinvocation ( simplename only arbiter ) simplename only arbiter ) modifierinvocation ) functiondefinition
candidate: Sends all fees to the funds to the wallet .
ref: allow arbiter to get his collected fees .

707:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename freeze end ) simplename freeze end ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( functioncall ( simplename has pool role ) simplename has pool role ( simplename to ) simplename to ) functioncall ( functioncall ( simplename has pool role ) simplename has pool role ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

708:
src: ( functiondefinition ( simplename transfer crowdsale ) simplename transfer crowdsale ( visibility default ) visibility default ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename sold token ) simplename sold token ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfers tokens from your address to other .
ref: For calculating the sold tokens .

709:
src: ( functiondefinition ( simplename execute transaction ) simplename execute transaction ( visibility internal ) visibility internal ( variabledeclaration ( simplename transaction id ) simplename transaction id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( functioncall ( simplename is confirmed ) simplename is confirmed ( simplename transaction id ) simplename transaction id ) functioncall ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename transaction ) simplename transaction ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename transactions ) simplename transactions ( simplename transaction id ) simplename transaction id ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename transaction ) simplename transaction ( simplename operation ) simplename operation ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename add owner ) simplename add owner ( memberaccess ( simplename transaction ) simplename transaction ( simplename destination ) simplename destination ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename transaction ) simplename transaction ( simplename executed ) simplename executed ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename execution ) simplename execution ( simplename transaction id ) simplename transaction id ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename transaction ) simplename transaction ( simplename operation ) simplename operation ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename remove owner ) simplename remove owner ( memberaccess ( simplename transaction ) simplename transaction ( simplename destination ) simplename destination ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename transaction ) simplename transaction ( simplename executed ) simplename executed ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename execution ) simplename execution ( simplename transaction id ) simplename transaction id ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename transaction ) simplename transaction ( simplename operation ) simplename operation ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename replace owner ) simplename replace owner ( memberaccess ( simplename transaction ) simplename transaction ( simplename source ) simplename source ) memberaccess ( memberaccess ( simplename transaction ) simplename transaction ( simplename destination ) simplename destination ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename transaction ) simplename transaction ( simplename executed ) simplename executed ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename execution ) simplename execution ( simplename transaction id ) simplename transaction id ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename transaction ) simplename transaction ( simplename operation ) simplename operation ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename freeze account ) simplename freeze account ( memberaccess ( simplename transaction ) simplename transaction ( simplename destination ) simplename destination ) memberaccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename transaction ) simplename transaction ( simplename executed ) simplename executed ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename execution ) simplename execution
candidate: Allows anyone to execute a confirmed transaction .
ref: Allows anyone to execute a confirmed transaction .

710:
src: ( functiondefinition ( simplename kill ) simplename kill ( visibility default ) visibility default ( block ( expressionstatement ( functioncall ( simplename suicide ) simplename suicide ( simplename noel ) simplename noel ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only noel ) simplename only noel ) modifierinvocation ) functiondefinition
candidate: Function to recover the funds on the contract .
ref: should allow withdrawal without gas calc .

711:
src: ( functiondefinition ( simplename bookkeeping ) simplename bookkeeping ( visibility default ) visibility default ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename acc ) simplename acc ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename acc ) simplename acc ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename fd ac ) simplename fd ac ( simplename check permission ) simplename check permission ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( functioncall ( simpletypeexpression ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) simpletypeexpression ( simplename amount ) simplename amount ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename fd db ) simplename fd db ( simplename set ledger ) simplename set ledger ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename from ) simplename from ) functioncall ( unaryoperation - ) unaryoperation - ( functioncall ( simpletypeexpression ( simpletype ( simplename int ) simplename int ) simpletype ) simpletypeexpression ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename fd db ) simplename fd db ( simplename set ledger ) simplename set ledger ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) simpletypeexpression ( simplename to ) simplename to ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename int ) simplename int ) simpletype ) simpletypeexpression ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Getter for all permissions for methods .
ref: invariant : acc_Premium + acc_RiskFund + acc_Payout + acc_Balance + acc_Reward + acc_OraclizeCosts 0 .

712:
src: ( functiondefinition ( simplename log debug ) simplename log debug ( visibility internal ) visibility internal ( variabledeclaration ( simplename message ) simplename message ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename logs count ) simplename logs count ) expressionstatement ( expressionstatement ( functioncall ( simplename log debug ) simplename log debug ( simplename message ) simplename message ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: just to check that funds goes to the right place tokens have been updated .
ref: helpers for events with counter .

713:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename finalization ) simplename finalization ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Finalizes the crowdsale .
ref: This method is for to be called only for the owner .

714:
src: ( functiondefinition ( simplename create request as payer ) simplename create request as payer ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simplename request id ) simplename request id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename payees id address ) simplename payees id address ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename expected amounts ) simplename expected amounts ( array ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename payer refund address ) simplename payer refund address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payee amounts ) simplename payee amounts ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename additionals ) simplename additionals ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( indexaccess ( simplename payees id address ) simplename payees id address ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename payees id address ) simplename payees id address ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty payees payment address ) simplename empty payees payment address ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename fees ) simplename fees ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename request id ) simplename request id ( simplename fees ) simplename fees ) tupleexpression ( functioncall ( simplename create request ) simplename create request ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename payees id address ) simplename payees id address ( simplename empty payees payment address ) simplename empty payees payment address ( simplename expected amounts ) simplename expected amounts ( simplename payer refund address ) simplename payer refund address ( simplename data ) simplename data ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename accept and pay ) simplename accept and pay ( simplename request id ) simplename request id ( simplename payee amounts ) simplename payee amounts ( simplename additionals ) simplename additionals ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename fees ) simplename fees ) functioncall ) functioncall ) expressionstatement ( returnstatement ( simplename request id ) simplename request id ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused
candidate: Function to create a request as Core .
ref: Function to create a request as payer .

715:
src: ( functiondefinition ( simplename set ico phase2 ) simplename set ico phase2 ( visibility external ) visibility external ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename end ) simplename end ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename start ) simplename start ( simplename end ) simplename end ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase2 start ) simplename ico phase2 start ( simplename start ) simplename start ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase2 end ) simplename ico phase2 end ( simplename end ) simplename end ) expressionstatement ( emitstatement ( functioncall ( simplename change ico phase ) simplename change ico phase ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename start ) simplename start ( simplename end ) simplename end ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the ICO phase .
ref: Sets the ICO phase 2 duration .

716:
src: ( functiondefinition ( simplename add freezer ) simplename add freezer ( visibility external ) visibility external ( variabledeclaration ( simplename new ) simplename new ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename freezers ) simplename freezers ( simplename push ) simplename push ) memberaccess ( simplename new ) simplename new ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename can freeze ) simplename can freeze ( simplename new ) simplename new ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename log freezer addition ) simplename log freezer addition ( simplename new ) simplename new ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only etheraffle ) simplename only etheraffle ) modifierinvocation ) functiondefinition
candidate: add a new should be called by the manager .
ref: Allow addition of <UNK> to allow future contracts to use the role .

717:
src: ( functiondefinition ( simplename get tags ) simplename get tags ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename available tags ) simplename available tags ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename available tags ) simplename available tags ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename available tags ) simplename available tags ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename available tags ) simplename available tags ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename available tags ) simplename available tags ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( returnstatement ( simplename available tags ) simplename available tags ) returnstatement ) block ) functiondefinition
candidate: Get the module factory .
ref: Get the tags related to the module factory .

718:
src: ( functiondefinition ( simplename release dragon tokens ) simplename release dragon tokens ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( memberaccess ( indexaccess ( simplename ledger ) simplename ledger ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename release time ) simplename release time ) memberaccess ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( memberaccess ( indexaccess ( simplename ledger ) simplename ledger ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename release time ) simplename release time ) memberaccess ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename time ) simplename time ( binaryoperation > ) binaryoperation > ( indexaccess ( memberaccess ( indexaccess ( simplename ledger ) simplename ledger ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance ) simplename balance ) memberaccess ( simplename time ) simplename time ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( indexaccess ( memberaccess ( indexaccess ( simplename ledger ) simplename ledger ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance ) simplename balance ) memberaccess ( simplename time ) simplename time ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename ledger ) simplename ledger ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance ) simplename balance ) memberaccess ( simplename time ) simplename time ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( continuestatement continue ) continuestatement continue ) block ) ifstatement ) block ) forstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( block ( expressionstatement ( functioncall ( simplename revert )
candidate: Transfers tokens held by timelock to beneficiary .
ref: Transfers tokens held by timelock to beneficiary .

719:
src: ( functiondefinition ( simplename purchase for ) simplename purchase for ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename participant ) simplename participant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename participant ) simplename participant ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( indexaccess ( simplename paid ether ) simplename paid ether ( simplename participant ) simplename participant ) indexaccess ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename minimum purchase amount ) simplename minimum purchase amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename <UNK> manager wallet ) simplename <UNK> manager wallet ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current bonus percent ) simplename current bonus percent ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get current bonus percent ) simplename get current bonus percent ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total tokens ) simplename total tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename calc total tokens ) simplename calc total tokens ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename current bonus percent ) simplename current bonus percent ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename current cap tokens ) simplename current cap tokens ( simplename add ) simplename add ) memberaccess ( simplename total tokens ) simplename total tokens ) functioncall ( simplename sale tokens cents ) simplename sale tokens cents ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename owner ) simplename owner ( simplename participant ) simplename participant ( simplename total tokens ) simplename total tokens ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename sent tokens ) simplename sent tokens ( simplename participant ) simplename participant ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename sent tokens ) simplename sent tokens ( simplename participant ) simplename participant ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename total tokens ) simplename total tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current cap tokens ) simplename current cap tokens ( functioncall ( memberaccess ( simplename current cap tokens ) simplename current cap tokens ( simplename add ) simplename add ) memberaccess ( simplename total tokens ) simplename total tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current cap ether ) simplename current cap ether ( functioncall ( memberaccess ( simplename
candidate: Accept ETH and KYC : .
ref: Purchase tokens for the amount of ether sent to this contract for custom address .

720:
src: ( functiondefinition ( simplename process sale ) simplename process sale ( visibility internal ) visibility internal ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename price is frozen ) simplename price is frozen ( block ( expressionstatement ( functioncall ( simplename set stake price uscents ) simplename set stake price uscents ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename set caps ) simplename set caps ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename team stakes ) simplename team stakes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename fundaria stakes ) simplename fundaria stakes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename sale stakes ) simplename sale stakes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename wei invested ) simplename wei invested ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename try sale stakes ) simplename try sale stakes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename stake for wei ) simplename stake for wei ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename try sale stakes ) simplename try sale stakes ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename try distribute ) simplename try distribute ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename distributed sale stakes ) simplename distributed sale stakes ( simplename try sale stakes ) simplename try sale stakes ) variabledeclarationstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename try distribute ) simplename try distribute ( simplename sale cap ) simplename sale cap ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sale stakes ) simplename sale stakes ( simplename try sale stakes ) simplename try sale stakes ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei invested ) simplename wei invested ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sale stakes ) simplename sale stakes ( binaryoperation - ) binaryoperation - ( simplename sale cap ) simplename sale cap ( simplename distributed sale stakes ) simplename distributed sale stakes ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei invested ) simplename wei invested ( functioncall ( simplename wei for stake ) simplename wei for stake ( simplename sale stakes ) simplename sale stakes ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename team stakes ) simplename team stakes ( functioncall ( memberaccess ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename sale stakes ) simplename sale stakes ( simplename team share ) simplename team share ) tupleexpression ( simplename div ) simplename div ) memberaccess ( simplename sale share ) simplename sale share ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fundaria stakes ) simplename fundaria stakes ( functioncall ( memberaccess ( tupleexpression ( binaryoperation * )
candidate: Process Stakes sale .
ref: Process Stakes sale .

721:
src: ( functiondefinition ( simplename get token price ) simplename get token price ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename token price ) simplename token price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token price ) simplename token price ( memberaccess ( indexaccess ( simplename periods ) simplename periods ( simplename current period ) simplename current period ) indexaccess ( simplename token price ) simplename token price ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: Calculates the price of token .
ref: tokenPrice - current Token price .

722:
src: ( functiondefinition ( simplename set confirm ) simplename set confirm ( visibility external ) visibility external ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename confirm limit ) simplename confirm limit ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only ceo ) simplename only ceo ) modifierinvocation ) functiondefinition
candidate: Changes the address .
ref: CEO might extend the confirm time limit when <UNK> Network is blocked .

723:
src: ( functiondefinition ( simplename unpause ) simplename unpause ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename paused ) simplename paused ( booleanliteral false ) booleanliteral false ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ( modifierinvocation ( simplename when paused ) simplename when paused ) modifierinvocation ) functiondefinition
candidate: called by the owner to unpause , returns to normal state .
ref: called by the admin to unpause , returns to normal state .

724:
src: ( functiondefinition ( simplename create base emoji ) simplename create base emoji ( visibility public ) visibility public ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename symb ) simplename symb ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename indx ) simplename indx ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename create emoji ) simplename create emoji ( simplename name ) simplename name ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename starting price ) simplename starting price ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename emoji craft token address ) simplename emoji craft token address ( simplename indx ) simplename indx ) indexaccess ( functioncall ( simplename new ) simplename new ( simpletype ( simplename craft token ) simplename craft token ) simpletype ( simplename name ) simplename name ( simplename symb ) simplename symb ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only clevel ) simplename only clevel ) modifierinvocation ) functiondefinition
candidate: Create new Emoji with the given name .
ref: Creates a new Emoji with the given name .

725:
src: ( functiondefinition ( simplename create investment ) simplename create investment ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename investment ) simplename investment ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename charger id ) simplename charger id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename check charger ) simplename check charger ( simplename charger id ) simplename charger id ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename investments count ) simplename investments count ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename new investment ) simplename new investment ( simpletype ( simplename investment ) simplename investment ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename new investment ) simplename new investment ( simplename address ) simplename address ) memberaccess ( simplename address ) simplename address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename new investment ) simplename new investment ( simplename charger id ) simplename charger id ) memberaccess ( simplename charger id ) simplename charger id ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename new investment ) simplename new investment ( simplename investment id ) simplename investment id ) memberaccess ( simplename investments count ) simplename investments count ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename investments ) simplename investments ( simplename push ) simplename push ) memberaccess ( simplename new investment ) simplename new investment ) functioncall ) expressionstatement ( returnstatement ( simplename new investment ) simplename new investment ) returnstatement ) block ) functiondefinition
candidate: Create new investment in specified address .
ref: create new investment and push it to array <UNK> .

726:
src: ( functiondefinition ( simplename scale ring based on historical records ) simplename scale ring based on historical records ( visibility private ) visibility private ( statemutability view ) statemutability view ( variabledeclaration ( simplename delegate ) simplename delegate ( simpletype ( simplename token transfer delegate ) simplename token transfer delegate ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ring size ) simplename ring size ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename orders ) simplename orders ( array ( simpletype ( simplename order state ) simplename order state ) simpletype ) array ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename ring size ) simplename ring size ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename state ) simplename state ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename orders ) simplename orders ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename order ) simplename order ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( memberaccess ( simplename state ) simplename state ( simplename order ) simplename order ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( memberaccess ( simplename order ) simplename order ( simplename buy no more than amount b ) simplename buy no more than amount b ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( functioncall ( memberaccess ( memberaccess ( simplename order ) simplename order ( simplename amount b ) simplename amount b ) memberaccess ( simplename tolerant sub ) simplename tolerant sub ) memberaccess ( indexaccess ( simplename cancelled or filled ) simplename cancelled or filled ( memberaccess ( simplename state ) simplename state ( simplename order hash ) simplename order hash ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename order ) simplename order ( simplename amount s ) simplename amount s ) memberaccess ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename order ) simplename order ( simplename amount s ) simplename amount s ) memberaccess ) functioncall ( memberaccess ( simplename order ) simplename order ( simplename amount b ) simplename amount b ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename order ) simplename order ( simplename lrc fee ) simplename lrc fee ) memberaccess ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename order ) simplename order ( simplename lrc fee ) simplename lrc fee ) memberaccess ) functioncall ( memberaccess ( simplename order ) simplename order ( simplename amount b ) simplename amount b ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename
candidate: Scale down all orders based on historical fill or cancellation stats but key the order's original exchange rate .
ref: Scale down all orders based on historical fill or cancellation stats but key the order's original exchange rate .

727:
src: ( functiondefinition ( simplename claim plot multiple with data ) simplename claim plot multiple with data ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename deed ids ) simplename deed ids ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename description ) simplename description ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename image url ) simplename image url ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename info url ) simplename info url ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename buy amount ) simplename buy amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename deed ids ) simplename deed ids ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename ether required ) simplename ether required ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename free claim allowance ) simplename free claim allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename free claim allowance ) simplename free claim allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename buy amount ) simplename buy amount ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename free claim allowance ) simplename free claim allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename buy amount ) simplename buy amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ether required ) simplename ether required ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename free amount ) simplename free amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename free claim allowance ) simplename free claim allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename free claim allowance ) simplename free claim allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ether required ) simplename ether required ( functioncall ( memberaccess ( simplename unclaimed plot price ) simplename unclaimed plot price ( simplename mul ) simplename mul ) memberaccess ( binaryoperation - ) binaryoperation - ( simplename buy amount ) simplename buy amount ( simplename free amount ) simplename free amount ) functioncall ) expressionstatement ) block ) ifstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ether required ) simplename ether required ( functioncall ( memberaccess ( simplename unclaimed plot price ) simplename unclaimed plot price ( simplename mul ) simplename mul ) memberaccess ( simplename
candidate: Buy an unclaimed plot .
ref: Buy unclaimed plots .

728:
src: ( functiondefinition ( simplename icosale type ) simplename icosale type ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( conditional ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename ico ) simplename ico ( memberaccess ( simplename icotype ) simplename icotype ( simplename pre sale ) simplename pre sale ) memberaccess ) tupleexpression ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) conditional ) returnstatement ) block ) functiondefinition
candidate: Returns the name of the current round in plain text .
ref: Returns the name of the current round in plain text .

729:
src: ( functiondefinition ( simplename can transfer from ) simplename can transfer from ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename from ) simplename from ) indexaccess ( booleanliteral true ) booleanliteral true ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename to ) simplename to ) indexaccess ( booleanliteral true ) booleanliteral true ( block ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Checks if transfer or not .
ref: check if transferFrom is possible .

730:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename rsdatasets event returns ) simplename rsdatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename rsdatasets event returns ) simplename rsdatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename pot ) simplename pot ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( simplename pot split ) simplename pot split ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ppt ) simplename ppt ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename gen ) simplename gen ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( tupleexpression ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename keys ) simplename keys ) memberaccess ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dust ) simplename dust ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename gen ) simplename gen ( simplename sub ) simplename sub ) memberaccess ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename ppt ) simplename ppt ( simplename mul ) simplename mul ) memberaccess ( memberaccess
candidate: ends the round .
ref: ends the round .

731:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename blacklisted ) simplename blacklisted ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename freezed ) simplename freezed ( simplename to ) simplename to ) indexaccess ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename blacklisted ) simplename blacklisted ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename freezed ) simplename freezed ( simplename from ) simplename from ) indexaccess ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename blacklisted ) simplename blacklisted ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename partners ) simplename partners ( simplename from ) simplename from ) indexaccess ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename public release ) simplename public release ) tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename partners release ) simplename partners release ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename amount ) simplename amount ( binaryoperation <= ) binaryoperation <= ( simplename amount ) simplename amount ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename amount ) simplename amount ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from )
candidate: Transfer tokens from the from account to the to account .
ref: Transfer tokens from one address to another .

732:
src: ( functiondefinition ( simplename set art idt ) simplename set art idt ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename idt report ) simplename idt report ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename idt report ) simplename idt report ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename art infos ) simplename art infos ( simplename id ) simplename id ) indexaccess ( simplename idt report ) simplename idt report ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename idt report len ) simplename idt report len ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename idt report ) simplename idt report ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename idt report len ) simplename idt report len ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename art infos ) simplename art infos ( simplename id ) simplename id ) indexaccess ( simplename idt report ) simplename idt report ) memberaccess ( simplename idt report ) simplename idt report ) expressionstatement ( expressionstatement ( functioncall ( simplename set art idt ) simplename set art idt ( simplename id ) simplename id ( simplename idt report ) simplename idt report ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: set new info .
ref: set art <UNK> .

733:
src: ( functiondefinition ( simplename start migration ) simplename start migration ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename migration agent ) simplename migration agent ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename running ) simplename running ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename state ) simplename state ( memberaccess ( simplename state ) simplename state ( simplename migration ) simplename migration ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename new state ) simplename new state ( simplename state ) simplename state ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: This function is used to start the crowdsale contract to start the crowdsale .
ref: Called after <UNK> function to make sure that a new contract address is valid .

734:
src: ( functiondefinition ( simplename finalize delegation ) simplename finalize delegation ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename delegate operation ) simplename delegate operation ( simplename admin ) simplename admin ) memberaccess ( simplename admin ) simplename admin ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename delegate operation ) simplename delegate operation ( simplename defer block ) simplename defer block ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename delegate ) simplename delegate ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename delegate operation ) simplename delegate operation ( simplename delegate ) simplename delegate ) memberaccess ) variabledeclarationstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( simplename delegate operation ) simplename delegate operation ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename true usd ) simplename true usd ( simplename delegate to new contract ) simplename delegate to new contract ) memberaccess ( simplename delegate ) simplename delegate ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin or owner ) simplename only admin or owner ) modifierinvocation ) functiondefinition
candidate: after a day , admin finalizes the delegation .
ref: after a day , admin finalizes the delegation .

735:
src: ( functiondefinition ( simplename set buy price ) simplename set buy price ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new buy price ) simplename new buy price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new buy price final ) simplename new buy price final ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename buy price ) simplename buy price ( simplename new buy price ) simplename new buy price ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename buy price final ) simplename buy price final ( simplename new buy price final ) simplename new buy price final ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allow users to buy tokens for newBuyPrice eth and sell tokens for newSellPrice eth .
ref: True if the operation was successful .

736:
src: ( functiondefinition ( simplename get video game current price ) simplename get video game current price ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename video game id ) simplename video game id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename video games ) simplename video games ( simplename video game id ) simplename video game id ) indexaccess ( simplename current price ) simplename current price ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: This function will return only the price of a specific This function .
ref: This function will return only the price of a specific Video Game .

737:
src: ( functiondefinition ( simplename change admin ) simplename change admin ( visibility external ) visibility external ( variabledeclaration ( simplename admin ) simplename admin ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( emitstatement ( functioncall ( simplename admin updated ) simplename admin updated ( simplename admin ) simplename admin ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename whitelist admin ) simplename whitelist admin ( simplename admin ) simplename admin ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename valid admin ) simplename valid admin ( simplename admin ) simplename admin ) modifierinvocation ) functiondefinition
candidate: Allows owner to change the admin to transfer admin .
ref: Updates whitelistAdmin address .

738:
src: ( functiondefinition ( simplename add bounty for hunter ) simplename add bounty for hunter ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename hunter ) simplename hunter ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename bounty ) simplename bounty ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename token ) simplename token ) functioncall ( simplename is active ) simplename is active ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename bounties ) simplename bounties ( simplename hunter ) simplename hunter ) indexaccess ( simplename bounty ) simplename bounty ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename bounty total ) simplename bounty total ( simplename bounty ) simplename bounty ) expressionstatement ( expressionstatement ( functioncall ( simplename add bounty ) simplename add bounty ( simplename hunter ) simplename hunter ( simplename bounty ) simplename bounty ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add bounty for bounty and bounty token address .
ref: Add bounty for hunter .

739:
src: ( functiondefinition ( simplename create tokens ) simplename create tokens ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename collected ) simplename collected ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( functioncall ( simplename safe sub ) simplename safe sub ( simplename max token count ) simplename max token count ( simplename token count ) simplename token count ) functioncall ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename accounts ) simplename accounts ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename accounts ) simplename accounts ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token count ) simplename token count ( functioncall ( simplename safe add ) simplename safe add ( simplename token count ) simplename token count ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total collected ) simplename total collected ( functioncall ( simplename safe add ) simplename safe add ( simplename total collected ) simplename total collected ( simplename collected ) simplename collected ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: true if tokens were created successfully , false otherwise .
ref: true if tokens were created successfully , false otherwise .

740:
src: ( functiondefinition ( simplename releasable amount ) simplename releasable amount ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wallet ) simplename wallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename vesting ) simplename vesting ( simpletype ( simplename vesting ) simplename vesting ) simpletype ) variabledeclaration ( indexaccess ( simplename vesting map ) simplename vesting map ( simplename wallet ) simplename wallet ) indexaccess ) variabledeclarationstatement ( returnstatement ( functioncall ( memberaccess ( functioncall ( simplename vested amount ) simplename vested amount ( simplename wallet ) simplename wallet ) functioncall ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename vesting ) simplename vesting ( simplename released ) simplename released ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculates the amount that has already vested but hasn't been released yet .
ref: amount of releasable token .

741:
src: ( functiondefinition ( simplename next redemption request ) simplename next redemption request ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename current redemption id ) simplename current redemption id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename redemptions queue ) simplename redemptions queue ( simplename next redemption ) simplename next redemption ) memberaccess ( simplename current redemption id ) simplename current redemption id ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Public function to check the amount of a specific redemption request .
ref: Next redemption request ID .

742:
src: ( functiondefinition ( simplename link ) simplename link ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new address ) simplename new address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current application entity address ) simplename current application entity address ( simplename new address ) simplename new address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current app ) simplename current app ( functioncall ( simplename application entity abi ) simplename application entity abi ( simplename current application entity address ) simplename current application entity address ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename current app ) simplename current app ( simplename initialize ) simplename initialize ) memberaccess ) functioncall ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename event gateway new address ) simplename event gateway new address ( simplename current application entity address ) simplename current application entity address ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Internal function to generate a new event .
ref: Link to new Application <UNK> .

743:
src: ( functiondefinition ( simplename <UNK> token token ) simplename <UNK> token token ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename initial supply ) simplename initial supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename name ) simplename name ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename decimals ) simplename decimals ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename symbol ) simplename symbol ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename initial supply ) simplename initial supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( simplename initial supply ) simplename initial supply ) expressionstatement ) block ) functiondefinition
candidate: Initializes contract with initial supply tokens to the creator of the contract .
ref: <UNK> el contrato con <UNK> tokens de <UNK> <UNK> al creador del contrato .

744:
src: ( functiondefinition ( simplename claim with resolver ) simplename claim with resolver ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename node ) simplename node ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename resolver ) simplename resolver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename label ) simplename label ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename sha3 hex address ) simplename sha3 hex address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename node ) simplename node ( functioncall ( simplename sha3 ) simplename sha3 ( simplename addr reverse node ) simplename addr reverse node ( simplename label ) simplename label ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current owner ) simplename current owner ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename ens ) simplename ens ( simplename owner ) simplename owner ) memberaccess ( simplename node ) simplename node ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename resolver ) simplename resolver ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename resolver ) simplename resolver ( functioncall ( memberaccess ( simplename ens ) simplename ens ( simplename resolver ) simplename resolver ) memberaccess ( simplename node ) simplename node ) functioncall ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename current owner ) simplename current owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( simplename ens ) simplename ens ( simplename set subnode owner ) simplename set subnode owner ) memberaccess ( simplename addr reverse node ) simplename addr reverse node ( simplename label ) simplename label ( simplename this ) simplename this ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current owner ) simplename current owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename ens ) simplename ens ( simplename set resolver ) simplename set resolver ) memberaccess ( simplename node ) simplename node ( simplename resolver ) simplename resolver ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename current owner ) simplename current owner ( simplename owner ) simplename owner ( block ( expressionstatement ( functioncall ( memberaccess ( simplename ens ) simplename ens ( simplename set subnode owner ) simplename set subnode owner ) memberaccess ( simplename addr reverse node ) simplename addr reverse node ( simplename label ) simplename label ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename node ) simplename node ) returnstatement ) block ) functiondefinition
candidate: Transfers ownership of the resolver for a new address .
ref: Transfers ownership of the reverse ENS record associated with the calling account .

745:
src: ( functiondefinition ( simplename sell coins to ico ) simplename sell coins to ico ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount of coins to sell ) simplename amount of coins to sell ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename amount of coins to sell ) simplename amount of coins to sell ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename msg sndr ) simplename msg sndr ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is preview ) simplename is preview ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( booleanliteral false ) booleanliteral false ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ico ) simplename ico ( simpletype ( simplename ico ) simplename ico ) simpletype ) variabledeclaration ( functioncall ( simplename ico ) simplename ico ( functioncall ( simplename get ico addr ) simplename get ico addr ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename icosuccess ) simplename icosuccess ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename sell payment value ) simplename sell payment value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename icosuccess ) simplename icosuccess ( simplename sell payment value ) simplename sell payment value ) tupleexpression ( functioncall ( memberaccess ( simplename ico ) simplename ico ( simplename sell ) simplename sell ) memberaccess ( simplename amount ) simplename amount ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename is preview ) simplename is preview ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename icosuccess ) simplename icosuccess ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( functioncall ( simplename get ico addr ) simplename get ico addr ) functioncall ( simplename balance ) simplename balance ) memberaccess ( functioncall ( simplename safe add ) simplename safe add ( functioncall ( memberaccess ( simplename ico ) simplename ico ( simplename get min bal ) simplename get min bal ) memberaccess ) functioncall ( simplename sell payment value ) simplename sell payment value ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sucs tr tk ) simplename sucs tr tk ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( booleanliteral false ) booleanliteral false ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pym act sucs ) simplename pym act sucs ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( booleanliteral false ) booleanliteral false ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename is preview
candidate: Allows anyone to create tokens by depositing ether .
ref: Allows Token owners to Sell Tokens directly to this Contract .

746:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: transfer ownership of specified address .
ref: Send _value tokens to _to from your account .

747:
src: ( functiondefinition ( simplename safe transfer from ) simplename safe transfer from ( visibility public ) visibility public ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename internal safe transfer from ) simplename internal safe transfer from ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ( simplename data ) simplename data ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Safely transfers the ownership of a given token ID to another address .
ref: Safely transfers the ownership of a given token ID to another address .

748:
src: ( functiondefinition ( simplename set ico cap ) simplename set ico cap ( visibility public ) visibility public ( variabledeclaration ( simplename new ico cap ) simplename new ico cap ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico cap ) simplename ico cap ( simplename new ico cap ) simplename new ico cap ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set hard cap for round .
ref: modify ICO cap .

749:
src: ( functiondefinition ( simplename owner set auditor ) simplename owner set auditor ( visibility external ) visibility external ( variabledeclaration ( simplename auditor address ) simplename auditor address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename auditor address ) simplename auditor address ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename auditor address ) simplename auditor address ( simplename auditor address ) simplename auditor address ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Sets the reference to the NFT ownership contract .
ref: Set Auditor account address to a new value .

750:
src: ( functiondefinition ( simplename release bets ) simplename release bets ( visibility private ) visibility private ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename stored balance ) simplename stored balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename k ) simplename k ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename k ) simplename k ( memberaccess ( simplename betters ) simplename betters ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename k ) simplename k ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total bet ) simplename total bet ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( memberaccess ( indexaccess ( simplename better info ) simplename better info ( indexaccess ( simplename betters ) simplename betters ( simplename k ) simplename k ) indexaccess ) indexaccess ( simplename amounts bet ) simplename amounts bet ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( memberaccess ( indexaccess ( simplename better info ) simplename better info ( indexaccess ( simplename betters ) simplename betters ( simplename k ) simplename k ) indexaccess ) indexaccess ( simplename amounts bet ) simplename amounts bet ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pending withdrawals ) simplename pending withdrawals ( indexaccess ( simplename betters ) simplename betters ( simplename k ) simplename k ) indexaccess ) indexaccess ( tupleexpression ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename total bet ) simplename total bet ( simplename stored balance ) simplename stored balance ( simplename total bet amount ) simplename total bet amount ) tupleexpression ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: Release all the bets back to the betters if , for any reason , payouts cannot be completed .
ref: Release all the bets back to the betters if , for any reason , payouts cannot be completed .

751:
src: ( modifierdefinition ( simplename check if <UNK> live ) simplename check if <UNK> live ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename stage ) simplename stage ( memberaccess ( simplename stages ) simplename stages ( simplename pending ) simplename pending ) memberaccess ( binaryoperation != ) binaryoperation != ( simplename stage ) simplename stage ( memberaccess ( simplename stages ) simplename stages ( simplename ended ) simplename ended ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename stage ) simplename stage ( memberaccess ( simplename stages ) simplename stages ( simplename pre sale ) simplename pre sale ) memberaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename start time presale ) simplename start time presale ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time presale ) simplename start time presale ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( indexaccess ( simplename tier end time ) simplename tier end time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Check if the auction has ended .
ref: Check if ICO is live .

752:
src: ( functiondefinition ( simplename buy ) simplename buy ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ( simplename total max buy ) simplename total max buy ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total eth ) simplename total eth ( functioncall ( memberaccess ( simplename total eth ) simplename total eth ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename buy ) simplename buy ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename rate ) simplename rate ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename this ) simplename this ( simplename to ) simplename to ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename valid address ) simplename valid address ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename is not finalized ) simplename is not finalized ) modifierinvocation ) functiondefinition
candidate: buy tokens during crowdsale .
ref: This function sends B2BK tokens to the specified address when sending ETH .

753:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( simplename trading open ) simplename trading open ( indexaccess ( simplename whitelisted ) simplename whitelisted ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Trading limited - requires the token sale to have closed .

754:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility private ) visibility private ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename to ) simplename to ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename region index to owner ) simplename region index to owner ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename from ) simplename from ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename region index to approved ) simplename region index to approved ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Assigns ownership of a specific Asset to an address .
ref: Assigns ownership of a specific Region to an address .

755:
src: ( functiondefinition ( simplename set rate ) simplename set rate ( visibility public ) visibility public ( variabledeclaration ( simplename rate in wei ) simplename rate in wei ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename rate in wei ) simplename rate in wei ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( simplename rate in wei ) simplename rate in wei ) expressionstatement ( expressionstatement ( functioncall ( simplename rate set ) simplename rate set ( simplename rate ) simplename rate ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set current token exchange rate .
ref: Function that sets the conversion rate .

756:
src: ( functiondefinition ( simplename is round three sale period ) simplename is round three sale period ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename date ) simplename date ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename date ) simplename date ( simplename round three from ) simplename round three from ( binaryoperation <= ) binaryoperation <= ( simplename date ) simplename date ( simplename round three until ) simplename round three until ( binaryoperation > ) binaryoperation > ( simplename round three amount ) simplename round three amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: check is period .
ref: Round Three Sale Period .

757:
src: ( functiondefinition ( simplename create cutie ) simplename create cutie ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename mom id ) simplename mom id ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dad id ) simplename dad id ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename generation ) simplename generation ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cooldown index ) simplename cooldown index ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename genes ) simplename genes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename birth time ) simplename birth time ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename cutie ) simplename cutie ( simpletype ( simplename cutie ) simplename cutie ) simpletype ) variabledeclaration ( functioncall ( simplename cutie ) simplename cutie ( simplename genes ) simplename genes ( simplename birth time ) simplename birth time ( simplename cooldown end time ) simplename cooldown end time ( simplename mom id ) simplename mom id ( simplename dad id ) simplename dad id ( simplename cooldown index ) simplename cooldown index ( simplename generation ) simplename generation ( simplename optional ) simplename optional ( simplename genes ) simplename genes ( simplename birth time ) simplename birth time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename mom id ) simplename mom id ( simplename dad id ) simplename dad id ( simplename cooldown index ) simplename cooldown index ( simplename generation ) simplename generation ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new cutie id256 ) simplename new cutie id256 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( memberaccess ( simplename cuties ) simplename cuties ( simplename push ) simplename push ) memberaccess ( simplename cutie ) simplename cutie ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename new cutie id256 ) simplename new cutie id256 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new cutie id ) simplename new cutie id ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint40 ) simplename uint40 ) simpletype ) simpletypeexpression ( simplename new cutie id256 ) simplename new cutie id256 ) functioncall ) variabledeclarationstatement ( emitstatement ( functioncall ( simplename birth ) simplename birth ( simplename owner ) simplename owner ( simplename new cutie id ) simplename new cutie id ( memberaccess ( simplename cutie ) simplename cutie ( simplename mom id ) simplename mom id ) memberaccess ( memberaccess ( simplename cutie ) simplename cutie ( simplename dad id ) simplename dad id ) memberaccess ( memberaccess ( simplename cutie ) simplename cutie ( simplename genes ) simplename genes ) memberaccess ) functioncall ) emitstatement ( expressionstatement
candidate: An internal method that creates a new cutie and stores it .
ref: An internal method that creates a new cutie and stores it .

758:
src: ( functiondefinition ( simplename safe withdrawal ) simplename safe withdrawal ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename deadline ) simplename deadline ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename funding goal reached ) simplename funding goal reached ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( simplename amount ) simplename amount ) functioncall ( block ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ) ifstatement ) block ) ifstatement ( ifstatement ( simplename presale closed ) simplename presale closed ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename funding goal reached ) simplename funding goal reached ( binaryoperation == ) binaryoperation == ( simplename beneficiary ) simplename beneficiary ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( block ( ifstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename send ) simplename send ) memberaccess ( simplename amount raised ) simplename amount raised ) functioncall ( block ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( simplename beneficiary ) simplename beneficiary ( simplename amount raised ) simplename amount raised ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename funding goal reached ) simplename funding goal reached ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Withdraw the funds .
ref: Withdraw the funds .

759:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename tx ) simplename tx ( simplename gasprice ) simplename gasprice ) memberaccess ( simplename max gas price ) simplename max gas price ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is valid contribution ) simplename is valid contribution ( simplename address ) simplename address ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bought tokens ) simplename bought tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename calculate tokens ) simplename calculate tokens ( simplename value ) simplename value ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename bought tokens ) simplename bought tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename bought tokens ) simplename bought tokens ( functioncall ( simplename get tokens available ) simplename get tokens available ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename add to investor ) simplename add to investor ( simplename address ) simplename address ( simplename value ) simplename value ( simplename bought tokens ) simplename bought tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename update sale parameters ) simplename update sale parameters ( simplename bought tokens ) simplename bought tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log token purchase ) simplename log token purchase ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename address ) simplename address ( simplename value ) simplename value ( simplename bought tokens ) simplename bought tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Internal function to buy tokens .
ref: Internal function to assign tokens to the contributor .

760:
src: ( functiondefinition ( simplename set colors <UNK> ) simplename set colors <UNK> ( visibility public ) visibility public ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename property ids ) simplename property ids ( array ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename new colors ) simplename new colors ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename pxlto spend each ) simplename pxlto spend each ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( array ( simpletype ( simplename bool ) simplename bool ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ( block ( variabledeclarationstatement ( variabledeclaration ( simplename results ) simplename results ( array ( simpletype ( simplename bool ) simplename bool ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename property ids ) simplename property ids ( simplename i ) simplename i ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename results ) simplename results ( simplename i ) simplename i ) indexaccess ( functioncall ( simplename set colors ) simplename set colors ( indexaccess ( simplename property ids ) simplename property ids ( simplename i ) simplename i ) indexaccess ( tupleexpression ( indexaccess ( simplename new colors ) simplename new colors ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename new colors ) simplename new colors ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename new colors ) simplename new colors ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename new colors ) simplename new colors ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename new colors ) simplename new colors ( binaryoperation + ) binaryoperation + ( binaryoperation * ) binaryoperation * ( simplename i ) simplename i ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) tupleexpression ( simplename pxlto spend each ) simplename pxlto spend each ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( simplename results ) simplename results ) returnstatement ) block ) functiondefinition
candidate: Sets the address of a certain currency , for a contracts .
ref: Wrapper to call setColors 8 times in one call .

761:
src: ( functiondefinition ( simplename set art evt ) simplename set art evt ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename evt report ) simplename evt report ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename evt report ) simplename evt report ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename art infos ) simplename art infos ( simplename id ) simplename id ) indexaccess ( simplename evt report ) simplename evt report ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename evt report len ) simplename evt report len ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename evt report ) simplename evt report ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename evt report len ) simplename evt report len ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename art infos ) simplename art infos ( simplename id ) simplename id ) indexaccess ( simplename evt report ) simplename evt report ) memberaccess ( simplename evt report ) simplename evt report ) expressionstatement ( expressionstatement ( functioncall ( simplename set art evt ) simplename set art evt ( simplename id ) simplename id ( simplename evt report ) simplename evt report ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: set new info .
ref: set art evtReport .

762:
src: ( functiondefinition ( simplename list assets ) simplename list assets ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename assets ) simplename assets ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename state id ) simplename state id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename count ) simplename count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename from start ) simplename from start ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename collection ) simplename collection ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) simpletypeexpression ( simplename state id ) simplename state id ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename assets ) simplename assets ( functioncall ( simplename list indexed bytesarray ) simplename list indexed bytesarray ( simplename collection ) simplename collection ( simplename count ) simplename count ( memberaccess ( functioncall ( simplename assets explorer controller ) simplename assets explorer controller ) functioncall ( simplename get first item in state ) simplename get first item in state ) memberaccess ( memberaccess ( functioncall ( simplename assets explorer controller ) simplename assets explorer controller ) functioncall ( simplename get last item in state ) simplename get last item in state ) memberaccess ( memberaccess ( functioncall ( simplename assets explorer controller ) simplename assets explorer controller ) functioncall ( simplename get next item in state from item ) simplename get next item in state from item ) memberaccess ( memberaccess ( functioncall ( simplename assets explorer controller ) simplename assets explorer controller ) functioncall ( simplename get previous item in state from item ) simplename get previous item in state from item ) memberaccess ( simplename from start ) simplename from start ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: list a asset owner .
ref: List Assets in a particular state .

763:
src: ( functiondefinition ( simplename set icodates ) simplename set icodates ( visibility public ) visibility public ( variabledeclaration ( simplename ico start ) simplename ico start ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ico 1 days ) simplename ico 1 days ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ico 2 days ) simplename ico 2 days ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ico 3 days ) simplename ico 3 days ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ico 4 days ) simplename ico 4 days ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ico 5 days ) simplename ico 5 days ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename update phase ) simplename update phase ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase finished ) simplename phase finished ( binaryoperation != ) binaryoperation != ( simplename phase i ) simplename phase i ( simplename phase ico finished ) simplename phase ico finished ( binaryoperation < ) binaryoperation < ( simplename phase i ) simplename phase i ( simplename phase ico 1 ) simplename phase ico 1 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename presale end ) simplename presale end ( simplename ico start ) simplename ico start ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico start ) simplename ico start ( simplename ico start ) simplename ico start ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 1 days ) simplename ico phase 1 days ( simplename ico 1 days ) simplename ico 1 days ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 2 days ) simplename ico phase 2 days ( simplename ico 2 days ) simplename ico 2 days ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 3 days ) simplename ico phase 3 days ( simplename ico 3 days ) simplename ico 3 days ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 4 days ) simplename ico phase 4 days ( simplename ico 4 days ) simplename ico 4 days ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico phase 5 days ) simplename ico phase 5 days ( simplename ico 5 days ) simplename ico 5 days ) expressionstatement ( expressionstatement ( functioncall ( simplename update phase times ) simplename update phase times ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner or manager ) simplename only owner or manager ) modifierinvocation ) functiondefinition
candidate: Sets new ICO date .
ref: Sets start date for ICO phases .

764:
src: ( functiondefinition ( simplename tgr set live ) simplename tgr set live ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename tgr number ) simplename tgr number ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tgr start block ) simplename tgr start block ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tgr amount collected ) simplename tgr amount collected ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tgr contributed amount ) simplename tgr contributed amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( emitstatement ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename tgr settings amount ) simplename tgr settings amount ( simplename tgr settings minimal contribution ) simplename tgr settings minimal contribution ( simplename tgr settings part contributor ) simplename tgr settings part contributor ( simplename tgr settings part project ) simplename tgr settings part project ( simplename tgr settings part founders ) simplename tgr settings part founders ( simplename tgr settings blocks per stage ) simplename tgr settings blocks per stage ( simplename tgr settings part contributor increase per stage ) simplename tgr settings part contributor increase per stage ( simplename tgr settings max stages ) simplename tgr settings max stages ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( simplename tgr number ) simplename tgr number ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only ) simplename only ( simplename project wallet ) simplename project wallet ) modifierinvocation ( modifierinvocation ( simplename is not tgr live ) simplename is not tgr live ) modifierinvocation ( modifierinvocation ( simplename is not frozen only ) simplename is not frozen only ) modifierinvocation ) functiondefinition
candidate: Set the end time of the auction contract .
ref: Start new <UNK> stage .

765:
src: ( functiondefinition ( simplename upgrade oracle ) simplename upgrade oracle ( visibility public ) visibility public ( variabledeclaration ( simplename oracle master copy ) simplename oracle master copy ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename oracle master copy ) simplename oracle master copy ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename oracle master copy ) simplename oracle master copy ( functioncall ( simplename oracle ) simplename oracle ( simplename oracle master copy ) simplename oracle master copy ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename oracle upgraded ) simplename oracle upgraded ( simplename oracle master copy ) simplename oracle master copy ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename is owner ) simplename is owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to upgrade master .
ref: Change the master <UNK> of the oracle .

766:
src: ( functiondefinition ( simplename get reserve amount ) simplename get reserve amount ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename system reserves ) simplename system reserves ( simplename token address ) simplename token address ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get reserve tokens for a reserve token .
ref: how many tokens are <UNK> owner as comission .

767:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename set lock to account ) simplename set lock to account ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( returnstatement ( functioncall ( simplename transfer to contract ) simplename transfer to contract ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) returnstatement ) block ( block ( returnstatement ( functioncall ( simplename transfer to address ) simplename transfer to address ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) returnstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename valid transfer ) simplename valid transfer ) modifierinvocation ) functiondefinition
candidate: Standard function transfer similar to ERC20 transfer with no _data .
ref: Standard function transfer similar to ERC20 transfer with no _data .

768:
src: ( functiondefinition ( simplename perform withdrawal ) simplename perform withdrawal ( visibility default ) visibility default ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename bought tokens ) simplename bought tokens ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 ) simplename erc20 ) simpletype ) variabledeclaration ( functioncall ( simplename erc20 ) simplename erc20 ( simplename token address ) simplename token address ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename contract token balance ) simplename contract token balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename contract token balance ) simplename contract token balance ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens to withdraw ) simplename tokens to withdraw ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename contract token balance ) simplename contract token balance ) tupleexpression ( simplename contract eth value ) simplename contract eth value ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename contract eth value ) simplename contract eth value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename tokens to withdraw ) simplename tokens to withdraw ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows any user to withdraw his tokens .
ref: Allows any user to withdraw his tokens .

769:
src: ( functiondefinition ( simplename pay up ) simplename pay up ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payment ) simplename payment ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename total contributions ) simplename total contributions ( simplename payment ) simplename payment ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename total contributions ) simplename total contributions ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( emitstatement ( functioncall ( simplename <UNK> ) simplename <UNK> ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename contribution time ) simplename contribution time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( emitstatement ( functioncall ( simplename paid out ) simplename paid out ( simplename payment ) simplename payment ) functioncall ) emitstatement ( expressionstatement ( functioncall ( memberaccess ( simplename creator ) simplename creator ( simplename transfer ) simplename transfer ) memberaccess ( simplename payment ) simplename payment ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename owner only ) simplename owner only ) modifierinvocation ( modifierinvocation ( simplename after hold expiry ) simplename after hold expiry ) modifierinvocation ) functiondefinition
candidate: Sends the payment amount to the wallet .
ref: Pay the contract balance to the contract creator .

770:
src: ( functiondefinition ( simplename bonus ) simplename bonus ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename amount raised ) simplename amount raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ( returnstatement ( simplename amount ) simplename amount ) returnstatement ) block ) functiondefinition
candidate: Compute the bonus according to the investment period .
ref: Compute the <UNK> bonus according to the investment period .

771:
src: ( functiondefinition ( simplename withdraw ether or throw ) simplename withdraw ether or throw ( visibility default ) visibility default ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( functioncall ( memberaccess ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( simplename amount ) simplename amount ) functioncall ) functioncall ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename result ) simplename result ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ) block ) functiondefinition
candidate: result - value manager can withdraw ether .
ref: This uses call . value ( ) ( ) .

772:
src: ( functiondefinition ( simplename transfer for ) simplename transfer for ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename from ) simplename from ) indexaccess ( simplename amount of tokens ) simplename amount of tokens ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename to ) simplename to ) indexaccess ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( functioncall ( simplename get dividends of ) simplename get dividends of ( simplename from ) simplename from ( booleanliteral true ) booleanliteral true ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ( simplename from ) simplename from ) functioncall ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token fee ) simplename token fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename dividend fee ) simplename dividend fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename taxed tokens ) simplename taxed tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename amount of tokens ) simplename amount of tokens ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename tokens to ether ) simplename tokens to ether ( simplename token fee ) simplename token fee ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token supply ) simplename token supply ( functioncall ( memberaccess
candidate: Transfer tokens from the caller to a new holder .
ref: Transfer tokens from the caller to a new holder .

773:
src: ( functiondefinition ( simplename invest ) simplename invest ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token price in pico usd ) simplename token price in pico usd ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename invested in wei ) simplename invested in wei ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei to usd ) simplename wei to usd ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename sha256 ) simplename sha256 ( binaryoperation | ) binaryoperation | ( binaryoperation << ) binaryoperation << ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename investor ) simplename investor ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename token price in wei ) simplename token price in wei ) functioncall ( simplename hash ) simplename hash ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename ecrecover ) simplename ecrecover ( simplename hash ) simplename hash ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ( simplename signer ) simplename signer ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename sub ) simplename sub ( simplename invested in wei ) simplename invested in wei ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( functioncall ( simplename with decimals ) simplename with decimals ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token price in wei ) simplename token price in wei ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename div ) simplename div ( functioncall ( simplename mul ) simplename mul ( simplename token price in pico usd ) simplename token price in pico usd ( simplename wei to usd ) simplename wei to usd ) functioncall ( functioncall ( simplename pow ) simplename pow ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename usd decimals ) simplename usd decimals ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens number ) simplename tokens number ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename div ) simplename div ( functioncall ( simplename with decimals ) simplename with decimals ( simplename invested in wei ) simplename invested in wei ( simplename decimals ) simplename decimals ) functioncall ( simplename
candidate: Allow contributions to this crowdfunding .
ref: Settle an investment made in ETH and distribute tokens .

774:
src: ( functiondefinition ( simplename release founder tokens ) simplename release founder tokens ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename quarter first ) simplename quarter first ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename opening time ) simplename opening time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename quarter first ) simplename quarter first ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename founder one ) simplename founder one ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename founder two ) simplename founder two ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename allocated ) simplename allocated ( simplename founder one ) simplename founder one ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename allocated ) simplename allocated ( simplename founder one ) simplename founder one ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename allocated ) simplename allocated ( simplename founder two ) simplename founder two ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename allocated ) simplename allocated ( simplename founder two ) simplename founder two ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total allocated ) simplename total allocated ( functioncall ( memberaccess ( simplename total allocated ) simplename total allocated ( simplename sub ) simplename sub ) memberaccess ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total allocated ) simplename total allocated ( functioncall ( memberaccess ( simplename total allocated ) simplename total allocated ( simplename sub ) simplename sub ) memberaccess ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename quarter second ) simplename quarter second ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename opening time ) simplename opening time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename quarter second ) simplename quarter second ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename founder one ) simplename founder one ( simplename quarterly release ) simplename quarterly release ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename
candidate: This function will allow token release from the token .
ref: <UNK> quarter release , 25 of token to the founders .

775:
src: ( functiondefinition ( simplename calc fees ) simplename calc fees ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename end ) simplename end ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename start amount ) simplename start amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename start amount ) simplename start amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ) returnstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename number of days ) simplename number of days ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( functioncall ( simplename <UNK> day ) simplename <UNK> day ( simplename end ) simplename end ) functioncall ( functioncall ( simplename <UNK> day ) simplename <UNK> day ( simplename start ) simplename start ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename number of days ) simplename number of days ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( simplename start amount ) simplename start amount ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( functioncall ( simplename rate for days ) simplename rate for days ( simplename number of days ) simplename number of days ) functioncall ( simplename start amount ) simplename start amount ) tupleexpression ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename fee ) simplename fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation != ) binaryoperation != ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( simplename amount ) simplename amount ) expressionstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee ) simplename fee ( functioncall ( simplename safe sub ) simplename safe sub ( simplename start amount ) simplename start amount ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: calculate fees for the specified investor .
ref: minimum fee is 1 unless same day .

776:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( simplename locked ) simplename locked ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( simplename transfer internal ) simplename transfer internal ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) variabledeclarationstatement ( ifstatement ( simplename success ) simplename success ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename success ) simplename success ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from other address .
ref: A contract attempts to get the coins .

777:
src: ( functiondefinition ( simplename current round index by date ) simplename current round index by date ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename round num ) simplename round num ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename date14 <UNK> ) simplename date14 <UNK> ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename date sale r3 ) simplename date sale r3 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename date sale r2 ) simplename date sale r2 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename date sale r1 ) simplename date sale r1 ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename date pre sale ) simplename date pre sale ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) ifstatement ) block ) functiondefinition
candidate: current round .
ref: Determine the current sale tier .

778:
src: ( modifierdefinition ( simplename only white list agent ) simplename only white list agent ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename white list agent ) simplename white list agent ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the whitelisted .
ref: revert if sender is whiteListAgent .

779:
src: ( functiondefinition ( simplename add commission to pending withdrawals ) simplename add commission to pending withdrawals ( visibility external ) visibility external ( variabledeclaration ( simplename canvas id ) simplename canvas id ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename canvas ) simplename canvas ( simpletype ( simplename canvas ) simplename canvas ) simpletype ) variabledeclaration ( functioncall ( simplename get canvas ) simplename get canvas ( simplename canvas id ) simplename canvas id ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename commission ) simplename commission ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename is paid ) simplename is paid ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename commission ) simplename commission ( simplename is paid ) simplename is paid ) tupleexpression ( functioncall ( simplename calculate commission ) simplename calculate commission ( simplename canvas id ) simplename canvas id ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename commission ) simplename commission ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is paid ) simplename is paid ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename canvas ) simplename canvas ( simplename is commission paid ) simplename is commission paid ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename add pending withdrawal ) simplename add pending withdrawal ( simplename owner ) simplename owner ( simplename commission ) simplename commission ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename commission added to withdrawals ) simplename commission added to withdrawals ( simplename canvas id ) simplename canvas id ( simplename commission ) simplename commission ( simplename action initial bidding ) simplename action initial bidding ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename state owned ) simplename state owned ( simplename canvas id ) simplename canvas id ) modifierinvocation ( modifierinvocation ( simplename force owned ) simplename force owned ( simplename canvas id ) simplename canvas id ) modifierinvocation ) functiondefinition
candidate: Allow the owner to pending withdrawals .
ref: Only for the owner of the contract .

780:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( memberaccess ( simplename admin ) simplename admin ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is admin ) simplename is admin ) modifierinvocation ) functiondefinition
candidate: This function is used to withdraw funds if needed for Admin .
ref: backup withdraw , if somehow ETH gets in here .

781:
src: ( functiondefinition ( simplename add reward percentage ) simplename add reward percentage ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename percentage ) simplename percentage ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename index ) simplename index ( memberaccess ( simplename reward percentage ) simplename reward percentage ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename reward percentage ) simplename reward percentage ( simplename push ) simplename push ) memberaccess ( simplename percentage ) simplename percentage ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename reward percentage ) simplename reward percentage ( simplename index ) simplename index ( simplename percentage ) simplename percentage ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ( modifierinvocation ( simplename is valid reward percentage ) simplename is valid reward percentage ( simplename percentage ) simplename percentage ) modifierinvocation ) functiondefinition
candidate: Add the reward percentage for a new percentage .
ref: Adds a reward percentage to the list of available reward percentages , specific to 18 decimals .

782:
src: ( functiondefinition ( simplename has ended ) simplename has ended ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cap reached ) simplename cap reached ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation > ) binaryoperation > ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename minimum investment ) simplename minimum investment ) functioncall ( simplename cap ) simplename cap ) variabledeclarationstatement ( returnstatement ( binaryoperation || ) binaryoperation || ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename has ended ) simplename has ended ) memberaccess ) functioncall ( simplename cap reached ) simplename cap reached ) returnstatement ) block ) functiondefinition
candidate: true if crowdsale event has ended .
ref: true if crowdsale event has ended .

783:
src: ( functiondefinition ( simplename change requirement ) simplename change requirement ( visibility internal ) visibility internal ( variabledeclaration ( simplename required ) simplename required ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename required ) simplename required ( simplename required ) simplename required ) expressionstatement ( expressionstatement ( functioncall ( simplename requirement change ) simplename requirement change ( simplename required ) simplename required ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows to change the number of required confirmations .
ref: Allows to change the number of required confirmations .

784:
src: ( functiondefinition ( simplename withdraw 3 ) simplename withdraw 3 ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename eth to be claimed ) simplename eth to be claimed ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename withdraw 3 completed ) simplename withdraw 3 completed ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename unlock date3 ) simplename unlock date3 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename admin ) simplename admin ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( simplename eth to be claimed ) simplename eth to be claimed ( simplename div ) simplename div ) memberaccess ( simplename quarter3 ) simplename quarter3 ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename withdrew ) simplename withdrew ( simplename admin ) simplename admin ( functioncall ( memberaccess ( simplename eth to be claimed ) simplename eth to be claimed ( simplename div ) simplename div ) memberaccess ( simplename quarter3 ) simplename quarter3 ) functioncall ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename withdraw 3 completed ) simplename withdraw 3 completed ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: team withdrawal after specified time .
ref: team withdrawal after specified time .

785:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility public ) visibility public ( variabledeclaration ( simplename burner ) simplename burner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename burn all ) simplename burn all ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename burner ) simplename burner ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename burner ) simplename burner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename burner ) simplename burner ) variabledeclarationstatement ( ifstatement ( simplename burn all ) simplename burn all ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename burner ) simplename burner ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Burns a specific amount of tokens .
ref: Burns a specific amount of tokens .

786:
src: ( functiondefinition ( simplename challenge part2 ) simplename challenge part2 ( visibility private ) visibility private ( variabledeclaration ( simplename dungeon id ) simplename dungeon id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename hero id ) simplename hero id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename floor number ) simplename floor number ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename rewards ) simplename rewards ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename floor genes ) simplename floor genes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename floor number ) simplename floor number ( simplename rewards ) simplename rewards ( simplename floor genes ) simplename floor genes ) tupleexpression ( functioncall ( memberaccess ( simplename dungeon token contract ) simplename dungeon token contract ( simplename dungeons ) simplename dungeons ) memberaccess ( simplename dungeon id ) simplename dungeon id ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( simplename hero genes ) simplename hero genes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename hero id ) simplename hero id ( simplename hero genes ) simplename hero genes ) tupleexpression ( functioncall ( simplename get hero genes or claim first hero ) simplename get hero genes or claim first hero ( simplename hero id ) simplename hero id ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( simplename get challenge success ) simplename get challenge success ( simplename hero genes ) simplename hero genes ( simplename dungeon id ) simplename dungeon id ( simplename floor genes ) simplename floor genes ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename new floor genes ) simplename new floor genes ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename master rewards ) simplename master rewards ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename success rewards ) simplename success rewards ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename new rewards ) simplename new rewards ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( simplename success ) simplename success ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename new floor genes ) simplename new floor genes ( functioncall ( simplename get new floor gene ) simplename get new floor gene ( simplename dungeon id ) simplename dungeon id ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename master rewards ) simplename master rewards ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename rewards ) simplename rewards ( simplename master rewards percent ) simplename master rewards percent ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename floor number ) simplename floor number ( simplename rush time floor count ) simplename rush time floor count
candidate: Split the challenge function into multiple parts because of stack too deep error .
ref: Split the challenge function into multiple parts because of stack too deep error .

787:
src: ( functiondefinition ( simplename burn by percentage ) simplename burn by percentage ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename m ) simplename m ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename d ) simplename d ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename m ) simplename m ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename d ) simplename d ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename m ) simplename m ( simplename d ) simplename d ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total burned tokens ) simplename total burned tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename mul ) simplename mul ) memberaccess ( simplename m ) simplename m ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename d ) simplename d ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename total burned tokens ) simplename total burned tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename total burned tokens ) simplename total burned tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename total burned tokens ) simplename total burned tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename on token burned ) simplename on token burned ( simplename total burned tokens ) simplename total burned tokens ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Burns a specific amount of tokens .
ref: Remove numerator / denominator of tokens from the system irreversibly .

788:
src: ( functiondefinition ( simplename period ) simplename period ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( functioncall ( simplename active ) simplename active ) functioncall ( block ( returnstatement ( memberaccess ( indexaccess ( simplename campaigns ) simplename campaigns ( simplename last campaign id ) simplename last campaign id ) indexaccess ( simplename period ) simplename period ) memberaccess ) returnstatement ) block ( block ( returnstatement ( simplename period ) simplename period ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: The latest period .
ref: The latest preiod .

789:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( simplename funding ) simplename funding ( throwstatement throw ) throwstatement throw ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sender balance ) simplename sender balance ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename sender balance ) simplename sender balance ( simplename value ) simplename value ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename sender balance ) simplename sender balance ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sender balance ) simplename sender balance ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename last transferred ) simplename last transferred ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: allows to transfer token to another address .

790:
src: ( functiondefinition ( simplename take off item ) simplename take off item ( visibility public ) visibility public ( variabledeclaration ( simplename champ id ) simplename champ id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename type ) simplename type ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename item id ) simplename item id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename champ ) simplename champ ( simpletype ( simplename champ ) simplename champ ) simpletype ) variabledeclaration ( indexaccess ( simplename champs ) simplename champs ( simplename champ id ) simplename champ id ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename type ) simplename type ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename item id ) simplename item id ( memberaccess ( simplename champ ) simplename champ ( simplename eq sword ) simplename eq sword ) memberaccess ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename item id ) simplename item id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename champ ) simplename champ ( simplename eq sword ) simplename eq sword ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename type ) simplename type ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename item id ) simplename item id ( memberaccess ( simplename champ ) simplename champ ( simplename eq shield ) simplename eq shield ) memberaccess ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename item id ) simplename item id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename champ ) simplename champ ( simplename eq shield ) simplename eq shield ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename type ) simplename type ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename item id ) simplename item id ( memberaccess ( simplename champ ) simplename champ ( simplename eq helmet ) simplename eq helmet ) memberaccess ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename item id ) simplename item id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename champ ) simplename champ ( simplename eq helmet ) simplename eq helmet ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename item id ) simplename item id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename items ) simplename items ( simplename item id ) simplename item id ) indexaccess ( simplename on champ ) simplename on champ ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner of champ ) simplename
candidate: User can call this function to sell their item .
ref: Takes item off champ .

791:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is contract ) simplename is contract ( simplename to ) simplename to ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( functioncall ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) functioncall ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename nspreceiver ) simplename nspreceiver ) simpletype ) variabledeclaration ( functioncall ( simplename nspreceiver ) simplename nspreceiver ( simplename to ) simplename to ) functioncall ) variabledeclarationstatement ( expressionstatement
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

792:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( functioncall ( simplename get rate ) simplename get rate ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename transfer if token available ) simplename transfer if token available ( simplename tokens ) simplename tokens ( simplename wei amount ) simplename wei amount ( simplename beneficiary ) simplename beneficiary ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: low level token purchase function .
ref: low level token purchase function .

793:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed to spend ) simplename allowed to spend ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Allow _spender to withdraw from your account , multiple times , up to the _value amount .

794:
src: ( functiondefinition ( simplename tokens to be returned ) simplename tokens to be returned ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename erc20 basic ) simplename erc20 basic ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename token ) simplename token ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename token ) simplename token ) functioncall ( returnstatement ( functioncall ( memberaccess ( functioncall ( simplename get balance ) simplename get balance ) functioncall ( simplename minus ) simplename minus ) memberaccess ( simplename tokens allocated total ) simplename tokens allocated total ) functioncall ) returnstatement ( returnstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) returnstatement ) ifstatement ) block ) functiondefinition
candidate: This function is prototyped in Recoverable contract .
ref: This function is prototyped in Recoverable contract .

795:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

796:
src: ( functiondefinition ( simplename get total approvers ) simplename get total approvers ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( memberaccess ( simplename approvers ) simplename approvers ( simplename length ) simplename length ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Returns the total number of this function .
ref: Gets the total number of <UNK> .

797:
src: ( functiondefinition ( simplename set min value ) simplename set min value ( visibility public ) visibility public ( variabledeclaration ( simplename min value ) simplename min value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename end time ) simplename end time ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename min value ) simplename min value ( simplename min value ) simplename min value ) expressionstatement ) block ( modifierinvocation ( simplename if authorized ) simplename if authorized ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename aphrodite ) simplename aphrodite ) modifierinvocation ) functiondefinition
candidate: Set the minimum value of an addresses to be paused .
ref: Sets the mininum Value in Ether to purchase tokens .

798:
src: ( functiondefinition ( simplename update winner bid ) simplename update winner bid ( visibility external ) visibility external ( variabledeclaration ( simplename is ask bid ) simplename is ask bid ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( variabledeclaration ( simplename bidder ) simplename bidder ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename bid value ) simplename bid value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename previous bid hash ) simplename previous bid hash ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename signature assistant ) simplename signature assistant ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename signature auctioneer ) simplename signature auctioneer ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename try close ) simplename try close ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename phase ) simplename phase ( simplename phase closed ) simplename phase closed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is ask bid ) simplename is ask bid ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename bid value ) simplename bid value ( simplename winner bid value ) simplename winner bid value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename bid value ) simplename bid value ( simplename min bid value ) simplename min bid value ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename fingerprint ) simplename fingerprint ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( memberaccess ( simplename abi ) simplename abi ( simplename encode packed ) simplename encode packed ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename is ask bid ) simplename is ask bid ( simplename bidder ) simplename bidder ( simplename bid value ) simplename bid value ( simplename previous bid hash ) simplename previous bid hash ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fingerprint ) simplename fingerprint ( functioncall ( simplename to eth signed message hash ) simplename to eth signed message hash ( simplename fingerprint ) simplename fingerprint ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename auctioneer ) simplename auctioneer ( functioncall ( simplename recover ) simplename recover ( simplename fingerprint ) simplename fingerprint ( simplename signature auctioneer ) simplename signature auctioneer ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename assistant ) simplename assistant ( functioncall ( simplename recover ) simplename recover ( simplename fingerprint ) simplename fingerprint ( simplename signature assistant ) simplename signature assistant ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename winner bidder ) simplename winner bidder ( simplename bidder ) simplename bidder ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename winner bid value ) simplename winner bid value ( simplename bid value ) simplename
candidate: Updates the bid that was overbid .
ref: Update winner bid .

799:
src: ( functiondefinition ( simplename <UNK> address ) simplename <UNK> address ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( indexaccess ( simplename is authorised ) simplename is authorised ( simplename addr ) simplename addr ) indexaccess ( binaryoperation != ) binaryoperation != ( simplename addr ) simplename addr ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename is authorised ) simplename is authorised ( simplename addr ) simplename addr ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename address <UNK> ) simplename address <UNK> ( simplename addr ) simplename addr ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Owner of this contract may be approved by setting address .
ref: Allows the owner to <UNK> an address from approving or requesting the transfer of ETH and ERC20 tokens .

800:
src: ( functiondefinition ( simplename calculate trade ) simplename calculate trade ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename <UNK> ) simplename <UNK> ) functioncall ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename <UNK> ) simplename <UNK> ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename <UNK> ) simplename <UNK> ) functioncall ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename <UNK> ) simplename <UNK> ) functioncall ) functioncall ( simplename <UNK> ) simplename <UNK> ) functioncall ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculates the amount of tokens that buyer gets .
ref: Trade balancing algorithm .

801:
src: ( functiondefinition ( simplename to string ) simplename to string ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename raw bytes ) simplename raw bytes ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename string length ) simplename string length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename output string ) simplename output string ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename string ) simplename string ) simpletype ( simplename string length ) simplename string length ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename output ptr ) simplename output ptr ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename bytes ptr ) simplename bytes ptr ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename output ptr ) simplename output ptr ( assemblycall ( simplename add ) simplename add ( simplename output string ) simplename output string ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ) assemblyassignment ( assemblyassignment ( simplename bytes ptr ) simplename bytes ptr ( simplename raw bytes ) simplename raw bytes ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( expressionstatement ( functioncall ( simplename memcpy ) simplename memcpy ( simplename output ptr ) simplename output ptr ( simplename bytes ptr ) simplename bytes ptr ( simplename string length ) simplename string length ) functioncall ) expressionstatement ( returnstatement ( simplename output string ) simplename output string ) returnstatement ) block ) functiondefinition
candidate: Adapted from toString ( slice ) by arachnid ( Nick Johnson email protected ) .
ref: Adapted from toString ( slice ) by arachnid ( Nick Johnson email protected ) .

802:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename code length ) simplename code length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename code length ) simplename code length ( assemblycall ( simplename extcodesize ) simplename extcodesize ( simplename to ) simplename to ) assemblycall ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( ifstatement ( binaryoperation < ) binaryoperation < ( functioncall ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename value ) simplename value ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename verify option pool income ) simplename verify option pool income ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename verify option pool <UNK> ) simplename verify option pool <UNK> ( simplename to ) simplename to ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename code length ) simplename code length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename erc223 receiving contract ) simplename erc223 receiving contract ) simpletype ) variabledeclaration ( functioncall ( simplename erc223 receiving contract ) simplename erc223 receiving contract ( simplename to ) simplename to ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename receiver ) simplename receiver ( simplename token fallback ) simplename token fallback ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) expressionstatement ) block ) ifstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename verify the
candidate: Transfer the specified amount of tokens to the specified address .
ref: Transfer the specified amount of tokens to the specified address .

803:
src: ( functiondefinition ( simplename is ico ) simplename is ico ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start phase1 ) simplename start phase1 ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end of phase3 ) simplename end of phase3 ) returnstatement ) block ) functiondefinition
candidate: Check is ICO is active .
ref: Check whether the ICO is active at the moment .

804:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename has ended ) simplename has ended ) functioncall ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename soft cap reached ) simplename soft cap reached ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( simplename vault ) simplename vault ( simplename close ) simplename close ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( simplename vault ) simplename vault ( simplename enable refunds ) simplename enable refunds ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Finalize a successful crowdsale .
ref: vault finalization task , called when owner calls finalize ( ) .

805:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename can transfer ) simplename can transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) modifierinvocation ) functiondefinition
candidate: Transfer token for a specified address when not paused .
ref: Transfers the specified value of tokens to the destination address .

806:
src: ( functiondefinition ( simplename current round information ) simplename current round information ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename price per thousands ) simplename price per thousands ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename supply remaining ) simplename supply remaining ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename currently released ) simplename currently released ) tupleexpression ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename currently released ) simplename currently released ) tupleexpression ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename currently released ) simplename currently released ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename currently released ) simplename currently released ) tupleexpression ) returnstatement ) block ( block ( returnstatement ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Get the current timestamp of the current round .
ref: Returns the current ICO round information .

807:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename withdraw payments ) simplename withdraw payments ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename surplus ) simplename surplus ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename total payments ) simplename total payments ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename surplus ) simplename surplus ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename transfer ) simplename transfer ) memberaccess ( simplename surplus ) simplename surplus ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename non reentrant ) simplename non reentrant ) modifierinvocation ) functiondefinition
candidate: This function withdraws all of the Ether being sent .
ref: The owner can only withdraw what has not been assigned to the transfer fee address as <UNK> .

808:
src: ( functiondefinition ( simplename keys ) simplename keys ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename current ) simplename current ( simpletype ( simplename round ) simplename round ) simpletype ) variabledeclaration ( indexaccess ( simplename rounds ) simplename rounds ( simplename current round ) simplename current round ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename c key ) simplename c key ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename current ) simplename current ( simplename keys ) simplename keys ) memberaccess ( simplename decimals ) simplename decimals ) tupleexpression ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename price ) simplename price ( simplename c key ) simplename c key ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename remain keys ) simplename remain keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename c key ) simplename c key ( simplename mul ) simplename mul ) memberaccess ( simplename decimals ) simplename decimals ) functioncall ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename current ) simplename current ( simplename keys ) simplename keys ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename remain ) simplename remain ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename remain keys ) simplename remain keys ( simplename mul ) simplename mul ) memberaccess ( simplename price ) simplename price ) functioncall ( simplename decimals ) simplename decimals ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename remain ) simplename remain ( simplename eth ) simplename eth ( block ( returnstatement ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename mul ) simplename mul ) memberaccess ( simplename decimals ) simplename decimals ) functioncall ( simplename price ) simplename price ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bought keys ) simplename bought keys ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename remain keys ) simplename remain keys ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename eth ) simplename eth ( functioncall ( memberaccess ( simplename eth ) simplename eth ( simplename sub ) simplename sub ) memberaccess ( simplename remain ) simplename remain ) functioncall ) expressionstatement ( whilestatement ( booleanliteral true ) booleanliteral true ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename c key ) simplename c key ( functioncall ( memberaccess ( simplename c key ) simplename c key ( simplename add ) simplename add
candidate: returns all the amount of keys you would exist with given an amount of eth .
ref: the keys that one could buy at a stage using _eth .

809:
src: ( functiondefinition ( simplename close option ) simplename close option ( visibility external ) visibility external ( variabledeclaration ( simplename token a token b maker ) simplename token a token b maker ( array ( simpletype ( simplename address ) simplename address ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename limit token a limit token b premium ) simplename limit token a limit token b premium ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename maturation expiration ) simplename maturation expiration ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename maker is seller ) simplename maker is seller ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename get option state ) simplename get option state ( simplename token a token b maker ) simplename token a token b maker ( simplename limit token a limit token b premium ) simplename limit token a limit token b premium ( simplename maturation expiration ) simplename maturation expiration ( simplename maker is seller ) simplename maker is seller ) functioncall ( memberaccess ( simplename option states ) simplename option states ( simplename matured ) simplename matured ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename option hash ) simplename option hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename get option hash ) simplename get option hash ( simplename token a token b maker ) simplename token a token b maker ( simplename limit token a limit token b premium ) simplename limit token a limit token b premium ( simplename maturation expiration ) simplename maturation expiration ( simplename maker is seller ) simplename maker is seller ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seller ) simplename seller ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename get seller ) simplename get seller ( indexaccess ( simplename token a token b maker ) simplename token a token b maker ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( simplename option taker ) simplename option taker ( simplename option hash ) simplename option hash ) indexaccess ( simplename maker is seller ) simplename maker is seller ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename seller ) simplename seller ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer option to user ) simplename transfer option to user ( simplename option hash ) simplename option hash ( simplename seller ) simplename seller ( indexaccess ( simplename token a token b maker ) simplename token a token b maker ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( indexaccess ( indexaccess ( simplename option balance ) simplename option balance ( simplename option hash ) simplename option hash ) indexaccess ( indexaccess ( simplename token a token b maker ) simplename token a token b maker ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall
candidate: Allows an owner to close an offchain Option order early ( i . e .
ref: Allows an Option's Seller to withdraw their funds after the Option's Maturation .

810:
src: ( functiondefinition ( simplename calculated tokens ) simplename calculated tokens ( visibility public ) visibility public ( variabledeclaration ( simplename src ) simplename src ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename oracle ) simplename oracle ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename src ) simplename src ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Function to check tokens .
ref: callback function - oracle sends amount of eUSD tokens to mint .

811:
src: ( functiondefinition ( simplename top up erc20 ) simplename top up erc20 ( visibility external ) visibility external ( variabledeclaration ( simplename receiver address ) simplename receiver address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename open block number ) simplename open block number ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename added deposit ) simplename added deposit ( simpletype ( simplename uint192 ) simplename uint192 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename update internal balance structs ) simplename update internal balance structs ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename receiver address ) simplename receiver address ( simplename open block number ) simplename open block number ( simplename added deposit ) simplename added deposit ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename added deposit ) simplename added deposit ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: The accepted ether amount .
ref: Increase the sender's current deposit .

812:
src: ( functiondefinition ( simplename set stage2 start ) simplename set stage2 start ( visibility public ) visibility public ( variabledeclaration ( simplename start stage2 time ) simplename start stage2 time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename start stage2 time ) simplename start stage2 time ( simplename now ) simplename now ( binaryoperation > ) binaryoperation > ( simplename start stage2 time ) simplename start stage2 time ( simplename start time ) simplename start time ( binaryoperation < ) binaryoperation < ( simplename start stage2 time ) simplename start stage2 time ( simplename deadline ) simplename deadline ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename start stage2 time ) simplename start stage2 time ( simplename start stage2 time ) simplename start stage2 time ) expressionstatement ) block ( modifierinvocation ( simplename only creator ) simplename only creator ) modifierinvocation ) functiondefinition
candidate: Set ICO start date .
ref: Set timestamp of <UNK> start .

813:
src: ( functiondefinition ( simplename transfer to address ) simplename transfer to address ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename with allowance ) simplename with allowance ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename transfer if requirements met ) simplename transfer if requirements met ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename with allowance ) simplename with allowance ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: function that is called when transaction target is an address .
ref: function that is called when transaction target is an address .

814:
src: ( functiondefinition ( simplename unreleased amount ) simplename unreleased amount ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename unreleased ) simplename unreleased ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename vesting offsets length ) simplename vesting offsets length ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( functioncall ( memberaccess ( simplename i ) simplename i ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename unreleased ) simplename unreleased ( functioncall ( memberaccess ( simplename unreleased ) simplename unreleased ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename vesting amounts ) simplename vesting amounts ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( functioncall ( memberaccess ( simplename unreleased ) simplename unreleased ( simplename sub ) simplename sub ) memberaccess ( simplename released ) simplename released ) functioncall ) returnstatement ) block ) functiondefinition
candidate: the amount of vested tokens to beneficiary .
ref: Calculates the amount that has not yet released .

815:
src: ( functiondefinition ( simplename allocate tokens ) simplename allocate tokens ( visibility public ) visibility public ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename customer uuid ) simplename customer uuid ( simpletype ( simplename bytes16 ) simplename bytes16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename allocate internal ) simplename allocate internal ( simplename receiver ) simplename receiver ( simplename customer uuid ) simplename customer uuid ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename can allocate tokens ) simplename can allocate tokens ) modifierinvocation ) functiondefinition
candidate: Called by the owner to allocate the specified address .
ref: Allocate tokens to specified address .

816:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balances ) simplename previous balances ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename previous balances ) simplename previous balances ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename transfer allowed ) simplename transfer allowed ( simplename from ) simplename from ) modifierinvocation ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

817:
src: ( functiondefinition ( simplename transfer timelocked ) simplename transfer timelocked ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename release time ) simplename release time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename timelock ) simplename timelock ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename token timelock ) simplename token timelock ) simpletype ( simplename this ) simplename this ( simplename to ) simplename to ( simplename release time ) simplename release time ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename timelock ) simplename timelock ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename time lock ) simplename time lock ( simplename to ) simplename to ( simplename amount ) simplename amount ( simplename release time ) simplename release time ) functioncall ) emitstatement ( returnstatement ( simplename timelock ) simplename timelock ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Transfers timelocked tokens .
ref: transfer timelocked tokens .

818:
src: ( functiondefinition ( simplename add administrators ) simplename add administrators ( visibility default ) visibility default ( variabledeclaration ( simplename admin address ) simplename admin address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename administrators ) simplename administrators ( simplename admin address ) simplename admin address ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename adminstrator added ) simplename adminstrator added ( simplename admin address ) simplename admin address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Owner can add a new administrator .
ref: Owner can add a new administrator .

819:
src: ( functiondefinition ( simplename is activated ) simplename is activated ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( indexaccess ( simplename activated ) simplename activated ( simplename this ) simplename this ) indexaccess ( indexaccess ( simplename activated ) simplename activated ( simplename aragon dev multisig ) simplename aragon dev multisig ) indexaccess ( indexaccess ( simplename activated ) simplename activated ( simplename community multisig ) simplename community multisig ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: used to make sure no one can interact with contract until it has been activated .
ref: Whether the needed accounts have activated the sale .

820:
src: ( functiondefinition ( simplename rate ) simplename rate ( visibility external ) visibility external ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename who ) simplename who ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename rating ) simplename rating ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename rating ) simplename rating ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation >= ) binaryoperation >= ( simplename rating ) simplename rating ( unaryoperation - ) unaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename who ) simplename who ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename store ) simplename store ( simpletype ( simplename rating store ) simplename rating store ) simpletype ) variabledeclaration ( functioncall ( simplename rating store ) simplename rating store ( simplename storage address ) simplename storage address ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename weight ) simplename weight ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename work rating ) simplename work rating ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( simplename rating ) simplename rating ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename abs rating ) simplename abs rating ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename rating ) simplename rating ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename abs rating ) simplename abs rating ( simplename work rating ) simplename work rating ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename abs rating ) simplename abs rating ( unaryoperation - ) unaryoperation - ( simplename work rating ) simplename work rating ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( variabledeclaration ( simplename sender score ) simplename sender score ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename sender ratings ) simplename sender ratings ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sender cumulative ) simplename sender cumulative ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename sender score ) simplename sender score ( simplename sender ratings ) simplename sender ratings ) tupleexpression ( functioncall ( memberaccess ( simplename store ) simplename store ( simplename get ) simplename get ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename sender score ) simplename sender score ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement
candidate: success If the manager can send ETH to this address .
ref: success If the rating was processed successfully .

821:
src: ( functiondefinition ( simplename owner bonus send ) simplename owner bonus send ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( binaryoperation < ) binaryoperation < ( simplename bonus num ) simplename bonus num ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename bonus pool ) simplename bonus pool ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename bonus num ) simplename bonus num ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename bonus per ) simplename bonus per ( simplename bonus num ) simplename bonus num ) indexaccess ( binaryoperation / ) binaryoperation / ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename total supply ) simplename total supply ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Allows users to send bonus to the current owner .
ref: AnimatedProject : Send Bonus To Contract .

822:
src: ( functiondefinition ( simplename freeze account ) simplename freeze account ( visibility public ) visibility public ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename freeze ) simplename freeze ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename frozen account ) simplename frozen account ( simplename target ) simplename target ) indexaccess ( simplename freeze ) simplename freeze ) expressionstatement ( expressionstatement ( functioncall ( simplename frozen funds ) simplename frozen funds ( simplename target ) simplename target ( simplename freeze ) simplename freeze ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: freeze ? Prevent Allow target from sending receiving tokens .
ref: freeze ? Prevent Allow target from sending receiving tokens .

823:
src: ( functiondefinition ( simplename bonus ) simplename bonus ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( functioncall ( memberaccess ( simplename start time ) simplename start time ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( returnstatement ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) returnstatement ) ifstatement ( returnstatement ( simplename amount ) simplename amount ) returnstatement ) block ) functiondefinition
candidate: Compute the bonus according to the investment period .
ref: Bonus function for the first week .

824:
src: ( functiondefinition ( simplename get target ) simplename get target ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename exec id ) simplename exec id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename selector ) simplename selector ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seed ) simplename seed ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename selector ) simplename selector ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename getter ) simplename getter ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename getter ) simplename getter ( simplename read map ) simplename read map ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( returnstatement ( functioncall ( simplename getter ) simplename getter ( simplename exec id ) simplename exec id ( simplename seed ) simplename seed ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the number of a given number of a given number .
ref: Returns the address to which calldata with the given <UNK> will be <UNK> .

825:
src: ( functiondefinition ( simplename approve mint tokens ) simplename approve mint tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous lock tokens ) simplename previous lock tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename previous lock tokens ) simplename previous lock tokens ( simplename amount ) simplename amount ( simplename previous lock tokens ) simplename previous lock tokens ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cur total supply ) simplename cur total supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename total supply ) simplename total supply ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename cur total supply ) simplename cur total supply ( simplename amount ) simplename amount ( simplename cur total supply ) simplename cur total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename cur total supply ) simplename cur total supply ( simplename amount ) simplename amount ( simplename total supply cap ) simplename total supply cap ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balance to ) simplename previous balance to ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename previous balance to ) simplename previous balance to ( simplename amount ) simplename amount ( simplename previous balance to ) simplename previous balance to ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename lock tokens ) simplename lock tokens ( simplename owner ) simplename owner ) indexaccess ( simplename value ) simplename value ) memberaccess ( functioncall ( memberaccess ( simplename previous lock tokens ) simplename previous lock tokens ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cur block number ) simplename cur block number ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get current block number ) simplename get current block number ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation =
candidate: Approve of passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Approve of minting _amount tokens that are assigned to _owner .

826:
src: ( functiondefinition ( simplename accept ownership ) simplename accept ownership ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename ownership transferred ) simplename ownership transferred ( simplename owner ) simplename owner ( simplename pending owner ) simplename pending owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( simplename pending owner ) simplename pending owner ) expressionstatement ) block ) functiondefinition
candidate: Accept ownership transfer .
ref: Allows the <UNK> owner to accept ownership role .

827:
src: ( functiondefinition ( simplename check tok balance ) simplename check tok balance ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename contributor ) simplename contributor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename balances ) simplename balances ( simplename contributor ) simplename contributor ) indexaccess ( simplename ratio ) simplename ratio ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Check balance of a contributor can currently be added to check .
ref: Function to check the Token balance of a contributor .

828:
src: ( functiondefinition ( simplename activate ) simplename activate ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename search seed ) simplename search seed ( functioncall ( memberaccess ( simplename block ) simplename block ( simplename blockhash ) simplename blockhash ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mode ) simplename mode ( memberaccess ( simplename modes ) simplename modes ( simplename live ) simplename live ) memberaccess ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename inactive mode ) simplename inactive mode ) modifierinvocation ) functiondefinition
candidate: Function for transfering of tokens .
ref: activates the contract in * Live * mode which sets the <UNK> and enables <UNK> .

829:
src: ( functiondefinition ( simplename reward ) simplename reward ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hundred ) simplename hundred ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename beneficiary part ) simplename beneficiary part ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename hundred ) simplename hundred ( simplename sub ) simplename sub ) memberaccess ( simplename commission ) simplename commission ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename value ) simplename value ( simplename div ) simplename div ) memberaccess ( simplename beneficiary part ) simplename beneficiary part ) functioncall ) tupleexpression ( simplename mul ) simplename mul ) memberaccess ( simplename hundred ) simplename hundred ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename broker commission ) simplename broker commission ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename total ) simplename total ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) variabledeclarationstatement ( returnstatement ( tupleexpression ( binaryoperation && ) binaryoperation && ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename pool ) simplename pool ( simplename beneficiary ) simplename beneficiary ( simplename value ) simplename value ) functioncall ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename pool ) simplename pool ( simplename broker ) simplename broker ( simplename broker commission ) simplename broker commission ) functioncall ) tupleexpression ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows owner to transfer the token to the registry .
ref: Allows the owner make a reward .

830:
src: ( functiondefinition ( simplename invest ) simplename invest ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename is execution allowed ) simplename is execution allowed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is cap reached ) simplename is cap reached ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current balance ) simplename current balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename current balance ) simplename current balance ( simplename ether cap ) simplename ether cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename moving ) simplename moving ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename investor ) simplename investor ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( tupleexpression ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename investor ) simplename investor ) indexaccess ( simplename plus ) simplename plus ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) tupleexpression ( simplename maximum individual cap ) simplename maximum individual cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename maximum individual cap ) simplename maximum individual cap ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename investor ) simplename investor ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename investor ) simplename investor ) indexaccess ( simplename plus ) simplename plus ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename current balance ) simplename current balance ( simplename ether cap ) simplename ether cap ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is cap reached ) simplename is cap reached ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename invested ) simplename invested ( simplename investor ) simplename investor ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allows anyone to buy tokens .
ref: Participate in the presale .

831:
src: ( functiondefinition ( simplename add pool ) simplename add pool ( visibility public ) visibility public ( variabledeclaration ( simplename ticket price ) simplename ticket price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ticket count ) simplename ticket count ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename ticket price ) simplename ticket price ( simplename ticket price multiple ) simplename ticket price multiple ( binaryoperation == ) binaryoperation == ( binaryoperation % ) binaryoperation % ( simplename ticket price ) simplename ticket price ( simplename ticket price multiple ) simplename ticket price multiple ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename pools ) simplename pools ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename new ) simplename new ( simpletype ( simplename smart pool ) simplename smart pool ) simpletype ( simplename ticket price ) simplename ticket price ( simplename ticket count ) simplename ticket count ( simplename duration ) simplename duration ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Add a new ticket .
ref: Create a new pool ( only owner can do this ) .

832:
src: ( functiondefinition ( simplename set fee account ) simplename set fee account ( visibility public ) visibility public ( variabledeclaration ( simplename fee account ) simplename fee account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename fee account ) simplename fee account ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee account ) simplename fee account ( simplename fee account ) simplename fee account ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Sets the new fee for a certain account .
ref: Sets the account where fees will be transferred to .

833:
src: ( functiondefinition ( simplename back token owner ) simplename back token owner ( visibility internal ) visibility internal ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename end time ) simplename end time ) functioncall ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ( simplename high water ) simplename high water ( block ( expressionstatement ( functioncall ( memberaccess ( simplename wallet address ) simplename wallet address ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename this ) simplename this ( simplename wallet address ) simplename wallet address ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ) emitstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename track contributions ) simplename track contributions ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ) variabledeclarationstatement ( ifstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename wallet address ) simplename wallet address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename freeze account ) simplename freeze account ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens sold ) simplename tokens sold ( functioncall ( memberaccess ( simplename tokens sold ) simplename tokens sold ( simplename add ) simplename add ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename <UNK> purchase ) simplename <UNK> purchase ( simplename wallet address ) simplename wallet address ( memberaccess ( simplename msg ) simplename msg
candidate: This function can be used to change the controller of the contract .
ref: Main purchase function .

834:
src: ( functiondefinition ( simplename <UNK> close ) simplename <UNK> close ( visibility external ) visibility external ( variabledeclaration ( simplename receiver address ) simplename receiver address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename open block number ) simplename open block number ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint192 ) simplename uint192 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename key ) simplename key ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename get key ) simplename get key ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename receiver address ) simplename receiver address ( simplename open block number ) simplename open block number ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename channels ) simplename channels ( simplename key ) simplename key ) indexaccess ( simplename open block number ) simplename open block number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename closing requests ) simplename closing requests ( simplename key ) simplename key ) indexaccess ( simplename settle block number ) simplename settle block number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename balance ) simplename balance ( memberaccess ( indexaccess ( simplename channels ) simplename channels ( simplename key ) simplename key ) indexaccess ( simplename deposit ) simplename deposit ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename closing requests ) simplename closing requests ( simplename key ) simplename key ) indexaccess ( simplename settle block number ) simplename settle block number ) memberaccess ( binaryoperation + ) binaryoperation + ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ( simplename challenge period ) simplename challenge period ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename closing requests ) simplename closing requests ( simplename key ) simplename key ) indexaccess ( simplename settle block number ) simplename settle block number ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename closing requests ) simplename closing requests ( simplename key ) simplename key ) indexaccess ( simplename closing balance ) simplename closing balance ) memberaccess ( simplename balance ) simplename balance ) expressionstatement ( expressionstatement ( functioncall ( simplename channel close requested ) simplename channel close requested ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename receiver address ) simplename receiver address ( simplename open block number ) simplename open block number ( simplename balance ) simplename balance ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Function to close the escrow .
ref: Sender requests the closing of the channel and starts the challenge period .

835:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename allowance ) simplename allowance ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename commit dividend ) simplename commit dividend ( simplename from ) simplename from ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename commit dividend ) simplename commit dividend ( simplename to ) simplename to ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename allowance ) simplename allowance ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

836:
src: ( functiondefinition ( simplename register ) simplename register ( visibility default ) visibility default ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ether paid ) simplename ether paid ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename ether paid ) simplename ether paid ( simplename registration fee ) simplename registration fee ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seller id ) simplename seller id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename sellers ) simplename sellers ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( simplename sellers ) simplename sellers ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename sellers ) simplename sellers ( simplename seller id ) simplename seller id ) indexaccess ( simplename ether address ) simplename ether address ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename sellers ) simplename sellers ( simplename seller id ) simplename seller id ) indexaccess ( simplename average rating ) simplename average rating ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename seller lookup ) simplename seller lookup ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename seller id ) simplename seller id ) expressionstatement ) block ) functiondefinition
candidate: Register an id information about a specific stage .
ref: Register your seller address for a small fee to prevent <UNK> and and recurring address <UNK> .

837:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( binaryoperation < ) binaryoperation < ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is recipient new ) simplename is recipient new ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( ifstatement ( simplename is recipient new ) simplename is recipient new ( expressionstatement ( functioncall ( simplename token owner add ) simplename token owner add ( simplename to ) simplename to ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename token owner remove ) simplename token owner remove ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename fund sendable phase ) simplename fund sendable phase ) modifierinvocation ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Transfer the balance from owner's account to another account .
ref: Transfer the balance from owner's account to another account .

838:
src: ( functiondefinition ( simplename is valid skin ) simplename is valid skin ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename skin aid ) simplename skin aid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename skin bid ) simplename skin bid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename skin aid ) simplename skin aid ( simplename skin bid ) simplename skin bid ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename skin aid ) simplename skin aid ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename skin bid ) simplename skin bid ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename skin aid ) simplename skin aid ( simplename next skin id ) simplename next skin id ) tupleexpression ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename skin bid ) simplename skin bid ( simplename next skin id ) simplename next skin id ) tupleexpression ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename accounts to active skin ) simplename accounts to active skin ( simplename account ) simplename account ) indexaccess ( simplename skin aid ) simplename skin aid ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename accounts to active skin ) simplename accounts to active skin ( simplename account ) simplename account ) indexaccess ( simplename skin bid ) simplename skin bid ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ( returnstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename skin id to owner ) simplename skin id to owner ( simplename skin aid ) simplename skin aid ) indexaccess ( simplename account ) simplename account ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename skin id to owner ) simplename skin id to owner ( simplename skin bid ) simplename skin bid ) indexaccess ( simplename account ) simplename account ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: _isNotMixing : check whether two skins are in another mixing process .
ref: _isValidSkin : whether an account can mix using these skins .

839:
src: ( functiondefinition ( simplename batch ) simplename batch ( visibility public ) visibility public ( variabledeclaration ( simplename data ) simplename data ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename this ) simplename this ) indexaccess ( binaryoperation * ) binaryoperation * ( memberaccess ( simplename data ) simplename data ( simplename length ) simplename length ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename data ) simplename data ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename data ) simplename data ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename target ) simplename target ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename target ) simplename target ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename this ) simplename this ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename this ) simplename this ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename this ) simplename this ( simplename target ) simplename target ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: batch batch batch transfer with different amounts .
ref: This is an especial Admin-only function to make massive tokens assignments .

840:
src: ( functiondefinition ( simplename round index ) simplename round index ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename r ) simplename r ( memberaccess ( simplename rounds ) simplename rounds ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename r ) simplename r ) expressionstatement ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation < ) binaryoperation < ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( simplename r ) simplename r ) indexaccess ( simplename start ) simplename start ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) functioncall ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) functioncall ( memberaccess ( indexaccess ( simplename rounds ) simplename rounds ( simplename r ) simplename r ) indexaccess ( simplename end ) simplename end ) memberaccess ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename index ) simplename index ( functioncall ( memberaccess ( simplename r ) simplename r ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename index ) simplename index ) returnstatement ) block ) functiondefinition
candidate: gets number of current round .
ref: Return current round according to current time .

841:
src: ( functiondefinition ( simplename off freezing ) simplename off freezing ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename freezing active ) simplename freezing active ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only token manager ) simplename only token manager ) modifierinvocation ) functiondefinition
candidate: Function to set the token balance for chosen token holder .
ref: Disable freezing for contract .

842:
src: ( functiondefinition ( simplename finalize sale ) simplename finalize sale ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( simplename current sale ) simplename current sale ( simplename ended ) simplename ended ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename current sale ) simplename current sale ( simplename shares sold ) simplename shares sold ) memberaccess ( memberaccess ( simplename current sale ) simplename current sale ( simplename shares cap ) simplename shares cap ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename current sale ) simplename current sale ( simplename beneficiary ) simplename beneficiary ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename current sale ) simplename current sale ( simplename wei raised ) simplename wei raised ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename sale completed ) simplename sale completed ( memberaccess ( simplename current sale ) simplename current sale ( simplename beneficiary ) simplename beneficiary ) memberaccess ( memberaccess ( simplename current sale ) simplename current sale ( simplename wei raised ) simplename wei raised ) memberaccess ( memberaccess ( simplename current sale ) simplename current sale ( simplename shares sold ) simplename shares sold ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename current sale ) simplename current sale ( simplename exists ) simplename exists ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename is active ) simplename is active ) modifierinvocation ( modifierinvocation ( simplename only sale creator ) simplename only sale creator ) modifierinvocation ( modifierinvocation ( simplename only when selling ) simplename only when selling ) modifierinvocation ) functiondefinition
candidate: This function is called from the main sale contract .
ref: Finalize the in progress sale .

843:
src: ( functiondefinition ( simplename mint tokens ) simplename mint tokens ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename mint ) simplename mint ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allocates tokens for investors that contributed from website .
ref: Allocates tokens to beneficiary .

844:
src: ( functiondefinition ( simplename player withdraw pending transactions ) simplename player withdraw pending transactions ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename withdraw amount ) simplename withdraw amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename player pending withdrawals ) simplename player pending withdrawals ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename player pending withdrawals ) simplename player pending withdrawals ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( simplename withdraw amount ) simplename withdraw amount ) functioncall ) functioncall ( block ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename player pending withdrawals ) simplename player pending withdrawals ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename withdraw amount ) simplename withdraw amount ) expressionstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: public function in case of a failed refund or win send .
ref: need to process any <UNK> .

845:
src: ( functiondefinition ( simplename allocate tokens ) simplename allocate tokens ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename allocation finished ) simplename allocation finished ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename allocated tokens ) simplename allocated tokens ( simplename address ) simplename address ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to allocate tokens for an address .
ref: helper method that allows owner to allocate tokens to an address .

846:
src: ( functiondefinition ( simplename withdraw purchased tokens ) simplename withdraw purchased tokens ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename starbase crowdsale ) simplename starbase crowdsale ( simplename early purchases loaded ) simplename early purchases loaded ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename crowdsale purchases loaded ) simplename crowdsale purchases loaded ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation != ) binaryoperation != ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename starbase token ) simplename starbase token ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename token withdrawn ) simplename token withdrawn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token withdrawn ) simplename token withdrawn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename crowdsale purchase amount by ) simplename crowdsale purchase amount by ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename crowdsale purchase value ) simplename crowdsale purchase value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename crowdsale purchase amount by ) simplename crowdsale purchase amount by ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename crowdsale token amount ) simplename crowdsale token amount ( simplename crowdsale purchase value ) simplename crowdsale purchase value ) functioncall ( functioncall ( simplename total raised amount in cny ) simplename total raised amount in cny ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename num of purchased tokens on cs by ) simplename num of purchased tokens on cs by ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename num of purchased tokens on cs by ) simplename num of purchased tokens on cs by ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename token count ) simplename token count ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( functioncall ( memberaccess ( simplename starbase token ) simplename starbase token ( simplename allocate to crowdsale purchaser ) simplename allocate to crowdsale purchaser ) memberaccess ( memberaccess ( simplename msg ) simplename msg
candidate: Allow load refunds back on the contract for the refunding .
ref: Deliver tokens to purchasers according to their purchase amount in CNY .

847:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename validate purchase ) simplename validate purchase ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename to fund ) simplename to fund ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename calculate to fund ) simplename calculate to fund ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename to return ) simplename to return ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename to fund ) simplename to fund ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename to fund ) simplename to fund ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename rate ) simplename rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get rate ) simplename get rate ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename mul ) simplename mul ) memberaccess ( simplename to fund ) simplename to fund ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename phase2 start time ) simplename phase2 start time ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename phase1 wei raised ) simplename phase1 wei raised ( functioncall ( memberaccess ( simplename phase1 wei raised ) simplename phase1 wei raised ( simplename add ) simplename add ) memberaccess ( simplename to fund ) simplename to fund ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename phase2 wei raised ) simplename phase2 wei raised ( functioncall ( memberaccess ( simplename phase2 wei raised ) simplename phase2 wei raised ( simplename add ) simplename add ) memberaccess ( simplename to fund ) simplename to fund ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename purchaser funded ) simplename purchaser funded ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename num purchasers ) simplename num purchasers ( functioncall ( memberaccess ( simplename num purchasers ) simplename num purchasers ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename purchaser funded ) simplename
candidate: low level token purchase function .
ref: buyTokens process token purchase .

848:
src: ( functiondefinition ( simplename reinvest ) simplename reinvest ( visibility public ) visibility public ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividends ) simplename dividends ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename my dividends ) simplename my dividends ( booleanliteral false ) booleanliteral false ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename payouts to ) simplename payouts to ( simplename customer address ) simplename customer address ) indexaccess ( functioncall ( tupleexpression ( simpletypeexpression ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) simpletypeexpression ) tupleexpression ( binaryoperation * ) binaryoperation * ( simplename dividends ) simplename dividends ( simplename magnitude ) simplename magnitude ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename dividends ) simplename dividends ( indexaccess ( simplename referral balance ) simplename referral balance ( simplename customer address ) simplename customer address ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename referral balance ) simplename referral balance ( simplename customer address ) simplename customer address ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename purchase tokens ) simplename purchase tokens ( simplename dividends ) simplename dividends ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( emitstatement ( functioncall ( simplename on reinvestment ) simplename on reinvestment ( simplename customer address ) simplename customer address ( simplename dividends ) simplename dividends ( simplename tokens ) simplename tokens ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename no un auth contracts ) simplename no un auth contracts ) modifierinvocation ( modifierinvocation ( simplename only balance positive ) simplename only balance positive ) modifierinvocation ) functiondefinition
candidate: Converts all of caller's dividends to tokens .
ref: Converts all of caller's dividends to tokens .

849:
src: ( functiondefinition ( simplename give birth ) simplename give birth ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename matron id ) simplename matron id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename matron ) simplename matron ( simpletype ( simplename monster ) simplename monster ) simpletype ) variabledeclaration ( indexaccess ( simplename monsters ) simplename monsters ( simplename matron id ) simplename matron id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename owns ) simplename owns ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename matron id ) simplename matron id ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename matron ) simplename matron ( simplename birth time ) simplename birth time ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is ready to give birth ) simplename is ready to give birth ( simplename matron ) simplename matron ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sire id ) simplename sire id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename matron ) simplename matron ( simplename siring with id ) simplename siring with id ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename sire ) simplename sire ( simpletype ( simplename monster ) simplename monster ) simpletype ) variabledeclaration ( indexaccess ( simplename monsters ) simplename monsters ( simplename sire id ) simplename sire id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename parent gen ) simplename parent gen ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( memberaccess ( simplename matron ) simplename matron ( simplename generation ) simplename generation ) memberaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename sire ) simplename sire ( simplename generation ) simplename generation ) memberaccess ( memberaccess ( simplename matron ) simplename matron ( simplename generation ) simplename generation ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename parent gen ) simplename parent gen ( memberaccess ( simplename sire ) simplename sire ( simplename generation ) simplename generation ) memberaccess ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename child genes ) simplename child genes ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename gene science ) simplename gene science ( simplename mix genes ) simplename mix genes ) memberaccess ( memberaccess ( simplename matron ) simplename matron ( simplename genes ) simplename genes ) memberaccess ( memberaccess ( simplename sire ) simplename sire ( simplename genes ) simplename genes ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename matron ) simplename matron ( simplename cooldown end block ) simplename cooldown end block ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation
candidate: Function to give a new monster and checks if it is allowed .
ref: Have a pregnant Monster give birth ! .

850:
src: ( functiondefinition ( simplename create ) simplename create ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename recipient ) simplename recipient ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( simplename is distributed ) simplename is distributed ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safer math ) simplename safer math ( simplename min256 ) simplename min256 ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename mul ) simplename mul ) memberaccess ( simplename exchange rate ) simplename exchange rate ) functioncall ( functioncall ( memberaccess ( simplename token sale cap ) simplename token sale cap ( simplename sub ) simplename sub ) memberaccess ( simplename tokens sold ) simplename tokens sold ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename contribution ) simplename contribution ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename div ) simplename div ) memberaccess ( simplename exchange rate ) simplename exchange rate ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename issue tokens ) simplename issue tokens ( simplename recipient ) simplename recipient ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename funding recipient ) simplename funding recipient ( simplename transfer ) simplename transfer ) memberaccess ( simplename contribution ) simplename contribution ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename refund ) simplename refund ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( simplename contribution ) simplename contribution ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename refund ) simplename refund ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename refund ) simplename refund ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only during sale ) simplename only during sale ) modifierinvocation ) functiondefinition
candidate: Allow anyone to create a new depositing ether .
ref: Create and sell tokens to the caller .

851:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( tupleexpression ( binaryoperation == ) binaryoperation == ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Sets approved amount of tokens for spender .

852:
src: ( functiondefinition ( simplename change ) simplename change ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename return amount ) simplename return amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to token ) simplename to token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename min return ) simplename min return ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename from token ) simplename from token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename tkn ) simplename tkn ( simplename addr ) simplename addr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename in amount ) simplename in amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename tkn ) simplename tkn ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename return amount ) simplename return amount ( functioncall ( simplename exchange ) simplename exchange ( simplename from token ) simplename from token ( simplename in amount ) simplename in amount ( simplename to token ) simplename to token ( simplename min return ) simplename min return ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename return amount ) simplename return amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename erc20 ) simplename erc20 ( simplename to token ) simplename to token ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename tkn ) simplename tkn ( simplename sender ) simplename sender ) memberaccess ( simplename return amount ) simplename return amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename validate reserves ) simplename validate reserves ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename change ) simplename change ( simplename from token ) simplename from token ( simplename in amount ) simplename in amount ( simplename to token ) simplename to token ( simplename return amount ) simplename return amount ( memberaccess ( simplename tkn ) simplename tkn ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename can trade223 ) simplename can trade223 ) modifierinvocation ( modifierinvocation ( simplename token payable ) simplename token payable ) modifierinvocation ) functiondefinition
candidate: change fee amount for target price .
ref: change tokens using erc223 erc677 transfer .

853:
src: ( functiondefinition ( simplename create contract meme ) simplename create contract meme ( visibility public ) visibility public ( variabledeclaration ( simplename metadata ) simplename metadata ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename text ) simplename text ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename create meme ) simplename create meme ( simplename metadata ) simplename metadata ( simplename text ) simplename text ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename starting price ) simplename starting price ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only doge andr9k ) simplename only doge andr9k ) modifierinvocation ) functiondefinition
candidate: Creates a new meme with the given name and country and price is a meme .
ref: Creates a new meme with the given name .

854:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is banned ) simplename is banned ( simplename to ) simplename to ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

855:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

856:
src: ( functiondefinition ( simplename add black list ) simplename add black list ( visibility public ) visibility public ( variabledeclaration ( simplename who ) simplename who ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename black list ) simplename black list ( simplename who ) simplename who ) indexaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename black list ) simplename black list ( simplename who ) simplename who ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add address to the black list .
ref: Add the blacklist member .

857:
src: ( functiondefinition ( simplename server cancel active game ) simplename server cancel active game ( visibility public ) visibility public ( variabledeclaration ( simplename player address ) simplename player address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename game id ) simplename game id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename game id ) simplename game id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename player game id ) simplename player game id ( simplename player address ) simplename player address ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename game ) simplename game ( simpletype ( simplename game ) simplename game ) simpletype ) variabledeclaration ( indexaccess ( simplename game id game ) simplename game id game ( simplename game id ) simplename game id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename game id ) simplename game id ( simplename game id ) simplename game id ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename game ) simplename game ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename game status ) simplename game status ( simplename active ) simplename active ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename game ) simplename game ( simplename end initiated time ) simplename end initiated time ) memberaccess ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename game ) simplename game ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename game status ) simplename game status ( simplename server initiated end ) simplename server initiated end ) memberaccess ) expressionstatement ( emitstatement ( functioncall ( simplename log server requested end ) simplename log server requested end ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename game id ) simplename game id ) functioncall ) emitstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename game ) simplename game ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename game status ) simplename game status ( simplename player initiated end ) simplename player initiated end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename game ) simplename game ( simplename round id ) simplename round id ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( simplename close game ) simplename close game ( simplename game ) simplename game ( simplename game id ) simplename game id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename player address ) simplename player address ( memberaccess ( simplename reason ended ) simplename reason ended ( simplename regular ended ) simplename regular ended ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ) ifstatement ) block ( modifierinvocation ( simplename only server ) simplename only server ) modifierinvocation ) functiondefinition
candidate: Cancel active game session created .
ref: Cancel active game without playing .

858:
src: ( functiondefinition ( simplename allocate founder tokens ) simplename allocate founder tokens ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename end datetime ) simplename end datetime ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename founder allocated ) simplename founder allocated ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename founder ) simplename founder ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename founder allocation ) simplename founder allocation ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename founder allocation ) simplename founder allocation ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename founder allocated ) simplename founder allocated ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename allocate founder tokens ) simplename allocate founder tokens ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename founder ) simplename founder ( simplename founder allocation ) simplename founder allocation ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Set up founder address token balance .
ref: Set up founder address token balance .

859:
src: ( functiondefinition ( simplename approved ) simplename approved ( visibility private ) visibility private ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename crypton index to approved ) simplename crypton index to approved ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) returnstatement ) block ) functiondefinition
candidate: For checking approval of transfer for address _to .
ref: For checking approval of transfer for address _to .

860:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename lock affected ) simplename lock affected ) modifierinvocation ) functiondefinition
candidate: A contract attempts to get the coins .
ref: A contract attempts to get the coins .

861:
src: ( functiondefinition ( simplename purchase ) simplename purchase ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old owner ) simplename old owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename kitty id to owner ) simplename kitty id to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename selling price ) simplename selling price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename kitty id to price ) simplename kitty id to price ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename old owner ) simplename old owner ( simplename new owner ) simplename new owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename new owner ) simplename new owner ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename selling price ) simplename selling price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payment ) simplename payment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename selling price ) simplename selling price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename divs payment ) simplename divs payment ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename selling price ) simplename selling price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename divs address ) simplename divs address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename kitty id to divs ) simplename kitty id to divs ( simplename token id ) simplename token id ) indexaccess
candidate: Allows someone to send ether and obtain the token .
ref: Allows someone to send ether and obtain the token .

862:
src: ( functiondefinition ( simplename get tokens and amounts ) simplename get tokens and amounts ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename amounts ) simplename amounts ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename tokens ) simplename tokens ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename amounts ) simplename amounts ( simplename i ) simplename i ) indexaccess ( functioncall ( memberaccess ( functioncall ( simplename erc20 extended ) simplename erc20 extended ( indexaccess ( simplename tokens ) simplename tokens ( simplename i ) simplename i ) indexaccess ) functioncall ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( tupleexpression ( simplename tokens ) simplename tokens ( simplename amounts ) simplename amounts ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: This method Returns list of tokens to be used by the provided amount .
ref: Return tokens and amounts .

863:
src: ( functiondefinition ( simplename migrate v1 upgrades ) simplename migrate v1 upgrades ( visibility external ) visibility external ( variabledeclaration ( simplename player to credit ) simplename player to credit ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename upgrade ids ) simplename upgrade ids ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename tx proof ) simplename tx proof ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename game started ) simplename game started ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename tx proof ) simplename tx proof ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename player ) simplename player ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename player to credit ) simplename player to credit ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename upgrade id ) simplename upgrade id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename upgrade ids ) simplename upgrade ids ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename unit id ) simplename unit id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename schema ) simplename schema ( simplename upgrade unit id ) simplename upgrade unit id ) memberaccess ( simplename upgrade id ) simplename upgrade id ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename unit id ) simplename unit id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( unaryoperation ! ) unaryoperation ! ( indexaccess ( indexaccess ( simplename upgrades owned ) simplename upgrades owned ( simplename player ) simplename player ) indexaccess ( simplename upgrade id ) simplename upgrade id ) indexaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename upgrade class ) simplename upgrade class ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename schema ) simplename schema ( simplename upgrade class ) simplename upgrade class ) memberaccess ( simplename upgrade id ) simplename upgrade id ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename upgrade value ) simplename upgrade value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename schema ) simplename schema ( simplename upgrade value ) simplename upgrade value ) memberaccess ( simplename
candidate: To be overriden to add functionality .
ref: Gives players the upgrades they <UNK> paid <UNK> ( i . e .

864:
src: ( functiondefinition ( simplename lock ) simplename lock ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename token ) simplename token ) simpletype ) variabledeclaration ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename unlock time ) simplename unlock time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( unaryoperation ++ ) unaryoperation ++ ( simplename next lock id ) simplename next lock id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename lock info ) simplename lock info ( simpletype ( simplename token time lock info ) simplename token time lock info ) simpletype ) variabledeclaration ( indexaccess ( simplename locks ) simplename locks ( simplename id ) simplename id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename lock info ) simplename lock info ( simplename token ) simplename token ) memberaccess ( simplename token ) simplename token ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename lock info ) simplename lock info ( simplename beneficiary ) simplename beneficiary ) memberaccess ( simplename beneficiary ) simplename beneficiary ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename lock info ) simplename lock info ( simplename amount ) simplename amount ) memberaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename lock info ) simplename lock info ( simplename unlock time ) simplename unlock time ) memberaccess ( simplename unlock time ) simplename unlock time ) expressionstatement ( emitstatement ( functioncall ( simplename lock ) simplename lock ( simplename id ) simplename id ( simplename token ) simplename token ( simplename beneficiary ) simplename beneficiary ( simplename amount ) simplename amount ( simplename unlock time ) simplename unlock time ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename this ) simplename this ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( returnstatement ( simplename id ) simplename id ) returnstatement ) block ) functiondefinition
candidate: time lock ID .
ref: time lock ID .

865:
src: ( functiondefinition ( simplename transfer ownership ) simplename transfer ownership ( visibility public ) visibility public ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new owner ) simplename new owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( simplename new owner ) simplename new owner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition ( simpletype ( simplename standard token ) simplename standard token ) simpletype ( simpletype ( simplename ownable ) simplename ownable ) simpletype
candidate: To transfer ownership .
ref: Allows the current owner to transfer control of the contract to a newOwner .

866:
src: ( functiondefinition ( simplename set service agent ) simplename set service agent ( visibility public ) visibility public ( variabledeclaration ( simplename new service agent ) simplename new service agent ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename service agent ) simplename service agent ( simplename new service agent ) simplename new service agent ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the service agent that handles .
ref: function for change btc agent can be called only by owner of the contract .

867:
src: ( functiondefinition ( simplename get price ) simplename get price ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename start time ) simplename start time ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( simplename price ) simplename price ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename price ) simplename price ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename price ) simplename price ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( simplename price ) simplename price ) returnstatement ) block ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ) block ) functiondefinition
candidate: Get the price or token value for a ether .
ref: the price or token value for a ether .

868:
src: ( functiondefinition ( simplename get token amount ) simplename get token amount ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename rate ) simplename rate ( simplename mul ) simplename mul ) memberaccess ( simplename bonus ) simplename bonus ) functioncall ) tupleexpression ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename <UNK> ) simplename <UNK> ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Override to extend the way in which ether is converted to tokens .
ref: Override this method to have a way to add business logic to your crowdsale when buying .

869:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename meal index to owner ) simplename meal index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

870:
src: ( functiondefinition ( simplename request redemption ) simplename request redemption ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename number of tokens ) simplename number of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( simplename token status ) simplename token status ( memberaccess ( simplename token status ) simplename token status ( simplename trading ) simplename trading ) memberaccess ( binaryoperation > ) binaryoperation > ( simplename number of tokens ) simplename number of tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename h ) simplename h ( simpletype ( simplename lib holdings holding ) simplename lib holdings holding ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename holdings ) simplename holdings ( simplename get ) simplename get ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( memberaccess ( memberaccess ( simplename h ) simplename h ( simplename total tokens ) simplename total tokens ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( memberaccess ( simplename h ) simplename h ( simplename locked tokens ) simplename locked tokens ) memberaccess ) functioncall ( simplename number of tokens ) simplename number of tokens ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename redemption id ) simplename redemption id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename redemptions queue ) simplename redemptions queue ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename number of tokens ) simplename number of tokens ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename h ) simplename h ( simplename locked tokens ) simplename locked tokens ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename h ) simplename h ( simplename locked tokens ) simplename locked tokens ) memberaccess ( simplename add ) simplename add ) memberaccess ( simplename number of tokens ) simplename number of tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename request redemption ) simplename request redemption ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename number of tokens ) simplename number of tokens ( simplename redemption id ) simplename redemption id ) functioncall ) expressionstatement ( returnstatement ( simplename redemption id ) simplename redemption id ) returnstatement ) block ) functiondefinition
candidate: Token holders can call this function to withdraw their tokens from the vault .
ref: <UNK> request ID ( required in order to cancel this redemption request ) .

871:
src: ( functiondefinition ( simplename transfer any erc20 token ) simplename transfer any erc20 token ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( functioncall ( simplename erc20 interface ) simplename erc20 interface ( simplename token address ) simplename token address ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( simplename owner ) simplename owner ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only owner of contract ) simplename only owner of contract ) modifierinvocation ) functiondefinition
candidate: Owner can transfer out any accidentally sent ERC20 tokens .
ref: Owner can transfer out any accidentally sent ERC20 tokens .

872:
src: ( functiondefinition ( simplename transfer to growth reserve ) simplename transfer to growth reserve ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename growth reserve ) simplename growth reserve ( functioncall ( memberaccess ( simplename growth reserve ) simplename growth reserve ( simplename add ) simplename add ) memberaccess ( simplename public allocation ) simplename public allocation ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename public allocation ) simplename public allocation ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( modifierinvocation ( simplename crowdsaleonly ) simplename crowdsaleonly ) modifierinvocation ) functiondefinition
candidate: We can only be done once .
ref: unsold tokens back to Platform <UNK> Reserve .

873:
src: ( functiondefinition ( simplename gen limit ) simplename gen limit ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename upper limit ) simplename upper limit ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename used gen ) simplename used gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename over gen ) simplename over gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eth can use ) simplename eth can use ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tempnum ) simplename tempnum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename update gen vault ) simplename update gen vault ( simplename p id ) simplename p id ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename lrnd ) simplename lrnd ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename upper limit ) simplename upper limit ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( memberaccess ( indexaccess ( indexaccess ( simplename plyr rnds ) simplename plyr rnds ( simplename p id ) simplename p id ) indexaccess ( simplename r id ) simplename r id ) indexaccess ( simplename keys ) simplename keys ) memberaccess ) tupleexpression ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ( simplename upper limit ) simplename upper limit ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename over gen ) simplename over gen ( functioncall ( memberaccess ( tupleexpression ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename upper limit ) simplename upper limit ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename keys ) simplename keys ) memberaccess
candidate: gen limit handle .
ref: gen limit handle .

874:
src: ( functiondefinition ( simplename receive approval ) simplename receive approval ( visibility external ) visibility external ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename currency ) simplename currency ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename token ) simplename token ( simplename currency ) simplename currency ) functioncall ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( simplename this ) simplename this ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename hot wallet deposit ) simplename hot wallet deposit ( simplename from ) simplename from ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Receive approved amount from a currency to , only be called by currency contract .
ref: Receives approval to drain the <UNK> .

875:
src: ( functiondefinition ( simplename set ico address ) simplename set ico address ( visibility external ) visibility external ( variabledeclaration ( simplename ico address ) simplename ico address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename ico address ) simplename ico address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico address ) simplename ico address ( simplename ico address ) simplename ico address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance map ) simplename balance map ( simplename ico address ) simplename ico address ) indexaccess ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename one million als ) simplename one million als ) expressionstatement ( expressionstatement ( functioncall ( simplename ico address set ) simplename ico address set ( simplename ico address ) simplename ico address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set ICO address for a particular ICO .
ref: Sets the ICO address and allocates it 80 million tokens .

876:
src: ( functiondefinition ( simplename add institution ) simplename add institution ( visibility default ) visibility default ( variabledeclaration ( simplename institution address ) simplename institution address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename institution name ) simplename institution name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename name to address ) simplename name to address ( simplename institution name ) simplename institution name ) indexaccess ( simplename institution address ) simplename institution address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename address to name ) simplename address to name ( simplename institution address ) simplename institution address ) indexaccess ( simplename institution name ) simplename institution name ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Allows the owner to add a name to the registry .
ref: Function which adds an institution .

877:
src: ( functiondefinition ( simplename check contributor balance ) simplename check contributor balance ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cap ) simplename cap ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename remaining ) simplename remaining ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename c ) simplename c ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename addr ) simplename addr ) indexaccess ) variabledeclarationstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename whitelist is active ) simplename whitelist is active ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap ) simplename cap ( indexaccess ( simplename contribution caps ) simplename contribution caps ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( memberaccess ( simplename c ) simplename c ( simplename authorized ) simplename authorized ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap ) simplename cap ( functioncall ( memberaccess ( simplename whitelist contract ) simplename whitelist contract ( simplename check member level ) simplename check member level ) memberaccess ( simplename addr ) simplename addr ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename cap ) simplename cap ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( tupleexpression ( memberaccess ( simplename c ) simplename c ( simplename balance ) simplename balance ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) returnstatement ) ifstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap ) simplename cap ( memberaccess ( simplename c ) simplename c ( simplename cap ) simplename cap ) memberaccess ) expressionstatement ) block ) ifstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename balance ) simplename balance ( memberaccess ( simplename c ) simplename c ( simplename balance ) simplename balance ) memberaccess ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename contract stage ) simplename contract stage ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename cap ) simplename cap ( memberaccess ( simplename contribution caps ) simplename contribution caps ( simplename length ) simplename length ) memberaccess ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename next cap time ) simplename next cap time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename next cap time ) simplename next cap time ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap ) simplename cap ( indexaccess ( simplename contribution caps ) simplename contribution caps ( simplename cap ) simplename cap ) indexaccess ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename cap ) simplename cap ( indexaccess ( simplename next contribution caps ) simplename next contribution caps
candidate: This callable function returns the balance , contribution cap , and remaining available balance of any contributor .
ref: This callable function returns the balance , contribution cap , and remaining available balance of any contributor .

878:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename amount ) simplename amount ( binaryoperation >= ) binaryoperation >= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename amount ) simplename amount ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balance ) simplename previous balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation < ) binaryoperation < ( simplename previous balance ) simplename previous balance ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename activate start block ) simplename activate start block ( simplename to ) simplename to ) indexaccess ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( block ( returnstatement ( booleanliteral false )
candidate: Send _value amount of tokens from address _from to address _to .
ref: Send _value amount of tokens from address _from to address _to .

879:
src: ( functiondefinition ( simplename finalize ) simplename finalize ( visibility external ) visibility external ( block ( ifstatement ( simplename is finalized ) simplename is finalized ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename pair ) simplename pair ( simplename disable transfers ) simplename disable transfers ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is finalized ) simplename is finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename owner only ) simplename owner only ) modifierinvocation ) functiondefinition
candidate: Finalize the crowdsale .
ref: Finalizes the token sale event .

880:
src: ( functiondefinition ( simplename transfer admin ) simplename transfer admin ( visibility public ) visibility public ( variabledeclaration ( simplename new admin ) simplename new admin ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new admin ) simplename new admin ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename admin transferred ) simplename admin transferred ( simplename admin ) simplename admin ( simplename new admin ) simplename new admin ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename admin ) simplename admin ( simplename new admin ) simplename new admin ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the current owner to transfer control of the contract to a newOwner .
ref: Allows the current owner to transfer control of the admin to newAdmin .

881:
src: ( functiondefinition ( simplename distribute partner tokens ) simplename distribute partner tokens ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename is distributed ) simplename is distributed ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( simplename tokens sold ) simplename tokens sold ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( simplename stox ) simplename stox ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename issue tokens ) simplename issue tokens ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is distributed ) simplename is distributed ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Distributes the tokens .
ref: <UNK> tokens to the partners who have participated during the pre-sale .

882:
src: ( functiondefinition ( simplename release all ) simplename release all ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename token lock ) simplename token lock ( simplename release all ) simplename release all ) memberaccess ( simplename from ) simplename from ( simplename to ) simplename to ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Transfers tokens held by timelock to owner .
ref: Release locked tokens to all beneficiaries if they are due .

883:
src: ( functiondefinition ( simplename allocate to marketing supporter ) simplename allocate to marketing supporter ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( simplename allocate from ) simplename allocate from ( functioncall ( memberaccess ( simplename starbase marketing campaign ) simplename starbase marketing campaign ( simplename workshop ) simplename workshop ) memberaccess ) functioncall ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename only marketing campaign contract ) simplename only marketing campaign contract ) modifierinvocation ) functiondefinition
candidate: Allocate tokens to a certain functions .
ref: Allocate tokens to a marketing supporter from the marketing campaign share .

884:
src: ( functiondefinition ( simplename buyin ) simplename buyin ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename flush era ) simplename flush era ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename current bonus ) simplename current bonus ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename begin time ) simplename begin time ( simplename bonus min duration ) simplename bonus min duration ( binaryoperation <= ) binaryoperation <= ( binaryoperation + ) binaryoperation + ( simplename last new interest ) simplename last new interest ( simplename bonus latch ) simplename bonus latch ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( simplename current bonus ) simplename current bonus ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename begin time ) simplename begin time ( simplename bonus max duration ) simplename bonus max duration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current bonus ) simplename current bonus ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename buyins ) simplename buyins ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename received ) simplename received ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename last new interest ) simplename last new interest ( functioncall ( simpletypeexpression ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) simpletypeexpression ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ) block ) ifstatement ( variabledeclarationstatement ( variabledeclaration ( simplename accounted ) simplename accounted ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename refund ) simplename refund ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( tupleexpression ( simplename accounted ) simplename accounted ( simplename refund ) simplename refund ( simplename price ) simplename price ) tupleexpression ( functioncall ( simplename the deal ) simplename the deal ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename refund ) simplename refund ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( indexaccess ( simplename buyins ) simplename buyins ( memberaccess ( simplename msg )
candidate: The function that calculates a specific bonus percentage .
ref: Public interaction : .

885:
src: ( functiondefinition ( simplename withdraw tokens ) simplename withdraw tokens ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename seller ) simplename seller ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename total bet withdrawn ) simplename total bet withdrawn ( simplename total bet purchased ) simplename total bet purchased ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total bet available ) simplename total bet available ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total bet purchased ) simplename total bet purchased ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total bet withdrawn ) simplename total bet withdrawn ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename seller ) simplename seller ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Withdraws all tokens from the contract .
ref: Safety to withdraw all tokens , ONLY if all buyers have already withdrawn their purchases .

886:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Return total number of tokens in existence .
ref: <UNK> Wonders will ever exist .

887:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename buried ) simplename buried ( simplename spender ) simplename spender ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Set allowance for other address .
ref: Set allowance for other address .

888:
src: ( functiondefinition ( simplename send all tokens to founder ) simplename send all tokens to founder ( visibility default ) visibility default ( variabledeclaration ( simplename round ) simplename round ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename sold tokens ) simplename sold tokens ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ico token ) simplename ico token ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename add ) simplename add ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename sold tokens ) simplename sold tokens ) memberaccess ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename send tokens ) simplename send tokens ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename ico supply ) simplename ico supply ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename supply ) simplename supply ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename founder value ) simplename founder value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename sub ) simplename sub ( simplename ico supply ) simplename ico supply ( simplename ico token ) simplename ico token ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename send tokens ) simplename send tokens ) memberaccess ( functioncall ( simplename add ) simplename add ( memberaccess ( indexaccess ( simplename round data ) simplename round data ( simplename round ) simplename round ) indexaccess ( simplename send tokens ) simplename send tokens ) memberaccess ( simplename founder value ) simplename founder value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens to funder ) simplename tokens to funder ( functioncall ( simplename add ) simplename add ( simplename tokens to funder ) simplename tokens to funder ( simplename founder value ) simplename founder value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename robottrading token ) simplename robottrading token ( simplename emit tokens ) simplename emit tokens ) memberaccess ( simplename acc founder ) simplename acc founder ( simplename founder value ) simplename founder value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ( modifierinvocation ( simplename when initialized ) simplename when initialized ) modifierinvocation ) functiondefinition
candidate: Send tokens to founders .
ref: Send all tokens to founders .

889:
src: ( functiondefinition ( simplename propose new notary ) simplename propose new notary ( visibility external ) visibility external ( variabledeclaration ( simplename new address ) simplename new address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename propose notary ) simplename propose notary ( simplename new address ) simplename new address ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: onlyOwner of the setting the manually to new supply of the transferred to the spender's account .
ref: Owner can propose an address change for notary .

890:
src: ( modifierdefinition ( simplename if authorised ) simplename if authorised ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename shareholders ) simplename shareholders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename shares ) simplename shares ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: checks that requires there is a failed of their share .
ref: This modifier is used with all of the functions requiring authorisation .

891:
src: ( functiondefinition ( simplename update whitelist mapping ) simplename update whitelist mapping ( visibility public ) visibility public ( variabledeclaration ( simplename address ) simplename address ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename white listing admin ) simplename white listing admin ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename address ) simplename address ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( indexaccess ( simplename address ) simplename address ( simplename i ) simplename i ) indexaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: Function which allows to update the whitelist .
ref: Populate the whitelist , only executed by whiteListingAdmin .

892:
src: ( functiondefinition ( simplename contribute ) simplename contribute ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename handle transaction ) simplename handle transaction ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: The accepted ether amount .
ref: The accepted ether amount .

893:
src: ( functiondefinition ( simplename get crowdsale tier list ) simplename get crowdsale tier list ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename crowdsale tiers ) simplename crowdsale tiers ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename storage ) simplename storage ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename exec id ) simplename exec id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename getter interface ) simplename getter interface ) simpletype ) variabledeclaration ( functioncall ( simplename getter interface ) simplename getter interface ( simplename storage ) simplename storage ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename list length ) simplename list length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename target ) simplename target ( simplename read ) simplename read ) memberaccess ( simplename exec id ) simplename exec id ( functioncall ( simplename sale tier list ) simplename sale tier list ) functioncall ) functioncall ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename arr indices ) simplename arr indices ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ( simplename list length ) simplename list length ) functioncall ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename list length ) simplename list length ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename arr indices ) simplename arr indices ( simplename i ) simplename i ) indexaccess ( functioncall ( simplename tier name ) simplename tier name ( simplename i ) simplename i ) functioncall ) expressionstatement ) forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale tiers ) simplename crowdsale tiers ( functioncall ( memberaccess ( simplename target ) simplename target ( simplename read multi ) simplename read multi ) memberaccess ( simplename exec id ) simplename exec id ( simplename arr indices ) simplename arr indices ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Returns the number of addresses in the list of a given tier .
ref: <UNK> : A list of each tier of the crowdsale .

894:
src: ( functiondefinition ( simplename non vested tokens ) simplename non vested tokens ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename grant ) simplename grant ( simpletype ( simplename token grant ) simplename token grant ) simpletype ) variabledeclaration ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( memberaccess ( simplename grant ) simplename grant ( simplename value ) simplename value ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( functioncall ( simplename vested tokens ) simplename vested tokens ( simplename grant ) simplename grant ( simplename time ) simplename time ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculate the amount of non vested tokens at a specific time .
ref: Calculate the amount of non vested tokens at a specific time .

895:
src: ( functiondefinition ( simplename generate tokens ) simplename generate tokens ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename cur total supply ) simplename cur total supply ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename get value at ) simplename get value at ( simplename total supply history ) simplename total supply history ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename update value at now ) simplename update value at now ( simplename total supply history ) simplename total supply history ( functioncall ( memberaccess ( simplename cur total supply ) simplename cur total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balance to ) simplename previous balance to ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename update value at now ) simplename update value at now ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( functioncall ( memberaccess ( simplename previous balance to ) simplename previous balance to ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename owner ) simplename owner ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only controller ) simplename only controller ) modifierinvocation ) functiondefinition
candidate: Generates _amount tokens that are assigned to _owner .
ref: Generates _amount tokens that are assigned to _owner .

896:
src: ( functiondefinition ( simplename multi call tightly packed ) simplename multi call tightly packed ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addresses and amounts ) simplename addresses and amounts ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename start balance ) simplename start balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename addresses and amounts ) simplename addresses and amounts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( binaryoperation >> ) binaryoperation >> ( indexaccess ( simplename addresses and amounts ) simplename addresses and amounts ( simplename i ) simplename i ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( functioncall ( simpletypeexpression ( simpletype ( simplename uint96 ) simplename uint96 ) simpletype ) simpletypeexpression ( indexaccess ( simplename addresses and amounts ) simplename addresses and amounts ( simplename i ) simplename i ) indexaccess ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename safe call ) simplename safe call ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename multi call ) simplename multi call ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( binaryoperation - ) binaryoperation - ( simplename start balance ) simplename start balance ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Send _amount of tokens to address _to .
ref: Call to multiple contracts using a byte32 array which includes the contract address and the amount .

897:
src: ( functiondefinition ( simplename has passed ) simplename has passed ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( simplename time ) simplename time ) returnstatement ) block ) functiondefinition
candidate: Checks whether the period in which the crowdsale is open has already elapsed .
ref: Private constant functions .

898:
src: ( functiondefinition ( simplename contract mint ) simplename contract mint ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token owner ) simplename token owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename moken name ) simplename moken name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename link hash ) simplename link hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename currency name ) simplename currency name ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price paid ) simplename price paid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename token owner ) simplename token owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename is mint contract ) simplename is mint contract ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token id ) simplename token id ( unaryoperation ++ ) unaryoperation ++ ( simplename mokens length ) simplename mokens length ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename mokens length ) simplename mokens length ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename token id ) simplename token id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename token id ) simplename token id ( simplename max mokens ) simplename max mokens ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename lower moken name ) simplename lower moken name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( functioncall ( simplename validate and lower ) simplename validate and lower ( simplename moken name ) simplename moken name ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename token by name ) simplename token by name ( simplename lower moken name ) simplename lower moken name ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename era index ) simplename era index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename era length ) simplename era length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owned tokens index ) simplename owned tokens index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename owned tokens ) simplename
candidate: Create new instance of the token contract .
ref: enables third-party contracts to mint mokens .

899:
src: ( functiondefinition ( simplename release token transfer ) simplename release token transfer ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename upgrade master ) simplename upgrade master ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename released ) simplename released ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) functiondefinition
candidate: One way function to release the tokens to the wild .
ref: One way function to perform the final token release .

900:
src: ( functiondefinition ( simplename amount filled ) simplename amount filled ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token get ) simplename token get ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount get ) simplename amount get ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token give ) simplename token give ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount give ) simplename amount give ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename expires ) simplename expires ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename user ) simplename user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename whitelisted users ) simplename whitelisted users ( simplename user ) simplename user ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( indexaccess ( simplename whitelisted tokens ) simplename whitelisted tokens ( simplename token get ) simplename token get ) indexaccess ( indexaccess ( simplename whitelisted tokens ) simplename whitelisted tokens ( simplename token give ) simplename token give ) indexaccess ) functioncall ) expressionstatement ( returnstatement ( indexaccess ( indexaccess ( simplename order fills ) simplename order fills ( simplename user ) simplename user ) indexaccess ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename token get ) simplename token get ( simplename amount get ) simplename amount get ( simplename token give ) simplename token give ( simplename amount give ) simplename amount give ( simplename expires ) simplename expires ( simplename nonce ) simplename nonce ) functioncall ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: uint : amount of the given order that has already been filled in terms of specified block .
ref: Get the amount filled for the given order .

901:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename allowance ) simplename allowance ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( simplename allowance ) simplename allowance ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

902:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename ambassadors ) simplename ambassadors ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename balance ) simplename balance ( indexaccess ( simplename ambassador ledger ) simplename ambassador ledger ( simplename customer address ) simplename customer address ) indexaccess ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename balance ) simplename balance ( indexaccess ( simplename token balance ledger ) simplename token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename balance ) simplename balance ) returnstatement ) block ) functiondefinition
candidate: Retrieve the token balance of any single address .
ref: Retrieve the token balance of any single address .

903:
src: ( functiondefinition ( simplename account id for address ) simplename account id for address ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address belongs to account ) simplename address belongs to account ( simplename address ) simplename address ) functioncall ) functioncall ) expressionstatement ( returnstatement ( indexaccess ( simplename account by address ) simplename account by address ( simplename address ) simplename address ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get the account address for an account .
ref: Retreive account ID associated with a user's address .

904:
src: ( functiondefinition ( simplename append early purchase ) simplename append early purchase ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename purchaser ) simplename purchaser ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename purchased at ) simplename purchased at ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename purchased at ) simplename purchased at ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename purchased at ) simplename purchased at ( simplename now ) simplename now ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename purchased at ) simplename purchased at ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( simplename purchased at ) simplename purchased at ( simplename now ) simplename now ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( simplename total early purchase raised ) simplename total early purchase raised ( simplename amount ) simplename amount ( simplename wei maximum earlypurchase ) simplename wei maximum earlypurchase ( block ( expressionstatement ( functioncall ( memberaccess ( simplename purchaser ) simplename purchaser ( simplename send ) simplename send ) memberaccess ( binaryoperation - ) binaryoperation - ( binaryoperation + ) binaryoperation + ( simplename total early purchase raised ) simplename total early purchase raised ( simplename amount ) simplename amount ( simplename wei maximum earlypurchase ) simplename wei maximum earlypurchase ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename early purchases ) simplename early purchases ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename early purchase ) simplename early purchase ( simplename purchaser ) simplename purchaser ( binaryoperation - ) binaryoperation - ( simplename wei maximum earlypurchase ) simplename wei maximum earlypurchase ( simplename total early purchase raised ) simplename total early purchase raised ( simplename purchased at ) simplename purchased at ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total early purchase raised ) simplename total early purchase raised ( binaryoperation - ) binaryoperation - ( simplename wei maximum earlypurchase ) simplename wei maximum earlypurchase ( simplename total early purchase raised ) simplename total early purchase raised ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( simplename early purchases ) simplename early purchases ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename early purchase ) simplename early purchase ( simplename purchaser ) simplename purchaser ( simplename amount ) simplename amount ( simplename purchased at ) simplename purchased at ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total early purchase raised ) simplename total early purchase raised ( simplename amount ) simplename amount ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename total early purchase raised ) simplename total early purchase raised ( simplename wei maximum earlypurchase ) simplename wei maximum earlypurchase ( block ( expressionstatement ( functioncall ( simplename close early purchase ) simplename close early purchase ) functioncall
candidate: Append an early purchase log .
ref: Append an early purchase log .

905:
src: ( functiondefinition ( simplename get country ) simplename get country ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename country ) simplename country ( simpletype ( simplename country ) simplename country ) simpletype ) variabledeclaration ( indexaccess ( simplename countries ) simplename countries ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename country name ) simplename country name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( memberaccess ( simplename country ) simplename country ( simplename name ) simplename name ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename selling price ) simplename selling price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename country index to price ) simplename country index to price ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename rank ) simplename rank ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename country to rank ) simplename country to rank ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename country index to owner ) simplename country index to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( returnstatement ( tupleexpression ( simplename country name ) simplename country name ( simplename selling price ) simplename selling price ( simplename owner ) simplename owner ( simplename rank ) simplename rank ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Returns all the relevant information about a specific country .
ref: Get complete information about a country token .

906:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer event ) simplename transfer event ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: Token-transfer from msg . sender .

907:
src: ( functiondefinition ( simplename create contract whale ) simplename create contract whale ( visibility public ) visibility public ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename create whale ) simplename create whale ( simplename name ) simplename name ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename starting price ) simplename starting price ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only coo ) simplename only coo ) modifierinvocation ) functiondefinition
candidate: The associated name .
ref: Creates a new <UNK> with the given name .

908:
src: ( functiondefinition ( simplename set vesting token ) simplename set vesting token ( visibility external ) visibility external ( variabledeclaration ( simplename token address ) simplename token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename token address ) simplename token address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token ) simplename token ( functioncall ( simplename erc20 basic ) simplename erc20 basic ( simplename token address ) simplename token address ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the vesting contract address , and forward to recipient .
ref: set vesting token address .

909:
src: ( functiondefinition ( simplename transfer ownership ) simplename transfer ownership ( visibility external ) visibility external ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename admin ) simplename admin ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename admin ) simplename admin ( simplename new owner ) simplename new owner ) expressionstatement ) block ) functiondefinition
candidate: Transfer ownership to another address .
ref: transfer ownership of the contract .

910:
src: ( functiondefinition ( simplename activate in test mode ) simplename activate in test mode ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename search seed ) simplename search seed ( addrliteral 「ADDR」 ) addrliteral 「ADDR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename mode ) simplename mode ( memberaccess ( simplename modes ) simplename modes ( simplename test ) simplename test ) memberaccess ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename inactive mode ) simplename inactive mode ) modifierinvocation ) functiondefinition
candidate: Function for manual testing of multisig wallet interaction .
ref: activates the contract in * Test * mode which sets the <UNK> and enables <UNK> .

911:
src: ( functiondefinition ( simplename check claim entitlementof wallet ) simplename check claim entitlementof wallet ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename claimants ) simplename claimants ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename address ) simplename address ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant address ) simplename claimant address ) memberaccess ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant has claimed ) simplename claimant has claimed ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( returnstatement ( memberaccess ( indexaccess ( simplename claimants ) simplename claimants ( simplename i ) simplename i ) indexaccess ( simplename claimant amount ) simplename claimant amount ) memberaccess ) returnstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: check claim data after here .
ref: check claim entitlement of any wallet .

912:
src: ( modifierdefinition ( simplename only oraclize ) simplename only oraclize ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( memberaccess ( simplename oraclize lib ) simplename oraclize lib ( simplename oraclize cb address ) simplename oraclize cb address ) memberaccess ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: checks that Oraclize address is calling .
ref: checks only Oraclize address is calling .

913:
src: ( functiondefinition ( simplename approve and call ) simplename approve and call ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( ifstatement ( functioncall ( simplename approve ) simplename approve ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename token recipient ) simplename token recipient ( simplename spender ) simplename spender ) functioncall ( simplename receive approval ) simplename receive approval ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename this ) simplename this ( simplename extra data ) simplename extra data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Set allowance for other address and notify .
ref: Approve and then communicate the approved contract in a single tx .

914:
src: ( functiondefinition ( simplename is started ) simplename is started ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename start time ) simplename start time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Whether the crowdsale is started .
ref: Is vesting started flag .

915:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename total wei amount ) simplename total wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename currency ) simplename currency ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tx hash ) simplename tx hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename total wei amount ) simplename total wei amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation >= ) binaryoperation >= ( simplename public sale supply ) simplename public sale supply ( simplename total wei amount ) simplename total wei amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename public sale supply ) simplename public sale supply ( functioncall ( memberaccess ( simplename public sale supply ) simplename public sale supply ( simplename sub ) simplename sub ) memberaccess ( simplename total wei amount ) simplename total wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename transfer from ) simplename transfer from ( simplename owner ) simplename owner ( simplename to ) simplename to ( simplename total wei amount ) simplename total wei amount ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename tokens bought ) simplename tokens bought ( simplename to ) simplename to ( simplename total wei amount ) simplename total wei amount ( simplename currency ) simplename currency ( simplename tx hash ) simplename tx hash ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only token buyer ) simplename only token buyer ) modifierinvocation ( modifierinvocation ( simplename non zero address ) simplename non zero address ( simplename to ) simplename to ) modifierinvocation ) functiondefinition
candidate: Buy a token function .
ref: We don't want to support a payable function as we are not doing ICO and instead doing private sale .

916:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename revenue ) simplename revenue ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename initial sale complete ) simplename initial sale complete ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename bid ) simplename bid ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename reserve address ) simplename reserve address ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename revenue ) simplename revenue ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( simplename bid ) simplename bid ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename send ) simplename send ) memberaccess ( simplename revenue ) simplename revenue ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename reserve address ) simplename reserve address ( simplename amount ) simplename amount ) functioncall ) emitstatement ( returnstatement ( simplename revenue ) simplename revenue ) returnstatement ) block ) functiondefinition
candidate: Sell amount tokens for ether .
ref: Sells aToken in exchnage for wei at the current bid price , reduces resreve .

917:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Set allowance for other address .
ref: Set allowance for other address .

918:
src: ( functiondefinition ( simplename d send to team eth contract ) simplename d send to team eth contract ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename team eth transfer complete ) simplename team eth transfer complete ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename eth to be distributed ) simplename eth to be distributed ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename team eth contract ) simplename team eth contract ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( simplename eth to be distributed ) simplename eth to be distributed ( simplename div ) simplename div ) memberaccess ( simplename div for team eth contract ) simplename div for team eth contract ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename sent to team eth ) simplename sent to team eth ( functioncall ( memberaccess ( simplename eth to be distributed ) simplename eth to be distributed ( simplename div ) simplename div ) memberaccess ( simplename div for team eth contract ) simplename div for team eth contract ) functioncall ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename team eth transfer complete ) simplename team eth transfer complete ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: move Eth to team eth , team , reserve wallets .
ref: move Eth to team eth time-locked contract .

919:
src: ( functiondefinition ( simplename redeem excluded ) simplename redeem excluded ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename components to redeem ) simplename components to redeem ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename quantities ) simplename quantities ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename quantities ) simplename quantities ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename components to redeem ) simplename components to redeem ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename quantities ) simplename quantities ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename components to redeem ) simplename components to redeem ( simplename length ) simplename length ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename quantities ) simplename quantities ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current component ) simplename current component ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename components to redeem ) simplename components to redeem ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current quantity ) simplename current quantity ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename quantities ) simplename quantities ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename remaining balance ) simplename remaining balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( indexaccess ( simplename unredeemed components ) simplename unredeemed components ( simplename current component ) simplename current component ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename remaining balance ) simplename remaining balance ( simplename current quantity ) simplename current quantity ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename unredeemed components ) simplename unredeemed components ( simplename current component ) simplename current component ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename
candidate: Function to withdraw tokens .
ref: Function to withdraw tokens that have previously been excluded when calling the <UNK> method .

920:
src: ( functiondefinition ( simplename new entity ) simplename new entity ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename country id ) simplename country id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename start price ) simplename start price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename country structs ) simplename country structs ( simplename country id ) simplename country id ) indexaccess ( simplename starting price ) simplename starting price ) memberaccess ( simplename start price ) simplename start price ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: internal function to register a new team .
ref: Creates new <UNK> for a country each time a new country is listed .

921:
src: ( functiondefinition ( simplename add ) simplename add ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simplename c ) simplename c ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename c ) simplename c ( binaryoperation + ) binaryoperation + ( simplename a ) simplename a ( simplename b ) simplename b ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation >= ) binaryoperation >= ( simplename c ) simplename c ( simplename a ) simplename a ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation >= ) binaryoperation >= ( simplename c ) simplename c ( simplename b ) simplename b ) functioncall ) expressionstatement ( returnstatement ( simplename c ) simplename c ) returnstatement ) block ) functiondefinition
candidate: Adds two numbers , throws on overflow .
ref: Adds two numbers , throws on overflow .

922:
src: ( functiondefinition ( simplename cancel order ) simplename cancel order ( visibility public ) visibility public ( variabledeclaration ( simplename token get ) simplename token get ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount get ) simplename amount get ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token give ) simplename token give ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount give ) simplename amount give ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename expires ) simplename expires ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename sha256 ) simplename sha256 ( simplename this ) simplename this ( simplename token get ) simplename token get ( simplename amount get ) simplename amount get ( simplename token give ) simplename token give ( simplename amount give ) simplename amount give ( simplename expires ) simplename expires ( simplename nonce ) simplename nonce ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( tupleexpression ( binaryoperation || ) binaryoperation || ( indexaccess ( indexaccess ( simplename orders ) simplename orders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename hash ) simplename hash ) indexaccess ( binaryoperation == ) binaryoperation == ( functioncall ( simplename ecrecover ) simplename ecrecover ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename hash ) simplename hash ) functioncall ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename order fills ) simplename order fills ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename hash ) simplename hash ) indexaccess ( simplename amount get ) simplename amount get ) expressionstatement ( expressionstatement ( functioncall ( simplename cancel ) simplename cancel ( simplename token get ) simplename token get ( simplename amount get ) simplename amount get ( simplename token give ) simplename token give ( simplename amount give ) simplename amount give ( simplename expires ) simplename expires ( simplename nonce ) simplename nonce ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Cancel an order .
ref: uint : amount of the given order that has already been filled in terms of amountGet / tokenGet .

923:
src: ( functiondefinition ( simplename pay out winner ) simplename pay out winner ( visibility public ) visibility public ( variabledeclaration ( simplename winner ) simplename winner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payout amount ) simplename payout amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( functioncall ( memberaccess ( simplename zethr ) simplename zethr ( simplename balance of ) simplename balance of ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename zethr ) simplename zethr ( simplename transfer ) simplename transfer ) memberaccess ( simplename winner ) simplename winner ( simplename payout amount ) simplename payout amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename payout number ) simplename payout number ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total paid out ) simplename total paid out ( binaryoperation / ) binaryoperation / ( simplename payout amount ) simplename payout amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( emitstatement ( functioncall ( simplename jackpot payout ) simplename jackpot payout ( binaryoperation / ) binaryoperation / ( simplename payout amount ) simplename payout amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename winner ) simplename winner ( simplename payout number ) simplename payout number ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only zlots ) simplename only zlots ) modifierinvocation ) functiondefinition
candidate: An payout method that winner .
ref: Callable only by Zlots .

924:
src: ( functiondefinition ( simplename change member name ) simplename change member name ( visibility public ) visibility public ( variabledeclaration ( simplename who ) simplename who ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new name ) simplename new name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename who ) simplename who ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( unaryoperation ! ) unaryoperation ! ( memberaccess ( indexaccess ( simplename members ) simplename members ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename admin ) simplename admin ) memberaccess ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) simpletypeexpression ( simplename new name ) simplename new name ) functioncall ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( functioncall ( simplename change member name ) simplename change member name ( simplename who ) simplename who ( memberaccess ( indexaccess ( simplename members ) simplename members ( simplename who ) simplename who ) indexaccess ( simplename member name ) simplename member name ) memberaccess ( simplename new name ) simplename new name ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename members ) simplename members ( simplename who ) simplename who ) indexaccess ( simplename member name ) simplename member name ) memberaccess ( simplename new name ) simplename new name ) expressionstatement ) block ( modifierinvocation ( simplename only existing ) simplename only existing ( simplename who ) simplename who ) modifierinvocation ) functiondefinition
candidate: allows owner to change the member .
ref: Only owner , admin or member can change member's name .

925:
src: ( modifierdefinition ( simplename possible to announce winner ) simplename possible to announce winner ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( simplename announce winner deadline ) simplename announce winner deadline ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename refunds enabled ) simplename refunds enabled ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename winner confirmed ) simplename winner confirmed ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier that requires the winner to have been completed .
ref: Valid state to <UNK> / confirm the winner .

926:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename success ) simplename success ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( ifstatement ( simplename success ) simplename success ( block ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: Transfer tokens from one address to another .

927:
src: ( functiondefinition ( simplename halt ) simplename halt ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename halted ) simplename halted ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename stop if halted ) simplename stop if halted ) modifierinvocation ) functiondefinition
candidate: Halt the emergency .
ref: called by only owner in case of any emergecy situation .

928:
src: ( functiondefinition ( simplename get buyer contribution ) simplename get buyer contribution ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename contribute ) simplename contribute ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename target ) simplename target ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( simplename contributions ) simplename contributions ( simplename target ) simplename target ) indexaccess ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to return the amount of tokens purchased .
ref: check target Address contribution .

929:
src: ( functiondefinition ( simplename end round ) simplename end round ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win pid ) simplename win pid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win tid ) simplename win tid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename team ) simplename team ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pot ) simplename pot ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename pot ) simplename pot ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename win ) simplename win ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename com ) simplename com ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation / ) binaryoperation / ( simplename pot ) simplename pot ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename gen ) simplename gen ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( indexaccess ( simplename pot split ) simplename pot split ( simplename win tid ) simplename win tid ) indexaccess ( simplename gen ) simplename gen ) memberaccess ) functioncall ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename res ) simplename res ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename pot ) simplename pot ( simplename sub ) simplename sub ) memberaccess ( simplename win ) simplename win ) functioncall ) tupleexpression ( simplename sub ) simplename sub ) memberaccess ( simplename com ) simplename com ) functioncall
candidate: ends the round .
ref: ends the round .

930:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename wei raised ) simplename wei raised ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rate ) simplename rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) ifstatement ) ifstatement ) ifstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename buy tokens ) simplename buy tokens ) memberaccess ( simplename beneficiary ) simplename beneficiary ) functioncall ) returnstatement ) block ) functiondefinition
candidate: low level token purchase function .
ref: overriding Crowdsale buyTokens to add a dynamic rate that will match bonus token rewards .

931:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename lambo index to owner ) simplename lambo index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Returns the address currently assigned ownership of a given token .
ref: Returns the address currently assigned ownership of a given Lambo .

932:
src: ( functiondefinition ( simplename burn from ) simplename burn from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename sub ) simplename sub ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename sub ) simplename sub ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename sub ) simplename sub ( simplename total supply ) simplename total supply ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename burn ) simplename burn ( simplename from ) simplename from ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename stoppable ) simplename stoppable ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Destroy tokens from other account .
ref: Destroy tokens from other account .

933:
src: ( functiondefinition ( simplename auth ) simplename auth ( visibility external ) visibility external ( variabledeclaration ( simplename auth string ) simplename auth string ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename auth ) simplename auth ( simplename auth string ) simplename auth string ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This method will be used by the Owner of this contract .
ref: Using this for creating a reference between ETH wallets and accounts in the <UNK> backend .

934:
src: ( functiondefinition ( simplename get jackpot fee ) simplename get jackpot fee ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( conditional ( binaryoperation >= ) binaryoperation >= ( simplename amount ) simplename amount ( simplename min jackpot bet ) simplename min jackpot bet ( simplename jackpot fee ) simplename jackpot fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) conditional ) returnstatement ) block ) functiondefinition
candidate: Helper function to return the game .
ref: Get the portion of bet amount that is to be accumulated in the jackpot .

935:
src: ( functiondefinition ( simplename remove hash ) simplename remove hash ( visibility public ) visibility public ( variabledeclaration ( simplename ipfshash ) simplename ipfshash ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename hash removed ) simplename hash removed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename ipfshash ) simplename ipfshash ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only valid members ) simplename only valid members ) modifierinvocation ) functiondefinition
candidate: Remove hash from Hash alone of a student .
ref: Remove hash from persistent storage .

936:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( indexaccess ( simplename freezed ) simplename freezed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( indexaccess ( simplename freezed ) simplename freezed ( simplename to ) simplename to ) indexaccess ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( binaryoperation - ) binaryoperation - ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename update batches ) simplename update batches ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename is unlocked ) simplename is unlocked ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Public token functions .

937:
src: ( functiondefinition ( simplename change settings ) simplename change settings ( visibility public ) visibility public ( variabledeclaration ( simplename total amount ) simplename total amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price factor ) simplename price factor ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max value ) simplename max value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename min value ) simplename min value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename max gas price ) simplename max gas price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation != ) binaryoperation != ( simplename total amount ) simplename total amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation != ) binaryoperation != ( simplename price factor ) simplename price factor ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total amount ) simplename total amount ( simplename total amount ) simplename total amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename price factor ) simplename price factor ( simplename price factor ) simplename price factor ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max value ) simplename max value ( simplename max value ) simplename max value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename min value ) simplename min value ( simplename min value ) simplename min value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename max gas price ) simplename max gas price ( simplename max gas price ) simplename max gas price ) expressionstatement ) block ( modifierinvocation ( simplename is owner ) simplename is owner ) modifierinvocation ) functiondefinition
candidate: Changes auction price in wei .
ref: Changes auction <UNK> and start price factor before auction is started .

938:
src: ( functiondefinition ( simplename authorize operator ) simplename authorize operator ( visibility public ) visibility public ( variabledeclaration ( simplename operator ) simplename operator ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename operator ) simplename operator ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( indexaccess ( simplename m is default operator ) simplename m is default operator ( simplename operator ) simplename operator ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename m revoked default operator ) simplename m revoked default operator ( simplename operator ) simplename operator ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename m authorized ) simplename m authorized ( simplename operator ) simplename operator ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename authorized operator ) simplename authorized operator ( simplename operator ) simplename operator ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Authorize a third party _operator to manage ( send ) msg . sender 's .
ref: Authorize a third party _operator to manage ( send ) msg . sender 's .

939:
src: ( functiondefinition ( simplename unlock tokens ) simplename unlock tokens ( visibility external ) visibility external ( variabledeclaration ( simplename market contract address ) simplename market contract address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename qty to unlock ) simplename qty to unlock ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance after un lock ) simplename balance after un lock ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename contract address to user address to qty locked ) simplename contract address to user address to qty locked ( simplename market contract address ) simplename market contract address ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename qty to unlock ) simplename qty to unlock ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename contract address to user address to qty locked ) simplename contract address to user address to qty locked ( simplename market contract address ) simplename market contract address ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename balance after un lock ) simplename balance after un lock ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer locked tokens back to user ) simplename transfer locked tokens back to user ( simplename qty to unlock ) simplename qty to unlock ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename updated user locked balance ) simplename updated user locked balance ( simplename market contract address ) simplename market contract address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename balance after un lock ) simplename balance after un lock ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Unlock token transfers .
ref: allows user to unlock tokens previously allocated to trading a <UNK> .

940:
src: ( functiondefinition ( simplename transfer from with custom reserving ) simplename transfer from with custom reserving ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename total transfer ) simplename total transfer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename custom reserving percentage ) simplename custom reserving percentage ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename custom reserving percentage ) simplename custom reserving percentage ( simplename min allowed reserving percentage ) simplename min allowed reserving percentage ( binaryoperation < ) binaryoperation < ( simplename custom reserving percentage ) simplename custom reserving percentage ( simplename max allowed reserving percentage ) simplename max allowed reserving percentage ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename net transfer ) simplename net transfer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename total transfer ) simplename total transfer ( tupleexpression ( binaryoperation - ) binaryoperation - ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename custom reserving percentage ) simplename custom reserving percentage ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename total transfer ) simplename total transfer ( tupleexpression ( binaryoperation > ) binaryoperation > ( simplename total transfer ) simplename total transfer ( simplename net transfer ) simplename net transfer ) tupleexpression ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( functioncall ( simplename transfer from ) simplename transfer from ( simplename from ) simplename from ( simplename to ) simplename to ( simplename net transfer ) simplename net transfer ) functioncall ( tupleexpression ( binaryoperation >= ) binaryoperation >= ( simplename total transfer ) simplename total transfer ( simplename reserving step ) simplename reserving step ) tupleexpression ( block ( expressionstatement ( functioncall ( simplename process jackpot deposit ) simplename process jackpot deposit ( simplename total transfer ) simplename total transfer ( simplename net transfer ) simplename net transfer ( simplename from ) simplename from ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Using this function a user transfers tokens and user .
ref: Using this function a spender transfers tokens and make an owner of funds a participant of the operating Jackpot .

941:
src: ( functiondefinition ( simplename return all coke ) simplename return all coke ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename return coke ) simplename return coke ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( indexaccess ( simplename tasters received ) simplename tasters received ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: return the total supply of a specific return of a specific address .
ref: Will return all bought tokens to the contract .

942:
src: ( functiondefinition ( simplename beat game ) simplename beat game ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ( simplename cap ) simplename cap ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename funders ) simplename funders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename funders ) simplename funders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: This function is used in case the default possible , but if he has a funds .
ref: If you call this function you should <UNK> the game . . .

943:
src: ( functiondefinition ( simplename approve and call ) simplename approve and call ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( ifstatement ( functioncall ( simplename approve ) simplename approve ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename token recipient ) simplename token recipient ( simplename spender ) simplename spender ) functioncall ( simplename receive approval ) simplename receive approval ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename this ) simplename this ( simplename extra data ) simplename extra data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Set allowance for other address and notify .
ref: Approve and then communicate the approved contract in a single tx .

944:
src: ( functiondefinition ( simplename calculate dividend ) simplename calculate dividend ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename dividend index ) simplename dividend index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payee ) simplename payee ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename dividend ) simplename dividend ( simpletype ( simplename dividend ) simplename dividend ) simpletype ) variabledeclaration ( indexaccess ( simplename dividends ) simplename dividends ( simplename dividend index ) simplename dividend index ) indexaccess ) variabledeclarationstatement ( ifstatement ( indexaccess ( memberaccess ( simplename dividend ) simplename dividend ( simplename claimed ) simplename claimed ) memberaccess ( simplename payee ) simplename payee ) indexaccess ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename isecurity token ) simplename isecurity token ( simplename security token ) simplename security token ) functioncall ( simplename balance of at ) simplename balance of at ) memberaccess ( simplename payee ) simplename payee ( memberaccess ( simplename dividend ) simplename dividend ( simplename checkpoint id ) simplename checkpoint id ) memberaccess ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename balance ) simplename balance ( simplename mul ) simplename mul ) memberaccess ( memberaccess ( simplename dividend ) simplename dividend ( simplename amount ) simplename amount ) memberaccess ) functioncall ( simplename div ) simplename div ) memberaccess ( memberaccess ( simplename dividend ) simplename dividend ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculate dividend dividends associated with the provided amount .
ref: Calculate amount of dividends claimable .

945:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( functioncall ( simplename sha3 ) simplename sha3 ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval hash ) simplename approval hash ( functioncall ( simplename sha3 ) simplename sha3 ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Give to target address ability for self token manipulation without sending .
ref: Give to target ident ability for self token manipulation without sending .

946:
src: ( functiondefinition ( simplename get current bonus tier ) simplename get current bonus tier ( visibility external ) visibility external ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename percentage ) simplename percentage ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename threshold ) simplename threshold ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename bonus tiers ) simplename bonus tiers ( simplename bonus index ) simplename bonus index ) indexaccess ( simplename percentage ) simplename percentage ) memberaccess ( memberaccess ( indexaccess ( simplename bonus tiers ) simplename bonus tiers ( simplename bonus index ) simplename bonus index ) indexaccess ( simplename threshold ) simplename threshold ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Calculates the current bonus percentage .
ref: Get bonus percentage and threshold of the current bonus tier .

947:
src: ( functiondefinition ( simplename start new <UNK> ) simplename start new <UNK> ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new price ) simplename new price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wallet owner ) simplename wallet owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename set max buy limit ) simplename set max buy limit ( simplename <UNK> ) simplename <UNK> ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename set price rate ) simplename set price rate ( simplename new price ) simplename new price ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens sold in this round ) simplename tokens sold in this round ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: Start new game .
ref: function to start new ICO round can only be called from owner wallet .

948:
src: ( functiondefinition ( simplename change owner address ) simplename change owner address ( visibility internal ) visibility internal ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( simplename owner ) simplename owner ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: change the owner .
ref: change owner of song registration .

949:
src: ( functiondefinition ( simplename burn ) simplename burn ( visibility default ) visibility default ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( unaryoperation ! ) unaryoperation ! ( simplename burned ) simplename burned ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( simplename start time ) simplename start time ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total sold ) simplename total sold ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner addr ) simplename owner addr ) indexaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total sold ) simplename total sold ( functioncall ( memberaccess ( simplename total sold ) simplename total sold ( simplename add ) simplename add ) memberaccess ( simplename tokens pre ico ) simplename tokens pre ico ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ico amount ) simplename total ico amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens pre ico ) simplename tokens pre ico ( simplename add ) simplename add ) memberaccess ( simplename tokens ico ) simplename tokens ico ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename percentage ) simplename percentage ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename percent ) simplename percent ( simplename total sold ) simplename total sold ( simplename total ico amount ) simplename total ico amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> amount ) simplename <UNK> amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename <UNK> reserve ) simplename <UNK> reserve ( simplename mul ) simplename mul ) memberaccess ( simplename percentage ) simplename percentage ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total reserve ) simplename total reserve ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename team reserve ) simplename team reserve ( simplename add ) simplename add ) memberaccess ( simplename tokens pre ico ) simplename tokens pre ico ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total reserve ) simplename total reserve ( functioncall ( memberaccess ( simplename total reserve ) simplename total reserve ( simplename add ) simplename add ) memberaccess ( simplename <UNK> amount ) simplename <UNK> amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename difference ) simplename difference ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner addr ) simplename owner addr ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename total reserve ) simplename total reserve ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename pre ico addr ) simplename pre ico addr ) indexaccess
candidate: Burns all tokens which reserve tokens .
ref: Called when ICO is closed .

950:
src: ( functiondefinition ( simplename remove addresses from whitelist ) simplename remove addresses from whitelist ( visibility external ) visibility external ( variabledeclaration ( simplename users ) simplename users ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename users ) simplename users ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename users ) simplename users ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename user ) simplename user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename users ) simplename users ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( ifstatement ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename user ) simplename user ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename user ) simplename user ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( emitstatement ( functioncall ( simplename whitelist removed ) simplename whitelist removed ( simplename user ) simplename user ) functioncall ) emitstatement ) block ) ifstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Removes users from whitelist .
ref: Removes a list of addresses from the whitelist .

951:
src: ( functiondefinition ( simplename set swap ) simplename set swap ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename swap addr ) simplename swap addr ( simplename addr ) simplename addr ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename swap time ) simplename swap time ( simplename <UNK> ) simplename <UNK> ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the swap address , update the swap contract address .
ref: Set the enforced swap time and address .

952:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename transferable ) simplename transferable ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Basic transfer of all <UNK> functions .

953:
src: ( functiondefinition ( simplename get winner list ) simplename get winner list ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ) returnparameters ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( block ( returnstatement ( simplename winner list ) simplename winner list ) returnstatement ) block ( modifierinvocation ( simplename is ended ) simplename is ended ) modifierinvocation ) functiondefinition
candidate: return the winner address .
ref: return winner list .

954:
src: ( functiondefinition ( simplename remove metadata object ) simplename remove metadata object ( visibility public ) visibility public ( variabledeclaration ( simplename metadata hash ) simplename metadata hash ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename hash removed ) simplename hash removed ( simplename metadata hash ) simplename metadata hash ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename metadata object removed ) simplename metadata object removed ( simplename metadata hash ) simplename metadata hash ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename onlymember ) simplename onlymember ) modifierinvocation ) functiondefinition
candidate: Remove an metadata for metadata .
ref: removed a metadata of an object .

955:
src: ( functiondefinition ( simplename set pre sale finish date ) simplename set pre sale finish date ( visibility public ) visibility public ( variabledeclaration ( simplename time ) simplename time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre sale finish ) simplename pre sale finish ( simplename time ) simplename time ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the pre sale period , finish date .
ref: only for demonstrate Test Version .

956:
src: ( functiondefinition ( simplename withdraw dth shop ) simplename withdraw dth shop ( visibility external ) visibility external ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tosend ) simplename tosend ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename dth ) simplename dth ( simplename transfer ) simplename transfer ) memberaccess ( simplename receiver ) simplename receiver ( simplename tosend ) simplename tosend ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: withdraw DTH when a shop register .
ref: withdraw DTH when shop delete .

957:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility external ) visibility external ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename funds withdrawn ) simplename funds withdrawn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Withdraw funds from your account .
ref: players withdrawing ETH .

958:
src: ( functiondefinition ( simplename contract decimals update ) simplename contract decimals update ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename retrn val ) simplename retrn val ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename new decimals ) simplename new decimals ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename update confirmation ) simplename update confirmation ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename update confirmation ) simplename update confirmation ( binaryoperation != ) binaryoperation != ( simplename new decimals ) simplename new decimals ( simplename decimals ) simplename decimals ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename decimals ) simplename decimals ( simplename new decimals ) simplename new decimals ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename retrn val ) simplename retrn val ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename retrn val ) simplename retrn val ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename is owner ) simplename is owner ) modifierinvocation ) functiondefinition
candidate: Token Contract may be use by Owner .
ref: Token decimals changing function .

959:
src: ( functiondefinition ( simplename create proxy ) simplename create proxy ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename proxy ) simplename proxy ( simpletype ( simplename proxy ) simplename proxy ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename master copy ) simplename master copy ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename proxy ) simplename proxy ( functioncall ( simplename new ) simplename new ( simpletype ( simplename proxy ) simplename proxy ) simpletype ( simplename master copy ) simplename master copy ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename data ) simplename data ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( inlineassemblystatement ( assemblyblock ( assemblyif ( assemblycall ( simplename eq ) simplename eq ( assemblycall ( simplename call ) simplename call ( simplename gas ) simplename gas ( simplename proxy ) simplename proxy ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( assemblycall ( simplename add ) simplename add ( simplename data ) simplename data ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ( assemblycall ( simplename mload ) simplename mload ( simplename data ) simplename data ) assemblycall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ( assemblyblock ( assemblycall ( simplename revert ) simplename revert ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ) assemblyblock ) assemblyif ) assemblyblock ) inlineassemblystatement ) ifstatement ( emitstatement ( functioncall ( simplename proxy creation ) simplename proxy creation ( simplename proxy ) simplename proxy ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Function which creates a new proxy to be called by the proxy .
ref: Allows to create new proxy contact and execute a message call to the new proxy within one transaction .

960:
src: ( functiondefinition ( simplename person add ) simplename person add ( visibility public ) visibility public ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename date of birth ) simplename date of birth ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( variabledeclaration ( simplename date of death ) simplename date of death ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( variabledeclaration ( simplename relation ) simplename relation ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename log person new ) simplename log person new ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename now ) simplename now ( memberaccess ( simplename people ) simplename people ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename people ) simplename people ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename person ) simplename person ( simplename active ) simplename active ( simplename activated at ) simplename activated at ( simplename deactivated at ) simplename deactivated at ( simplename date of birth ) simplename date of birth ( simplename date of death ) simplename date of death ( simplename name ) simplename name ( simplename relation ) simplename relation ( booleanliteral true ) booleanliteral true ( simplename now ) simplename now ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename date of birth ) simplename date of birth ( simplename date of death ) simplename date of death ( simplename name ) simplename name ( simplename relation ) simplename relation ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is on whitelist ) simplename is on whitelist ) modifierinvocation ) functiondefinition
candidate: add a new Person to the provided address .
ref: add a specific person .

961:
src: ( functiondefinition ( simplename purchase ) simplename purchase ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old owner ) simplename old owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename grey index to owner ) simplename grey index to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename previous owners ) simplename previous owners ( array ( simpletype ( simplename address ) simplename address ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( indexaccess ( simplename grey index to previous owners ) simplename grey index to previous owners ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename selling price ) simplename selling price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename grey index to price ) simplename grey index to price ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous price ) simplename previous price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename grey index to previous price ) simplename grey index to previous price ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename old owner ) simplename old owner ( simplename new owner ) simplename new owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename address not null ) simplename address not null ( simplename new owner ) simplename new owner ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename selling price ) simplename selling price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename price delta ) simplename price delta ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename selling price ) simplename selling price ( simplename previous price ) simplename previous price ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner payout ) simplename owner payout ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( simplename previous price ) simplename previous price ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess
candidate: Allows someone to send ether and obtain the token .
ref: Allows someone to send ether and obtain the token .

962:
src: ( functiondefinition ( simplename claim token for ) simplename claim token for ( visibility public ) visibility public ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename stakes ) simplename stakes ( simplename beneficiary ) simplename beneficiary ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokens ) simplename tokens ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename stakes ) simplename stakes ( simplename beneficiary ) simplename beneficiary ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token balance ) simplename token balance ( functioncall ( memberaccess ( simplename token balance ) simplename token balance ( simplename sub ) simplename sub ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename etheal controller ) simplename etheal controller ( simplename add hodler stake ) simplename add hodler stake ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename etheal controller ) simplename etheal controller ( simplename etheal token ) simplename etheal token ) memberaccess ) functioncall ( simplename transfer ) simplename transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename log token claimed ) simplename log token claimed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename after sale ) simplename after sale ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Claim tokens for investors who used in the contract to extract mistakenly sent tokens to this contract .
ref: Claim token after token sale based on stake .

963:
src: ( functiondefinition ( simplename get roll under ) simplename get roll under ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename roll modulo ) simplename roll modulo ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename bet mask ) simplename bet mask ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename roll under ) simplename roll under ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename single bit mask ) simplename single bit mask ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename shift ) simplename shift ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename shift ) simplename shift ( simplename roll modulo ) simplename roll modulo ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename shift ) simplename shift ) expressionstatement ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( binaryoperation & ) binaryoperation & ( simplename bet mask ) simplename bet mask ( simplename single bit mask ) simplename single bit mask ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename roll under ) simplename roll under ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation *= ) binaryoperation *= ( simplename single bit mask ) simplename single bit mask ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) forstatement ( returnstatement ( simplename roll under ) simplename roll under ) returnstatement ) block ) functiondefinition
candidate: The associated with the id that the game is paused can use this function with data .
ref: Count 1 bits in the bet bit mask to find the total number of bet options .

964:
src: ( functiondefinition ( simplename send token aw ) simplename send token aw ( visibility default ) visibility default ( variabledeclaration ( simplename standard token address ) simplename standard token address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename honestis fort ) simplename honestis fort ( block ( throwstatement throw ) throwstatement throw ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename t ) simplename t ( simpletype ( simplename send token away ) simplename send token away ) simpletype ) variabledeclaration ( indexaccess ( simplename transfers ) simplename transfers ( simplename num transfers ) simplename num transfers ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename t ) simplename t ( simplename coin contract ) simplename coin contract ) memberaccess ( functioncall ( simplename standard token ) simplename standard token ( simplename standard token address ) simplename standard token address ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename t ) simplename t ( simplename amount ) simplename amount ) memberaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename t ) simplename t ( simplename recipient ) simplename recipient ) memberaccess ( simplename receiver ) simplename receiver ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename t ) simplename t ( simplename coin contract ) simplename coin contract ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename receiver ) simplename receiver ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename num transfers ) simplename num transfers ) expressionstatement ) block ) functiondefinition
candidate: send coins throws on any error rather then return a false flag to minimize user errors .
ref: if accidentally other token was donated to Project Dev .

965:
src: ( functiondefinition ( simplename allocate player tokens to ) simplename allocate player tokens to ( visibility internal ) visibility internal ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Internal function to allocate tokens to an address .
ref: Internal Token Handling - validation completed by callers .

966:
src: ( functiondefinition ( simplename get owner ) simplename get owner ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename key ) simplename key ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( memberaccess ( indexaccess ( simplename records ) simplename records ( simplename key ) simplename key ) indexaccess ( simplename owner ) simplename owner ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Returns the owner of the given record .
ref: Returns the owner of the given record .

967:
src: ( functiondefinition ( simplename remove manager ) simplename remove manager ( visibility external ) visibility external ( variabledeclaration ( simplename manager ) simplename manager ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename is manager ) simplename is manager ( simplename manager ) simplename manager ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename is manager ) simplename is manager ( simplename manager ) simplename manager ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename manager removed ) simplename manager removed ( simplename manager ) simplename manager ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: remove a manager .
ref: Function to remove an address to the managers .

968:
src: ( modifierdefinition ( simplename only when released ) simplename only when released ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename release date ) simplename release date ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: The function can be called only by the tokens callable by the wild .
ref: Functions with this modifier can only be executed when the vesting period elapses .

969:
src: ( functiondefinition ( simplename is public period ) simplename is public period ( visibility private ) visibility private ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation == ) binaryoperation == ( simplename purchase period ) simplename purchase period ( memberaccess ( simplename purchase period ) simplename purchase period ( simplename public ) simplename public ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: Internal function to check if a purchase is valid .
ref: Check the state of the contract .

970:
src: ( functiondefinition ( simplename has free places ) simplename has free places ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation < ) binaryoperation < ( functioncall ( simplename get investor count ) simplename get investor count ) functioncall ( simplename max investors ) simplename max investors ) returnstatement ) block ) functiondefinition
candidate: returns true if crowdsale event has ended .
ref: Returns true if there are still free places for investors .

971:
src: ( functiondefinition ( simplename transfer <UNK> ) simplename transfer <UNK> ( visibility default ) visibility default ( variabledeclaration ( simplename key ) simplename key ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename dsp registry ) simplename dsp registry ( simplename transfer ) simplename transfer ) memberaccess ( simplename key ) simplename key ( simplename new owner ) simplename new owner ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfers control of the contract to a new address to a registered .
ref: transfer ownership of this DSP record .

972:
src: ( modifierdefinition ( simplename when owns token ) simplename when owns token ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename owner ) simplename owner ) memberaccess ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if called by any account other than the owner .
ref: asserts zeppelin Claimable workflow is finalized .

973:
src: ( functiondefinition ( simplename create swap ) simplename create swap ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename secret hash ) simplename secret hash ( simpletype ( simplename bytes20 ) simplename bytes20 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename participant address ) simplename participant address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename swaps ) simplename swaps ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename participant address ) simplename participant address ) indexaccess ( simplename balance ) simplename balance ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename swaps ) simplename swaps ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename participant address ) simplename participant address ) indexaccess ( functioncall ( simplename swap ) simplename swap ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename secret hash ) simplename secret hash ( simplename now ) simplename now ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename create swap ) simplename create swap ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: ETH Owner creates Swap with swap .
ref: ETH Owner creates Swap with secretHash .

974:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

975:
src: ( functiondefinition ( simplename set requester lock ) simplename set requester lock ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename res ) simplename res ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename lock ) simplename lock ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename requester locked ) simplename requester locked ( simplename lock ) simplename lock ) expressionstatement ( expressionstatement ( functioncall ( simplename requester lock set ) simplename requester lock set ( simplename lock ) simplename lock ) functioncall ) expressionstatement ( returnstatement ( simplename requester locked ) simplename requester locked ) returnstatement ) block ( modifierinvocation ( simplename only owner or requester ) simplename only owner or requester ) modifierinvocation ) functiondefinition
candidate: Function to set true if the lock period .
ref: allows to set requester lock , indicating requester accepted favor provider .

976:
src: ( functiondefinition ( simplename update purchasing state ) simplename update purchasing state ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename update purchasing state ) simplename update purchasing state ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename purchased tokens ) simplename purchased tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get token amount ) simplename get token amount ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens raised ) simplename tokens raised ( functioncall ( memberaccess ( simplename tokens raised ) simplename tokens raised ( simplename add ) simplename add ) memberaccess ( simplename purchased tokens ) simplename purchased tokens ) functioncall ) expressionstatement ( ifstatement ( functioncall ( simplename cap reached ) simplename cap reached ) functioncall ( block ( emitstatement ( functioncall ( simplename cap overflow ) simplename cap overflow ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ( simplename purchased tokens ) simplename purchased tokens ) functioncall ) emitstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Internal function to update the tokens based on the off the contribution .
ref: Update the amount of tokens raised emit cap overflow events .

977:
src: ( functiondefinition ( simplename mint token ) simplename mint token ( visibility public ) visibility public ( variabledeclaration ( simplename minted amount ) simplename minted amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename central minter ) simplename central minter ) indexaccess ( simplename minted amount ) simplename minted amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total supply ) simplename total supply ( simplename minted amount ) simplename minted amount ) expressionstatement ( emitstatement ( functioncall ( simplename mint token ) simplename mint token ( simplename minted amount ) simplename minted amount ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only central minter ) simplename only central minter ) modifierinvocation ) functiondefinition
candidate: Create mintedAmount tokens and send it to target .
ref: Issue new tokens in circulation .

978:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename ok ) simplename ok ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer function that is called when a user or another contract wants to transfer funds .
ref: Transfer the specified amount of tokens to the specified address .

979:
src: ( functiondefinition ( simplename token transfer ) simplename token transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename old owner ) simplename old owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename card token to owner ) simplename card token to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename new owner ) simplename new owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( simplename to ) simplename to ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename card token to position ) simplename card token to position ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename cards ) simplename cards ( simplename index ) simplename index ) indexaccess ( simplename owner ) simplename owner ) memberaccess ( simplename new owner ) simplename new owner ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename old owner ) simplename old owner ( simplename new owner ) simplename new owner ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Transfer ownership of a new card .
ref: Tranfer token to any address he want to .

980:
src: ( functiondefinition ( simplename finish sale ) simplename finish sale ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename central bank ) simplename central bank ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename finished ) simplename finished ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sale end time ) simplename sale end time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe add ) simplename safe add ( simplename sale start time ) simplename sale start time ( simplename sale duration ) simplename sale duration ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename sale end time ) simplename sale end time ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename finished ) simplename finished ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename final price ) simplename final price ( functioncall ( simplename price ) simplename price ( simplename sale end time ) simplename sale end time ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename finished ) simplename finished ( simplename final price ) simplename final price ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Finish the game .
ref: Finish sale after sale period ended .

981:
src: ( functiondefinition ( simplename new grant ) simplename new grant ( visibility public ) visibility public ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cliff ) simplename cliff ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename revocable ) simplename revocable ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename grants ) simplename grants ( simplename address ) simplename address ) indexaccess ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename indexed grants ) simplename indexed grants ( simplename index ) simplename index ) indexaccess ( simplename address ) simplename address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename index ) simplename index ( functioncall ( memberaccess ( simplename index ) simplename index ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename grants ) simplename grants ( simplename address ) simplename address ) indexaccess ( functioncall ( simplename grant ) simplename grant ( simplename start ) simplename start ( simplename cliff ) simplename cliff ( simplename duration ) simplename duration ( simplename value ) simplename value ( simplename transferred ) simplename transferred ( simplename revocable ) simplename revocable ( simplename start ) simplename start ( simplename cliff ) simplename cliff ( simplename duration ) simplename duration ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename revocable ) simplename revocable ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total vesting ) simplename total vesting ( functioncall ( memberaccess ( simplename total vesting ) simplename total vesting ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename new grant ) simplename new grant ( simplename address ) simplename address ( simplename value ) simplename value ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Grant the tokens to a new address .
ref: Allows the current owner to add new grant .

982:
src: ( modifierdefinition ( simplename can transfer ) simplename can transfer ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( simplename released ) simplename released ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier to make a function callable only when the transfer is enabled .
ref: Limit token transfer until the crowdsale is over .

983:
src: ( modifierdefinition ( simplename when game paused ) simplename when game paused ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename game paused ) simplename game paused ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier to make a function callable only when the contract is paused .
ref: Modifier to allow actions only when the contract IS paused .

984:
src: ( functiondefinition ( simplename trigger cooldown ) simplename trigger cooldown ( visibility internal ) visibility internal ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename cat ) simplename cat ( simpletype ( simplename linglong cat ) simplename linglong cat ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown end block ) simplename cooldown end block ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint64 ) simplename uint64 ) simpletype ) simpletypeexpression ( binaryoperation + ) binaryoperation + ( tupleexpression ( binaryoperation / ) binaryoperation / ( indexaccess ( simplename cooldowns ) simplename cooldowns ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown index ) simplename cooldown index ) memberaccess ) indexaccess ( simplename seconds per block ) simplename seconds per block ) tupleexpression ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown index ) simplename cooldown index ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( memberaccess ( simplename cat ) simplename cat ( simplename cooldown index ) simplename cooldown index ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Set the cooldownEndTime for the given LinglongCat , based on its current cooldownIndex .
ref: Set the cooldownEndTime for the given LinglongCat , based on its current cooldownIndex .

985:
src: ( modifierdefinition ( simplename champ is not for sale ) simplename champ is not for sale ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename champs ) simplename champs ( simplename id ) simplename id ) indexaccess ( simplename for sale ) simplename for sale ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Is caller ( sender ) service account .
ref: Require champ NOT to be for sale .

986:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer of tokens , only can be called from within this contract .

987:
src: ( functiondefinition ( simplename verify ) simplename verify ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename hash ) simplename hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename sender ) simplename sender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation == ) binaryoperation == ( functioncall ( simplename ecrecover ) simplename ecrecover ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ( simplename hash ) simplename hash ) functioncall ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ( simplename sender ) simplename sender ) returnstatement ) block ) functiondefinition
candidate: Verifies that an order signature is valid .
ref: check if the provided signature is valid , internal .

988:
src: ( functiondefinition ( simplename end sale ) simplename end sale ( visibility public ) visibility public ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename crowdsale concluded ) simplename crowdsale concluded ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename burn ) simplename burn ) memberaccess ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: ends the campaign after deadline .
ref: End crowdsale manually .

989:
src: ( functiondefinition ( simplename owner burn token ) simplename owner burn token ( visibility public ) visibility public ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename total supply ) simplename total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( simplename fund for sale ) simplename fund for sale ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fund for sale ) simplename fund for sale ( functioncall ( memberaccess ( simplename fund for sale ) simplename fund for sale ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename burn ) simplename burn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Burns a specific amount of tokens .
ref: owner burn Token .

990:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner ) simplename owner ( indexaccess ( simplename crypton index to owner ) simplename crypton index to owner ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename owner ) simplename owner ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Required for ERC-721 compliance .

991:
src: ( functiondefinition ( simplename my stakes on country ) simplename my stakes on country ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename my stake ) simplename my stake ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename country id ) simplename country id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( indexaccess ( simplename stakes ) simplename stakes ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename country id ) simplename country id ) indexaccess ) returnstatement ) block ( modifierinvocation ( simplename valid country ) simplename valid country ( simplename country id ) simplename country id ) modifierinvocation ) functiondefinition
candidate: Returns your stake for a country .
ref: Get my amount of stakes for a specific country .

992:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename safe sub ) simplename safe sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when transferable ) simplename when transferable ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from other address .
ref: A contract attempts to get the coins .

993:
src: ( functiondefinition ( simplename claim ) simplename claim ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payout amount ) simplename payout amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename current payout ) simplename current payout ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( booleanliteral true ) booleanliteral true ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename payout amount ) simplename payout amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename claimed per token payouts ) simplename claimed per token payouts ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename total per token payout ) simplename total per token payout ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename unclaimed payout totals ) simplename unclaimed payout totals ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename claim event ) simplename claim event ( simplename payout amount ) simplename payout amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename payout amount ) simplename payout amount ) functioncall ) expressionstatement ( returnstatement ( simplename payout amount ) simplename payout amount ) returnstatement ) block ( modifierinvocation ( simplename at either stage ) simplename at either stage ( memberaccess ( simplename stages ) simplename stages ( simplename active ) simplename active ) memberaccess ( memberaccess ( simplename stages ) simplename stages ( simplename terminated ) simplename terminated ) memberaccess ) modifierinvocation ) functiondefinition
candidate: The payout function to claim the ownership of the game .
ref: claim total Ξ claimable for sender based on token holdings at time of each payout .

994:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename previous balances ) simplename previous balances ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation == ) binaryoperation == ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename previous balances ) simplename previous balances ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal transfer , only can be called by this contract .
ref: Internal transfer , only can be called by this contract .

995:
src: ( functiondefinition ( simplename execute ) simplename execute ( visibility external ) visibility external ( variabledeclaration ( simplename sig v ) simplename sig v ( array ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename sig r ) simplename sig r ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename sig s ) simplename sig s ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename destination ) simplename destination ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tx hash ) simplename tx hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( functioncall ( simpletypeexpression ( simpletype ( simplename byte ) simplename byte ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename byte ) simplename byte ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename this ) simplename this ( unaryoperation ++ ) unaryoperation ++ ( simplename nonce ) simplename nonce ( simplename destination ) simplename destination ( simplename value ) simplename value ( simplename data ) simplename data ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename verify signatures ) simplename verify signatures ( simplename sig v ) simplename sig v ( simplename sig r ) simplename sig r ( simplename sig s ) simplename sig s ( simplename tx hash ) simplename tx hash ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename destination ) simplename destination ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( simplename value ) simplename value ) functioncall ( simplename data ) simplename data ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: execute function if only executed by the signature in this contract .
ref: Note that address recovered from signatures must be strictly increasing .

996:
src: ( functiondefinition ( simplename multi operator send ) simplename multi operator send ( visibility external ) visibility external ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amounts ) simplename amounts ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename user data ) simplename user data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( variabledeclaration ( simplename operator data ) simplename operator data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( memberaccess ( simplename amounts ) simplename amounts ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename to ) simplename to ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename operator send ) simplename operator send ( simplename from ) simplename from ( indexaccess ( simplename to ) simplename to ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename amounts ) simplename amounts ( simplename i ) simplename i ) indexaccess ( simplename user data ) simplename user data ( simplename operator data ) simplename operator data ) functioncall ) expressionstatement ) block ) forstatement ) block ) functiondefinition
candidate: Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender .
ref: Transfer the specified amounts of tokens to the specified addresses as _from .

997:
src: ( functiondefinition ( simplename outstanding tokens ) simplename outstanding tokens ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename investor ) simplename investor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename finished ) simplename finished ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( simplename final price ) simplename final price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename investor ) simplename investor ( simpletype ( simplename investor ) simplename investor ) simpletype ) variabledeclaration ( indexaccess ( simplename investors ) simplename investors ( simplename investor ) simplename investor ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus amount ) simplename bonus amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename investor ) simplename investor ( simplename bonus amount ) simplename bonus amount ) memberaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus amount ) simplename bonus amount ( functioncall ( simplename safe add ) simplename safe add ( simplename bonus amount ) simplename bonus amount ( functioncall ( simplename min ) simplename min ( memberaccess ( simplename investor ) simplename investor ( simplename amount ) simplename amount ) memberaccess ( memberaccess ( simplename investor ) simplename investor ( simplename invested by referrers ) simplename invested by referrers ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename effective amount ) simplename effective amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename safe add ) simplename safe add ( memberaccess ( simplename investor ) simplename investor ( simplename amount ) simplename amount ) memberaccess ( binaryoperation / ) binaryoperation / ( simplename bonus amount ) simplename bonus amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( simplename fp div ) simplename fp div ( simplename effective amount ) simplename effective amount ( simplename final price ) simplename final price ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Number of tokens that can be purchased .
ref: number of tokens to be delivered to given investor .

998:
src: ( functiondefinition ( simplename pow 10 ) simplename pow 10 ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename x ) simplename x ( simplename two 128 ) simplename two 128 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename x ) simplename x ( simplename two 128 ) simplename two 128 ( returnstatement ( simplename x ) simplename x ) returnstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename x2 ) simplename x2 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation >> ) binaryoperation >> ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename x ) simplename x ( simplename x ) simplename x ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename x4 ) simplename x4 ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation >> ) binaryoperation >> ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename x2 ) simplename x2 ( simplename x2 ) simplename x2 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation >> ) binaryoperation >> ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename x4 ) simplename x4 ( simplename x4 ) simplename x4 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( returnstatement ( binaryoperation >> ) binaryoperation >> ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename x2 ) simplename x2 ( simplename <UNK> ) simplename <UNK> ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Returns the amount of data , which an address are allowed to participate .
ref: 2 128 * ( x / 2 128 ) 10 .

999:
src: ( functiondefinition ( simplename heap sort ) simplename heap sort ( visibility public ) visibility public ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( array ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename end ) simplename end ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename self ) simplename self ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get parent i ) simplename get parent i ( simplename end ) simplename end ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename root ) simplename root ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename start ) simplename start ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename l child ) simplename l child ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename r child ) simplename r child ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename swap ) simplename swap ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename temp ) simplename temp ( simpletype ( simplename uint128 ) simplename uint128 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( whilestatement ( binaryoperation >= ) binaryoperation >= ( simplename start ) simplename start ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename root ) simplename root ( simplename start ) simplename start ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename l child ) simplename l child ( functioncall ( simplename get left child i ) simplename get left child i ( simplename start ) simplename start ) functioncall ) expressionstatement ( whilestatement ( binaryoperation <= ) binaryoperation <= ( simplename l child ) simplename l child ( simplename end ) simplename end ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename r child ) simplename r child ( binaryoperation + ) binaryoperation + ( simplename l child ) simplename l child ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename swap ) simplename swap ( simplename root ) simplename root ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename self ) simplename self ( simplename swap ) simplename swap ) indexaccess ( indexaccess ( simplename self ) simplename self ( simplename l child ) simplename l child ) indexaccess ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename swap ) simplename swap ( simplename l child ) simplename l child ) expressionstatement ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( simplename r child ) simplename r child ( simplename end ) simplename end ) tupleexpression ( tupleexpression ( binaryoperation < ) binaryoperation < ( indexaccess ( simplename self ) simplename self ( simplename swap ) simplename swap ) indexaccess ( indexaccess ( simplename self ) simplename self ( simplename r child ) simplename r child
candidate: Sorts given array in place .
ref: Sorts given array in place .

1000:
src: ( functiondefinition ( simplename supports interface ) simplename supports interface ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename interface id ) simplename interface id ( simpletype ( simplename bytes4 ) simplename bytes4 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( simplename interface id ) simplename interface id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( simplename interface id ) simplename interface id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Query if a contract implements an interface .
ref: True if the contract implements the requested interface .

1001:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename freeze end ) simplename freeze end ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( functioncall ( simplename has pool role ) simplename has pool role ( simplename to ) simplename to ) functioncall ( functioncall ( simplename has pool role ) simplename has pool role ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

1002:
src: ( functiondefinition ( simplename unlock ) simplename unlock ( visibility public ) visibility public ( block ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename now ) simplename now ( simplename unlocked at ) simplename unlocked at ( throwstatement throw ) throwstatement throw ) ifstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( memberaccess ( simplename team multisig ) simplename team multisig ( simplename send ) simplename send ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( functioncall ( simplename unlocked ) simplename unlocked ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: If the time of freezing expired will return the funds to the refund .
ref: Transfer locked tokens to <UNK> multisig wallet .

1003:
src: ( functiondefinition ( simplename set user role ) simplename set user role ( visibility public ) visibility public ( variabledeclaration ( simplename subject ) simplename subject ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename role ) simplename role ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename object ) simplename object ( simpletype ( simplename iaccess controlled ) simplename iaccess controlled ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new value ) simplename new value ( simpletype ( simplename tri state ) simplename tri state ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename set user role private ) simplename set user role private ( simplename subject ) simplename subject ( simplename role ) simplename role ( simplename object ) simplename object ( simplename new value ) simplename new value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only ) simplename only ( simplename role access controller ) simplename role access controller ) modifierinvocation ) functiondefinition
candidate: Set a role from an address .
ref: Assign a role to a user <UNK> .

1004:
src: ( functiondefinition ( simplename bio unlock ) simplename bio unlock ( visibility external ) visibility external ( variabledeclaration ( simplename sha ) simplename sha ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename v ) simplename v ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename r ) simplename r ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename s ) simplename s ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename biometric lock ) simplename biometric lock ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename biometric completed ) simplename biometric completed ( simplename sha ) simplename sha ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bio lock sha ) simplename bio lock sha ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( indexaccess ( simplename biometric now ) simplename biometric now ( simplename sha ) simplename sha ) indexaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename sha ) simplename sha ( simplename bio lock sha ) simplename bio lock sha ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( functioncall ( simplename verify ) simplename verify ( simplename sha ) simplename sha ( simplename v ) simplename v ( simplename r ) simplename r ( simplename s ) simplename s ) functioncall ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename biometric lock ) simplename biometric lock ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename biometric unlocked ) simplename biometric unlocked ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename biometric completed ) simplename biometric completed ( simplename sha ) simplename sha ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ) block ) functiondefinition
candidate: msg . sender .
ref: Unlocks msg . sender .

1005:
src: ( functiondefinition ( simplename owner of ) simplename owner of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename country index to owner ) simplename country index to owner ( simplename token id ) simplename token id ) indexaccess ) variabledeclarationstatement ( returnstatement ( tupleexpression ( simplename owner ) simplename owner ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Required for ERC-721 compliance .
ref: Get the owner of a country token .

1006:
src: ( functiondefinition ( simplename release ) simplename release ( visibility public ) visibility public ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename release time ) simplename release time ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename num ) simplename num ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename now ) simplename now ( simplename release time ) simplename release time ) tupleexpression ( simplename release periods ) simplename release periods ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( simplename num ) simplename num ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename num of released ) simplename num of released ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename amount of per release ) simplename amount of per release ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount of per release ) simplename amount of per release ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename amount of per release ) simplename amount of per release ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount of per release ) simplename amount of per release ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount ) simplename amount ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename balance of ) simplename balance of ) memberaccess ( simplename this ) simplename this ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename <UNK> ) simplename <UNK> ( simplename safe transfer ) simplename safe transfer ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename num of released ) simplename num of released ( functioncall ( memberaccess ( simplename num of released ) simplename num of released ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfers vested tokens to beneficiary .
ref: Transfers tokens held by timelock to beneficiary .

1007:
src: ( modifierdefinition ( simplename tradable ) simplename tradable ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( tupleexpression ( binaryoperation || ) binaryoperation || ( simplename trading live ) simplename trading live ( indexaccess ( simplename freeze bypassing ) simplename freeze bypassing ( simplename from ) simplename from ) indexaccess ) tupleexpression ( tupleexpression ( binaryoperation <= ) binaryoperation <= ( indexaccess ( simplename lockup expirations ) simplename lockup expirations ( simplename from ) simplename from ) indexaccess ( simplename now ) simplename now ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: from the trading has been approved for the given address .
ref: Modifier that checks if the conditions are met for a token to be tradable .

1008:
src: ( functiondefinition ( simplename get pokemon owner ) simplename get pokemon owner ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename pokemon id ) simplename pokemon id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( tupleexpression ( memberaccess ( indexaccess ( simplename pokemons ) simplename pokemons ( simplename pokemon id ) simplename pokemon id ) indexaccess ( simplename owner address ) simplename owner address ) memberaccess ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: This function will return only the owner address .
ref: This function will return only the owner address of a specific <UNK> .

1009:
src: ( functiondefinition ( simplename finish minting ) simplename finish minting ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minting finished ) simplename minting finished ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename mint finished ) simplename mint finished ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only ) simplename only ( simplename messi dev ) simplename messi dev ) modifierinvocation ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ) functiondefinition
candidate: Function to stop minting new tokens .
ref: Function to stop minting new tokens .

1010:
src: ( functiondefinition ( simplename startmetadollar ) simplename startmetadollar ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre ico is running ) simplename pre ico is running ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimal goal reached ) simplename minimal goal reached ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico exit is possible ) simplename ico exit is possible ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico is closed ) simplename ico is closed ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename token balance of ) simplename token balance of ( simplename this ) simplename this ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename owner ) simplename owner ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename supervisor ) simplename supervisor ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current token price ) simplename current token price ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre icoprice ) simplename pre icoprice ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename icoprice ) simplename icoprice ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sell price ) simplename sell price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename commission1 ) simplename commission1 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename commission2 ) simplename commission2 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename update prices ) simplename update prices ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Constructor of the contract .
ref: Constructor of the contract .

1011:
src: ( functiondefinition ( simplename owner put interest ) simplename owner put interest ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename terms ) simplename terms ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename terms ) simplename terms ( tupleexpression ( binaryoperation + ) binaryoperation + ( functioncall ( simplename get interest count ) simplename get interest count ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename interest array ) simplename interest array ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is initialized ) simplename is initialized ) modifierinvocation ( modifierinvocation ( simplename is paused ) simplename is paused ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set the amount of fees on behalf of an account .
ref: put interest in this contract .

1012:
src: ( functiondefinition ( simplename migrate ) simplename migrate ( visibility external ) visibility external ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename migration agent ) simplename migration agent ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename balances ) simplename balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename balances ) simplename balances ( simplename beneficiary ) simplename beneficiary ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total migrated ) simplename total migrated ( functioncall ( memberaccess ( simplename total migrated ) simplename total migrated ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename <UNK> ) simplename <UNK> ( simplename migration agent ) simplename migration agent ) functioncall ( simplename migrate from ) simplename migrate from ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename log migrate ) simplename log migrate ( simplename beneficiary ) simplename beneficiary ( simplename migration agent ) simplename migration agent ( simplename value ) simplename value ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Migrate tokens to the new token contract .
ref: Allow to migrate to next version of contract .

1013:
src: ( functiondefinition ( simplename address has code ) simplename address has code ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename contract ) simplename contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( variabledeclaration ( simplename size ) simplename size ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename size ) simplename size ( assemblycall ( simplename extcodesize ) simplename extcodesize ( simplename contract ) simplename contract ) assemblycall ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( returnstatement ( binaryoperation > ) binaryoperation > ( simplename size ) simplename size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Check transaction coming from the contract or not .
ref: Check if a contract exists .

1014:
src: ( functiondefinition ( simplename authorize many ) simplename authorize many ( visibility public ) visibility public ( variabledeclaration ( simplename addr ) simplename addr ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename cap ) simplename cap ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename addr ) simplename addr ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename cap ) simplename cap ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename cap ) simplename cap ( memberaccess ( simplename contribution caps ) simplename contribution caps ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename addr ) simplename addr ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename authorize ) simplename authorize ( indexaccess ( simplename addr ) simplename addr ( simplename i ) simplename i ) indexaccess ( simplename cap ) simplename cap ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename only admins ) simplename only admins ) modifierinvocation ) functiondefinition
candidate: This function is used by the owner to authorize many addresses in a single call .
ref: This function is used by the owner to authorize many addresses in a single call .

1015:
src: ( modifierdefinition ( simplename existing token ) simplename existing token ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename total supply ) simplename total supply ( simplename token id ) simplename token id ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( tupleexpression ( binaryoperation == ) binaryoperation == ( binaryoperation & ) binaryoperation & ( simplename token id ) simplename token id ( simplename mask ) simplename mask ( simplename token id ) simplename token id ) tupleexpression ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Throws if it should be used .
ref: Throws if _tokenId not exists .

1016:
src: ( functiondefinition ( simplename get block index ) simplename get block index ( visibility public ) visibility public ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename initial block number ) simplename initial block number ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current block number ) simplename current block number ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename current block number ) simplename current block number ( simplename initial block number ) simplename initial block number ) functioncall ) expressionstatement ( returnstatement ( functioncall ( memberaccess ( simplename current block number ) simplename current block number ( simplename sub ) simplename sub ) memberaccess ( simplename initial block number ) simplename initial block number ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Returns the index number by the block number .
ref: Map block number to block index .

1017:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer ) simplename transfer ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename not paused ) simplename not paused ) modifierinvocation ) functiondefinition
candidate: Transfer token for a specified address .
ref: ERC20 transfer function overridden to disable transfers when paused .

1018:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token from an address to another specified address using allowance .
ref: transfer token from an address to another specified address using allowance .

1019:
src: ( functiondefinition ( simplename buyer cancel ) simplename buyer cancel ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename trade id ) simplename trade id ( simpletype ( simplename bytes16 ) simplename bytes16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename seller ) simplename seller ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename buyer ) simplename buyer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename buyer ) simplename buyer ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ( functioncall ( simplename do buyer cancel ) simplename do buyer cancel ( simplename trade id ) simplename trade id ( simplename seller ) simplename seller ( simplename buyer ) simplename buyer ( simplename value ) simplename value ( simplename fee ) simplename fee ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Cancel the trade .
ref: Cancel the escrow as a buyer .

1020:
src: ( functiondefinition ( simplename refund tokens ) simplename refund tokens ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( returnstatement ( functioncall ( simplename refund tokens ) simplename refund tokens ( simplename to ) simplename to ) functioncall ) returnstatement ) block ) ifstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename voters ) simplename voters ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename refund tokens ) simplename refund tokens ( indexaccess ( simplename voters ) simplename voters ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to claim the ownership of the presale contract .
ref: Refunds tokens for all voters .

1021:
src: ( functiondefinition ( simplename create account ) simplename create account ( visibility public ) visibility public ( variabledeclaration ( simplename new user ) simplename new user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename create account for user ) simplename create account for user ( simplename new user ) simplename new user ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only registry admin ) simplename only registry admin ) modifierinvocation ) functiondefinition
candidate: Creates an account with the given name .
ref: Create an account instantly without an <UNK> .

1022:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( simplename zethr contract ) simplename zethr contract ( simplename buy and set div percentage ) simplename buy and set div percentage ) memberaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename balance ) simplename balance ) memberaccess ) functioncall ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div rate ) simplename div rate ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set buy tokens .
ref: Buy tokens at this contract's <UNK> .

1023:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename wallet team ) simplename wallet team ( block ( expressionstatement ( functioncall ( simplename check vesting ) simplename check vesting ( simplename value ) simplename value ( simplename now ) simplename now ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename transfers enabled ) simplename transfers enabled ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

1024:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename to ) simplename to ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename lambo index to owner ) simplename lambo index to owner ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename from ) simplename from ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename lambo index to approved ) simplename lambo index to approved ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Assigns ownership of a specific Panda to an address .
ref: Assigns ownership of a specific Lambo to an address .

1025:
src: ( functiondefinition ( simplename set abel ) simplename set abel ( visibility public ) visibility public ( variabledeclaration ( simplename abel ) simplename abel ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename address abel ) simplename address abel ( simplename abel ) simplename abel ) expressionstatement ) block ( modifierinvocation ( simplename only oscar ) simplename only oscar ) modifierinvocation ) functiondefinition
candidate: set withdrawal address .
ref: set Abel Address .

1026:
src: ( functiondefinition ( simplename init cutoffs ) simplename init cutoffs ( visibility internal ) visibility internal ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename data ) simplename data ( simpletype ( simplename bonus data ) simplename bonus data ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename data ) simplename data ( simplename <UNK> ) simplename <UNK> ) memberaccess ( functioncall ( simplename to timestamp ) simplename to timestamp ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename data ) simplename data ( simplename <UNK> ) simplename <UNK> ) memberaccess ( functioncall ( simplename to timestamp ) simplename to timestamp ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename data ) simplename data ( simplename <UNK> ) simplename <UNK> ) memberaccess ( functioncall ( simplename to timestamp ) simplename to timestamp ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename data ) simplename data ( simplename <UNK> ) simplename <UNK> ) memberaccess ( functioncall ( simplename to timestamp ) simplename to timestamp ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Internal function that checks that the contract is finished .
ref: use storage keyword so that we write this to persistent storage .

1027:
src: ( functiondefinition ( simplename calculate house cut amount ) simplename calculate house cut amount ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename game id ) simplename game id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename raw pool amount ) simplename raw pool amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename calculate raw pool amount ) simplename calculate raw pool amount ( simplename game id ) simplename game id ) functioncall ) variabledeclarationstatement ( returnstatement ( functioncall ( memberaccess ( simplename house cut percentage ) simplename house cut percentage ( simplename mul ) simplename mul ) memberaccess ( functioncall ( memberaccess ( simplename raw pool amount ) simplename raw pool amount ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Return the house cut which should be sent in the game .
ref: Returns the amount the house will take .

1028:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility default ) visibility default ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename can tradable ) simplename can tradable ) modifierinvocation ( modifierinvocation ( simplename is active ) simplename is active ) modifierinvocation ) functiondefinition
candidate: send value token to to from from .
ref: send value token to to from from .

1029:
src: ( functiondefinition ( simplename reset listing ) simplename reset listing ( visibility private ) visibility private ( variabledeclaration ( simplename listing hash ) simplename listing hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename listing hash hash ) simplename listing hash hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( simplename listing hash ) simplename listing hash ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename listing hash ) simplename listing hash ( simpletype ( simplename listing ) simplename listing ) simpletype ) variabledeclaration ( indexaccess ( simplename listings ) simplename listings ( simplename listing hash hash ) simplename listing hash hash ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename listing hash ) simplename listing hash ( simplename unstaked deposit ) simplename unstaked deposit ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename listing hash ) simplename listing hash ( simplename owner ) simplename owner ) memberaccess ( memberaccess ( simplename listing hash ) simplename listing hash ( simplename unstaked deposit ) simplename unstaked deposit ) memberaccess ) functioncall ) functioncall ) expressionstatement ) ifstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename listings ) simplename listings ( simplename listing hash hash ) simplename listing hash hash ) indexaccess ) expressionstatement ) block ) functiondefinition
candidate: Allows the owner of a listingHash to remove a listingHash from the whitelist .
ref: Deletes a listingHash from the whitelist and transfers tokens back to owner .

1030:
src: ( functiondefinition ( simplename ) simplename ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename oraclize set custom gas price ) simplename oraclize set custom gas price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( functioncall ( simplename oraclize get price ) simplename oraclize get price ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( block ( expressionstatement ( functioncall ( simplename new oraclize query ) simplename new oraclize query ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename oraclize data ) simplename oraclize data ( functioncall ( simplename oraclize query ) simplename oraclize query ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename add client ) simplename add client ( simplename oraclize data ) simplename oraclize data ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename handler ) simplename handler ( functioncall ( simplename div ) simplename div ( indexaccess ( simplename money ) simplename money ( simplename oraclize data ) simplename oraclize data ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename company account ) simplename company account ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( simplename mul ) simplename mul ( simplename handler ) simplename handler ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename logfolio ) simplename logfolio ( indexaccess ( simplename betid ) simplename betid ( simplename oraclize data ) simplename oraclize data ) indexaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename allowed bets ) simplename allowed bets ) modifierinvocation ) functiondefinition
candidate: functions below this line are onlyOwner .
ref: functions of operation .

1031:
src: ( functiondefinition ( simplename get total amount of tokens ) simplename get total amount of tokens ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current time ) simplename current time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename current time ) simplename current time ( binaryoperation < ) binaryoperation < ( simplename current time ) simplename current time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount of tokens ) simplename amount of tokens ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename current time ) simplename current time ( binaryoperation <= ) binaryoperation <= ( simplename current time ) simplename current time ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename amount of tokens ) simplename amount of tokens ( functioncall ( memberaccess ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate ) simplename rate ) functioncall ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( returnstatement ( simplename amount of tokens ) simplename amount of tokens ) returnstatement ) block ) functiondefinition
candidate: Gets the total amount of tokens stored by the contract .
ref: Total supply tokens for periods .

1032:
src: ( functiondefinition ( simplename kill ) simplename kill ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename locked in bets ) simplename locked in bets ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename selfdestruct ) simplename selfdestruct ( simplename owner ) simplename owner ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to recover the funds on the contract .
ref: Contract may be destroyed only when there are no ongoing bets , either settled or refunded .

1033:
src: ( functiondefinition ( simplename coins unit ) simplename coins unit ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename tokens wallet ) simplename tokens wallet ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename <UNK> ) simplename <UNK> ( simplename amount ) simplename amount ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Send coins during sale .
ref: change units address .

1034:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility private ) visibility private ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename to ) simplename to ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename card token to owner ) simplename card token to owner ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename from ) simplename from ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename card token to approved ) simplename card token to approved ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Assigns ownership of a specific Card to an address .
ref: Assigns ownership of a specific card to an address .

1035:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount approved ) simplename amount approved ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( binaryoperation >= ) binaryoperation >= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename amount approved ) simplename amount approved ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall ( simplename m transfer ) simplename m transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Send _amount tokens to _to from _from on the condition it is approved by _from .
ref: Send _amount tokens to _to from _from on the condition it is approved by _from .

1036:
src: ( functiondefinition ( simplename issue ) simplename issue ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ( simplename total supply ) simplename total supply ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename asset size ) simplename asset size ( binaryoperation + ) binaryoperation + ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename amount ) simplename amount ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total supply ) simplename total supply ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( functioncall ( simplename issue ) simplename issue ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Issue a new amount of tokens these tokens are deposited into the owner address .
ref: Issue a new amount of tokens .

1037:
src: ( functiondefinition ( simplename burn from ) simplename burn from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( indexaccess ( simplename allowance ) simplename allowance ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( functioncall ( simplename safe sub ) simplename safe sub ( simplename total supply ) simplename total supply ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename burn ) simplename burn ( simplename from ) simplename from ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only payload size ) simplename only payload size ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Destroy tokens from other account .
ref: Destroy tokens from other account .

1038:
src: ( functiondefinition ( simplename trade balances ) simplename trade balances ( visibility private ) visibility private ( variabledeclaration ( simplename token get ) simplename token get ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount get ) simplename amount get ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token give ) simplename token give ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount give ) simplename amount give ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename user ) simplename user ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename fee take xfer ) simplename fee take xfer ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( simplename free until date ) simplename free until date ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee take xfer ) simplename fee take xfer ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename mul ) simplename mul ) memberaccess ( simplename fee take ) simplename fee take ) functioncall ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( functioncall ( memberaccess ( simplename amount ) simplename amount ( simplename add ) simplename add ) memberaccess ( simplename fee take xfer ) simplename fee take xfer ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( simplename user ) simplename user ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( simplename user ) simplename user ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( simplename fee account ) simplename fee account ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename tokens ) simplename tokens ( simplename token get ) simplename token get ) indexaccess ( simplename fee account ) simplename fee account ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename fee take xfer ) simplename fee take xfer ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = )
candidate: This is a private function which should be called from user to give his balance .
ref: This is a private function and is only being called from trade ( ) .

1039:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename destination ) simplename destination ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename destination ) simplename destination ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename destination ) simplename destination ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename destination ) simplename destination ( simplename amount ) simplename amount ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer with may only be called by the owner .
ref: Transfers amount from msg . sender .

1040:
src: ( functiondefinition ( simplename try trigger payout ) simplename try trigger payout ( visibility private ) visibility private ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename property id ) simplename property id ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename pxl to spend ) simplename pxl to spend ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename property flag ) simplename property flag ) variabledeclaration ( variabledeclaration ( simplename property is in private mode ) simplename property is in private mode ) variabledeclaration ( variabledeclaration ( simplename property owner ) simplename property owner ) variabledeclaration ( variabledeclaration ( simplename property last updater ) simplename property last updater ) variabledeclaration ( variabledeclaration ( simplename property sale price ) simplename property sale price ) variabledeclaration ( variabledeclaration ( simplename property last update ) simplename property last update ) variabledeclaration ( variabledeclaration ( simplename property become public ) simplename property become public ) variabledeclaration ( variabledeclaration ( simplename property earn until ) simplename property earn until ) variabledeclaration ( functioncall ( memberaccess ( simplename pxl property ) simplename pxl property ( simplename properties ) simplename properties ) memberaccess ( simplename property id ) simplename property id ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( simplename property is in private mode ) simplename property is in private mode ( binaryoperation <= ) binaryoperation <= ( simplename property become public ) simplename property become public ( simplename now ) simplename now ( block ( expressionstatement ( functioncall ( memberaccess ( simplename pxl property ) simplename pxl property ( simplename set property private mode ) simplename set property private mode ) memberaccess ( simplename property id ) simplename property id ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename property is in private mode ) simplename property is in private mode ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) ifstatement ( ifstatement ( simplename property is in private mode ) simplename property is in private mode ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename property owner ) simplename property owner ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename property flag ) simplename property flag ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename property become public ) simplename property become public ( simplename now ) simplename now ( binaryoperation == ) binaryoperation == ( simplename property last updater ) simplename property last updater ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pxl spent ) simplename pxl spent ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename pxl to spend ) simplename pxl to spend ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( functioncall ( simplename is in grace period ) simplename is in grace period
candidate: If Property is private Property , sends ownership , he receives 50 / .
ref: Function which <UNK> payouts for setColors .

1041:
src: ( functiondefinition ( simplename check proof of work ) simplename check proof of work ( visibility default ) visibility default ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simplename work accepted ) simplename work accepted ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current randomness ) simplename current randomness ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename current target ) simplename current target ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation < ) binaryoperation < ( functioncall ( simpletypeexpression ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) simpletypeexpression ( functioncall ( simplename hash ) simplename hash ( simplename nonce ) simplename nonce ( simplename current randomness ) simplename current randomness ) functioncall ) functioncall ( simplename current target ) simplename current target ) returnstatement ) block ) functiondefinition
candidate: check that address is a registered .
ref: pure , accepts randomness , nonce target and returns <UNK> whether work is good .

1042:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( simplename price ) simplename price ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename decimals ) simplename decimals ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename this ) simplename this ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( simplename price ) simplename price ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename decimals ) simplename decimals ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Sell amount tokens to contract .
ref: Sell amount tokens to contract .

1043:
src: ( functiondefinition ( simplename manual deposit ) simplename manual deposit ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename message to investors ) simplename message to investors ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ) block ( modifierinvocation ( simplename manager ) simplename manager ) modifierinvocation ) functiondefinition
candidate: In case the amassador quota is not met , the administrator can manually deposit .
ref: The manager can deposit manually from previous version's balances .

1044:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility internal ) visibility internal ( variabledeclaration ( simplename nft address ) simplename nft address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename nft contract ) simplename nft contract ( simpletype ( simplename ierc721 base ) simplename ierc721 base ) simpletype ) variabledeclaration ( functioncall ( simplename get nft contract ) simplename get nft contract ( simplename nft address ) simplename nft address ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename nft contract ) simplename nft contract ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename this ) simplename this ( simplename receiver ) simplename receiver ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfers the ownership of a given token ID to another address .
ref: Transfers an NFT owned by this contract to another address .

1045:
src: ( functiondefinition ( simplename multi call ) simplename multi call ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addresses ) simplename addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename amounts ) simplename amounts ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename start balance ) simplename start balance ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename addresses ) simplename addresses ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename safe call ) simplename safe call ( indexaccess ( simplename addresses ) simplename addresses ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename amounts ) simplename amounts ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename multi call ) simplename multi call ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( indexaccess ( simplename addresses ) simplename addresses ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename amounts ) simplename amounts ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( binaryoperation - ) binaryoperation - ( simplename start balance ) simplename start balance ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens to multiple addresses .
ref: Call to multiple contracts using two arrays which includes the contract address and the amount .

1046:
src: ( functiondefinition ( simplename challenge ) simplename challenge ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename challenge id ) simplename challenge id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename listing hash ) simplename listing hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename listing ) simplename listing ( simpletype ( simplename listing ) simplename listing ) simpletype ) variabledeclaration ( indexaccess ( simplename listings ) simplename listings ( simplename listing hash ) simplename listing hash ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename deposit ) simplename deposit ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename parameterizer ) simplename parameterizer ( simplename get ) simplename get ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( functioncall ( simplename app was made ) simplename app was made ( simplename listing hash ) simplename listing hash ) functioncall ( memberaccess ( simplename listing ) simplename listing ( simplename whitelisted ) simplename whitelisted ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename listing ) simplename listing ( simplename challenge id ) simplename challenge id ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( indexaccess ( simplename challenges ) simplename challenges ( memberaccess ( simplename listing ) simplename listing ( simplename challenge id ) simplename challenge id ) memberaccess ) indexaccess ( simplename resolved ) simplename resolved ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( memberaccess ( simplename listing ) simplename listing ( simplename unstaked deposit ) simplename unstaked deposit ) memberaccess ( simplename deposit ) simplename deposit ( block ( expressionstatement ( functioncall ( simplename reset listing ) simplename reset listing ( simplename listing hash ) simplename listing hash ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename touch and removed ) simplename touch and removed ( simplename listing hash ) simplename listing hash ) functioncall ) expressionstatement ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename poll id ) simplename poll id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename voting ) simplename voting ( simplename start poll ) simplename start poll ) memberaccess ( functioncall ( memberaccess ( simplename parameterizer ) simplename parameterizer ( simplename get ) simplename get ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ( functioncall ( memberaccess ( simplename parameterizer ) simplename parameterizer ( simplename get ) simplename get ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ( functioncall ( memberaccess ( simplename parameterizer ) simplename parameterizer ( simplename get ) simplename get ) memberaccess ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename challenges ) simplename challenges ( simplename poll id ) simplename poll id ) indexaccess ( functioncall ( simplename
candidate: Allows the owner of a challenge can be called by the listingHash which is at a specific block .
ref: Starts a poll for a listingHash which is either in the apply stage or already in the whitelist .

1047:
src: ( functiondefinition ( simplename <UNK> genesis sales ) simplename <UNK> genesis sales ( visibility external ) visibility external ( variabledeclaration ( simplename sig ) simplename sig ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new price ) simplename new price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( simplename sale list lib ) simplename sale list lib ( simplename add sale ) simplename add sale ) memberaccess ( indexaccess ( simplename sig to sorted sales ) simplename sig to sorted sales ( simplename sig ) simplename sig ) indexaccess ( simplename owner ) simplename owner ( simplename new price ) simplename new price ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename address to sig to sale price ) simplename address to sig to sale price ( simplename owner ) simplename owner ) indexaccess ( simplename sig ) simplename sig ) indexaccess ( simplename new price ) simplename new price ) expressionstatement ( emitstatement ( functioncall ( simplename sale posted ) simplename sale posted ( simplename owner ) simplename owner ( simplename sig ) simplename sig ( simplename new price ) simplename new price ) functioncall ) emitstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to change the price of a specific address .
ref: Admin method for <UNK> all genesis sales .

1048:
src: ( functiondefinition ( simplename uint2 to str ) simplename uint2 to str ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename arr ) simplename arr ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename length ) simplename length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename val ) simplename val ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename arr ) simplename arr ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename val ) simplename val ( indexaccess ( simplename arr ) simplename arr ( simplename i ) simplename i ) indexaccess ) expressionstatement ( whilestatement ( binaryoperation >= ) binaryoperation >= ( simplename val ) simplename val ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename val ) simplename val ( binaryoperation / ) binaryoperation / ( simplename val ) simplename val ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) whilestatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) forstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename bstr ) simplename bstr ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename bytes ) simplename bytes ) simpletype ( simplename length ) simplename length ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename k ) simplename k ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename length ) simplename length ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename j ) simplename j ( simpletype ( simplename int ) simplename int ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename int ) simplename int ) simpletype ) simpletypeexpression ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename arr ) simplename arr ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement
candidate: Convert an unsigned integer to a unsigned fixed-point decimal .
ref: create an string according to the array .

1049:
src: ( functiondefinition ( simplename claim ) simplename claim ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( simplename last action ) simplename last action ( simplename time before jackpot ) simplename time before jackpot ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename jackpot last qualified ) simplename jackpot last qualified ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename div ) simplename div ) memberaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename mul ) simplename mul ) memberaccess ( simplename jackpot balance ) simplename jackpot balance ( indexaccess ( simplename game reseeds ) simplename game reseeds ( simplename jackpot count ) simplename jackpot count ) indexaccess ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payout ) simplename payout ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename jackpot balance ) simplename jackpot balance ( simplename <UNK> ) simplename <UNK> ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename jackpot last qualified ) simplename jackpot last qualified ( simplename transfer ) simplename transfer ) memberaccess ( simplename payout ) simplename payout ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename jackpot balance ) simplename jackpot balance ( simplename <UNK> ) simplename <UNK> ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename jackpot last winner ) simplename jackpot last winner ( simplename jackpot last qualified ) simplename jackpot last qualified ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename jackpot last payout ) simplename jackpot last payout ( simplename payout ) simplename payout ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename games ) simplename games ( simplename game index ) simplename game index ) indexaccess ( simplename winners ) simplename winners ) memberaccess ( simplename push ) simplename push ) memberaccess ( simplename jackpot last qualified ) simplename jackpot last qualified ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename games ) simplename games ( simplename game index ) simplename game index ) indexaccess ( simplename winner payouts ) simplename winner payouts ) memberaccess ( simplename push ) simplename push ) memberaccess ( simplename payout ) simplename payout ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename time before jackpot ) simplename time before jackpot ( simplename time before jackpot reset ) simplename time before jackpot reset ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename jackpot last qualified ) simplename jackpot last qualified ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename jackpot count ) simplename jackpot count ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename game reseeds ) simplename game reseeds ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation
candidate: Claim all remaining tokens for this investor .
ref: Claim the Jackpot .

1050:
src: ( functiondefinition ( simplename remove account ) simplename remove account ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename ind ) simplename ind ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename ind ) simplename ind ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename ind ) simplename ind ( memberaccess ( simplename frozen accounts ) simplename frozen accounts ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename ind ) simplename ind ) variabledeclarationstatement ( whilestatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( functioncall ( memberaccess ( memberaccess ( simplename frozen accounts ) simplename frozen accounts ( simplename length ) simplename length ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename frozen accounts ) simplename frozen accounts ( simplename i ) simplename i ) indexaccess ( indexaccess ( simplename frozen accounts ) simplename frozen accounts ( functioncall ( memberaccess ( simplename i ) simplename i ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( functioncall ( memberaccess ( simplename i ) simplename i ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) whilestatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename frozen accounts ) simplename frozen accounts ( simplename length ) simplename length ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename frozen accounts ) simplename frozen accounts ( simplename length ) simplename length ) memberaccess ( simplename sub ) simplename sub ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: remove a new account address from the owner address .
ref: remove an account from the frozen accounts list .

1051:
src: ( functiondefinition ( simplename safe mult ) simplename safe mult ( visibility internal ) visibility internal ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename x ) simplename x ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename y ) simplename y ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename z ) simplename z ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation * ) binaryoperation * ( simplename x ) simplename x ( simplename y ) simplename y ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation || ) binaryoperation || ( tupleexpression ( binaryoperation == ) binaryoperation == ( simplename x ) simplename x ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( tupleexpression ( binaryoperation == ) binaryoperation == ( binaryoperation / ) binaryoperation / ( simplename z ) simplename z ( simplename x ) simplename x ( simplename y ) simplename y ) tupleexpression ) functioncall ) expressionstatement ( returnstatement ( simplename z ) simplename z ) returnstatement ) block ) functiondefinition
candidate: returns the product of multiplying _x by _y , asserts if the calculation overflows .
ref: dev Returns the product of a and b .

1052:
src: ( modifierdefinition ( simplename when crowdsale not ended ) simplename when crowdsale not ended ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename deadline ) simplename deadline ( simplename now ) simplename now ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to allow actions only when the crowdsale is not ended .
ref: modifier to allow actions only when the crowdsale has not ended .

1053:
src: ( functiondefinition ( simplename get namespace ) simplename get namespace ( visibility public ) visibility public ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename ns ) simplename ns ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( indexaccess ( simplename ptr ) simplename ptr ( simplename addr ) simplename addr ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename r ) simplename r ( simpletype ( simplename registry ) simplename registry ) simpletype ) variabledeclaration ( indexaccess ( simplename registry ) simplename registry ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename ns ) simplename ns ) functioncall ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename r ) simplename r ( simplename ttl ) simplename ttl ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename r ) simplename r ( simplename updated ) simplename updated ) memberaccess ( memberaccess ( simplename r ) simplename r ( simplename ttl ) simplename ttl ) memberaccess ( simplename now ) simplename now ( block ( returnstatement ( stringliteral 「STR」 ) stringliteral 「STR」 ) returnstatement ) block ) ifstatement ( returnstatement ( simplename ns ) simplename ns ) returnstatement ) block ) functiondefinition
candidate: Get the details for an address by a specific address .
ref: Gets the namespace for a provided address in the service locator .

1054:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: Transfer the balance from owner's account to another account .

1055:
src: ( functiondefinition ( simplename set start ) simplename set start ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( simplename start ) simplename start ( simplename deadline ) simplename deadline ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename start ) simplename start ( simplename start ) simplename start ) expressionstatement ( emitstatement ( functioncall ( simplename new start ) simplename new start ( simplename start ) simplename start ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ( modifierinvocation ( simplename when paused ) simplename when paused ) modifierinvocation ) functiondefinition
candidate: called by the owner to set the new pause flags pausedPublic can't be false while pausedOwnerAdmin is true .
ref: set new start date for crowdsale .

1056:
src: ( functiondefinition ( simplename reset pending contribution ) simplename reset pending contribution ( visibility private ) visibility private ( variabledeclaration ( simplename participant ) simplename participant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pending amount of eth ) simplename pending amount of eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename pending contribution of ) simplename pending contribution of ( simplename participant ) simplename participant ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename pending amount of parsecs ) simplename pending amount of parsecs ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename pending parsecs of ) simplename pending parsecs of ( simplename participant ) simplename participant ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pending contribution of ) simplename pending contribution of ( simplename participant ) simplename participant ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename pending contribution of ) simplename pending contribution of ( simplename participant ) simplename participant ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename pending amount of eth ) simplename pending amount of eth ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename pending parsecs of ) simplename pending parsecs of ( simplename participant ) simplename participant ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename pending parsecs of ) simplename pending parsecs of ( simplename participant ) simplename participant ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename pending amount of parsecs ) simplename pending amount of parsecs ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pending funding ) simplename pending funding ( functioncall ( memberaccess ( simplename pending funding ) simplename pending funding ( simplename sub ) simplename sub ) memberaccess ( simplename pending amount of eth ) simplename pending amount of eth ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pending parsecs ) simplename pending parsecs ( functioncall ( memberaccess ( simplename pending parsecs ) simplename pending parsecs ( simplename sub ) simplename sub ) memberaccess ( simplename pending amount of parsecs ) simplename pending amount of parsecs ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Register pending contribution .
ref: Reset pending contribution .

1057:
src: ( functiondefinition ( simplename remove connection ) simplename remove connection ( visibility external ) visibility external ( variabledeclaration ( simplename entity ) simplename entity ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename connection to ) simplename connection to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename connection type ) simplename connection type ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename resolved entity ) simplename resolved entity ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename resolve entity address and owner ) simplename resolve entity address and owner ( simplename entity ) simplename entity ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename resolved connection entity ) simplename resolved connection entity ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simplename resolve entity address ) simplename resolve entity address ( simplename connection to ) simplename connection to ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename emit entity resolution ) simplename emit entity resolution ( simplename connection to ) simplename connection to ( simplename resolved connection entity ) simplename resolved connection entity ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename entity ) simplename entity ( simpletype ( simplename entity ) simplename entity ) simpletype ) variabledeclaration ( indexaccess ( simplename entities ) simplename entities ( simplename resolved entity ) simplename resolved entity ) indexaccess ) variabledeclarationstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( indexaccess ( memberaccess ( simplename entity ) simplename entity ( simplename connections ) simplename connections ) memberaccess ( simplename resolved connection entity ) simplename resolved connection entity ) indexaccess ( simplename connection type ) simplename connection type ) indexaccess ) expressionstatement ( expressionstatement ( functioncall ( simplename connection removed ) simplename connection removed ( simplename entity ) simplename entity ( simplename connection to ) simplename connection to ( simplename connection type ) simplename connection type ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Removes a user from a contract .
ref: Removes a connection from the <UNK> <UNK> mapping .

1058:
src: ( functiondefinition ( simplename set doge ) simplename set doge ( visibility public ) visibility public ( variabledeclaration ( simplename new doge ) simplename new doge ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename new doge ) simplename new doge ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename doge address ) simplename doge address ( simplename new doge ) simplename new doge ) expressionstatement ) block ( modifierinvocation ( simplename only doge ) simplename only doge ) modifierinvocation ) functiondefinition
candidate: Assigns a new address to act as the COO .
ref: Assigns a new address to act as Doge .

1059:
src: ( functiondefinition ( simplename to string ) simplename to string ( visibility private ) visibility private ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename raw bytes ) simplename raw bytes ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) array ) variabledeclaration ( variabledeclaration ( simplename string length ) simplename string length ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename output string ) simplename output string ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename new ) simplename new ( simpletype ( simplename string ) simplename string ) simpletype ( simplename string length ) simplename string length ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename output ptr ) simplename output ptr ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename bytes ptr ) simplename bytes ptr ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) variabledeclarationstatement ( inlineassemblystatement ( assemblyblock ( assemblyassignment ( simplename output ptr ) simplename output ptr ( assemblycall ( simplename add ) simplename add ( simplename output string ) simplename output string ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) assemblycall ) assemblyassignment ( assemblyassignment ( simplename bytes ptr ) simplename bytes ptr ( simplename raw bytes ) simplename raw bytes ) assemblyassignment ) assemblyblock ) inlineassemblystatement ( expressionstatement ( functioncall ( simplename memcpy ) simplename memcpy ( simplename output ptr ) simplename output ptr ( simplename bytes ptr ) simplename bytes ptr ( simplename string length ) simplename string length ) functioncall ) expressionstatement ( returnstatement ( simplename output string ) simplename output string ) returnstatement ) block ) functiondefinition
candidate: Adapted from toString ( slice ) by arachnid ( Nick Johnson email protected ) .
ref: Adapted from toString ( slice ) by arachnid ( Nick Johnson email protected ) .

1060:
src: ( functiondefinition ( simplename assign initial days ) simplename assign initial days ( visibility public ) visibility public ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename token id ) simplename token id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename token id ) simplename token id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename price ) simplename price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename day index to price ) simplename day index to price ( simplename token id ) simplename token id ) indexaccess ( simplename price ) simplename price ) expressionstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename only during migration ) simplename only during migration ) modifierinvocation ) functiondefinition
candidate: To call this function to release a token .
ref: Assigns initial days to owners during minting period .

1061:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility public ) visibility public ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename revenue ) simplename revenue ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( simplename safe mul ) simplename safe mul ( simplename amount ) simplename amount ( simplename sell price ) simplename sell price ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename revenue ) simplename revenue ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( indexaccess ( simplename callers ) simplename callers ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Sell amount tokens to contract .
ref: Sell amount tokens to contract .

1062:
src: ( functiondefinition ( simplename get user by id ) simplename get user by id ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename wallet ) simplename wallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename username ) simplename username ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename id ) simplename id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename username ) simplename username ( indexaccess ( simplename user idto username ) simplename user idto username ( simplename id ) simplename id ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wallet ) simplename wallet ( indexaccess ( simplename user ids to wallet ) simplename user ids to wallet ( simplename id ) simplename id ) indexaccess ) expressionstatement ( returnstatement ( tupleexpression ( simplename wallet ) simplename wallet ( simplename username ) simplename username ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: Get the id of the last user .
ref: All functions that get us stuff .

1063:
src: ( functiondefinition ( simplename update ) simplename update ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename dapp id ) simplename dapp id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename totals ) simplename totals ( simplename dapp id ) simplename dapp id ) indexaccess ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename totals ) simplename totals ( simplename dapp id ) simplename dapp id ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename last address ) simplename last address ( simplename transfer ) simplename transfer ) memberaccess ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename last address ) simplename last address ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) expressionstatement ) block ) functiondefinition
candidate: Function used to update the updating the data .
ref: update heart count .

1064:
src: ( functiondefinition ( simplename edit restricted address ) simplename edit restricted address ( visibility default ) visibility default ( variabledeclaration ( simplename new restricted address ) simplename new restricted address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename r addresses ) simplename r addresses ( simplename new restricted address ) simplename new restricted address ) indexaccess ( unaryoperation ! ) unaryoperation ! ( indexaccess ( simplename r addresses ) simplename r addresses ( simplename new restricted address ) simplename new restricted address ) indexaccess ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Owner can add new restricted address or removes one .
ref: Owner can add new restricted address or removes one .

1065:
src: ( functiondefinition ( simplename get feed ) simplename get feed ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ( variabledeclaration ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename game id ) simplename game id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename page ) simplename page ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename page size ) simplename page size ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ( block ( returnstatement ( functioncall ( simplename construct response ) simplename construct response ( functioncall ( simplename get <UNK> ) simplename get <UNK> ( simplename game id ) simplename game id ( binaryoperation - ) binaryoperation - ( simplename page ) simplename page ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename page size ) simplename page size ) functioncall ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Return list of players .
ref: Get the activity feed for all games .

1066:
src: ( functiondefinition ( simplename add contract ) simplename add contract ( visibility public ) visibility public ( variabledeclaration ( simplename contract title ) simplename contract title ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename document title ) simplename document title ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename version ) simplename version ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename description ) simplename description ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename participant ) simplename participant ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename <UNK> ) simplename <UNK> ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename owner ) simplename owner ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename contract count ) simplename contract count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename contracts ) simplename contracts ( simplename contract count ) simplename contract count ) indexaccess ( functioncall ( simplename contract ) simplename contract ( simplename contract count ) simplename contract count ( simplename contract title ) simplename contract title ( simplename document title ) simplename document title ( simplename version ) simplename version ( simplename description ) simplename description ( simplename participant ) simplename participant ( simplename <UNK> ) simplename <UNK> ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename contract created ) simplename contract created ( simplename contract count ) simplename contract count ( simplename participant ) simplename participant ) functioncall ) emitstatement ) block ) functiondefinition
candidate: Add to the amount to the contract storage .
ref: A contract can be only added by owner and user must exist ; .

1067:
src: ( functiondefinition ( simplename withdraw non top ) simplename withdraw non top ( visibility public ) visibility public ( variabledeclaration ( simplename round index ) simplename round index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename is complete active ) simplename is complete active ) memberaccess ( booleanliteral true ) booleanliteral true ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename is open ) simplename is open ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename round index ) simplename round index ) indexaccess ( simplename withdrawable ) simplename withdrawable ) memberaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is active ) simplename is active ) memberaccess ( booleanliteral false ) booleanliteral false ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is withdrawn ) simplename is withdrawn ) memberaccess ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename is withdrawn ) simplename is withdrawn ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename withdraw ) simplename withdraw ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename round index ) simplename round index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( memberaccess ( indexaccess ( indexaccess ( simplename nami pool ) simplename nami pool ( simplename round index ) simplename round index ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename stake ) simplename stake ) memberaccess ( simplename now ) simplename now ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename withdraw nac ) simplename withdraw nac ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename round index ) simplename round index ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: withdraw NAC for investor .
ref: withdraw NAC and ETH for non top investor execute by investor .

1068:
src: ( functiondefinition ( simplename pay bonus ) simplename pay bonus ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename addr ) simplename addr ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total wei ) simplename total wei ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename addr ) simplename addr ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename account ) simplename account ( simpletype ( simplename account ) simplename account ) simpletype ) variabledeclaration ( functioncall ( simplename update account ) simplename update account ( indexaccess ( simplename addr ) simplename addr ( simplename i ) simplename i ) indexaccess ( memberaccess ( simplename update mode ) simplename update mode ( simplename wei ) simplename wei ) memberaccess ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation >= ) binaryoperation >= ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( memberaccess ( simplename account ) simplename account ( simplename last airdrop claim time ) simplename last airdrop claim time ) memberaccess ( simplename redistribution timeout ) simplename redistribution timeout ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename total wei ) simplename total wei ( memberaccess ( simplename account ) simplename account ( simplename bonus wei ) simplename bonus wei ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename account ) simplename account ( simplename bonus wei ) simplename bonus wei ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename account ) simplename account ( simplename last airdrop claim time ) simplename last airdrop claim time ) memberaccess ( simplename now ) simplename now ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ) block ) forstatement ( expressionstatement ( functioncall ( simplename payout ) simplename payout ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename add ) simplename add ) memberaccess ( simplename total wei ) simplename total wei ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Pay bonus to address .
ref: anybody can pay and add address that will be checked if they can be added to the bonus .

1069:
src: ( functiondefinition ( simplename transfer for admin ) simplename transfer for admin ( visibility external ) visibility external ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename account ) simplename account ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename token address2 id ) simplename token address2 id ( simplename token ) simplename token ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( indexaccess ( simplename user address2 id ) simplename user address2 id ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename add user ) simplename add user ( simplename account ) simplename account ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token ) simplename token ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token ) simplename token ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token ) simplename token ) indexaccess ( simplename account ) simplename account ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token ) simplename token ) indexaccess ( simplename account ) simplename account ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only admin ) simplename only admin ) modifierinvocation ) functiondefinition
candidate: Transfer the balance from owner's account to another account .
ref: transfer token from admin to users .

1070:
src: ( functiondefinition ( simplename releasable amount ) simplename releasable amount ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( functioncall ( simplename vested amount ) simplename vested amount ( simplename recipient ) simplename recipient ) functioncall ( memberaccess ( indexaccess ( simplename beneficiaries ) simplename beneficiaries ( simplename recipient ) simplename recipient ) indexaccess ( simplename amount claimed ) simplename amount claimed ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( simplename vested amount ) simplename vested amount ( simplename recipient ) simplename recipient ) functioncall ( memberaccess ( indexaccess ( simplename beneficiaries ) simplename beneficiaries ( simplename recipient ) simplename recipient ) indexaccess ( simplename total allocated ) simplename total allocated ) memberaccess ) functioncall ) expressionstatement ( returnstatement ( functioncall ( simplename sub ) simplename sub ( functioncall ( simplename vested amount ) simplename vested amount ( simplename recipient ) simplename recipient ) functioncall ( memberaccess ( indexaccess ( simplename beneficiaries ) simplename beneficiaries ( simplename recipient ) simplename recipient ) indexaccess ( simplename amount claimed ) simplename amount claimed ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: Calculates the amount that has already vested but hasn't been released yet .
ref: Calculates the amount that has already vested but hasn't been released yet .

1071:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename valid destination ) simplename valid destination ( simplename to ) simplename to ) modifierinvocation ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ) functiondefinition
candidate: Transfer from one address to another with pause feature for owner .
ref: Transfer from from account to to account using allowance in from account to the sender .

1072:
src: ( functiondefinition ( simplename owns all ) simplename owns all ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename proposed ) simplename proposed ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename ids ) simplename ids ( array ( simpletype ( simplename uint ) simplename uint ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename ids ) simplename ids ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename ids ) simplename ids ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename owns ) simplename owns ( simplename proposed ) simplename proposed ( indexaccess ( simplename ids ) simplename ids ( simplename i ) simplename i ) indexaccess ) functioncall ( block ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: whether proposed owns all of the cards .
ref: whether proposed owns all of the cards .

1073:
src: ( functiondefinition ( simplename buy core ) simplename buy core ( visibility private ) visibility private ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename f3 ddatasets event returns ) simplename f3 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename strt ) simplename strt ) memberaccess ( simplename rnd gap ) simplename rnd gap ( tupleexpression ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( tupleexpression ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ( block ( emitstatement ( functioncall ( simplename on <UNK> str ) simplename on <UNK> str ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename on <UNK> int ) simplename on <UNK> int ( simplename p id ) simplename p id ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename on <UNK> int ) simplename on <UNK> int ( simplename team ) simplename team ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename core ) simplename core ( simplename r id ) simplename r id ( simplename p id ) simplename p id ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename aff id ) simplename aff id ( simplename team ) simplename team ( simplename event data ) simplename event data ) functioncall ) expressionstatement ) block ( block ( emitstatement ( functioncall ( simplename on <UNK> str ) simplename on <UNK> str ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename on <UNK> int ) simplename on <UNK> int ( simplename p id ) simplename p id ) functioncall ) emitstatement ( emitstatement ( functioncall ( simplename on <UNK>
candidate: logic runs whenever a buy order is executed .
ref: logic runs whenever a buy order is executed .

1074:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename amount ) simplename amount ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation > ) binaryoperation > ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename to ) simplename to ( simplename amount ) simplename amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: transfer token for a specified address .
ref: transfer token for a specified address .

1075:
src: ( functiondefinition ( simplename owner safe withdrawal ) simplename owner safe withdrawal ( visibility external ) visibility external ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename balance to send ) simplename balance to send ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename transfer ) simplename transfer ) memberaccess ( simplename balance to send ) simplename balance to send ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( simplename beneficiary ) simplename beneficiary ( simplename balance to send ) simplename balance to send ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename soft cap raised ) simplename soft cap raised ) modifierinvocation ( modifierinvocation ( simplename non reentrant ) simplename non reentrant ) modifierinvocation ) functiondefinition
candidate: Function for funds withdrawal .
ref: The owner can call this function to withdraw the funds that have been sent to this contract .

1076:
src: ( functiondefinition ( simplename change veredictum ) simplename change veredictum ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename addr ) simplename addr ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename veredictum ) simplename veredictum ( simplename addr ) simplename addr ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename no reentry ) simplename no reentry ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: change if no more than _value tokens .
ref: Change the address of the <UNK> contract address .

1077:
src: ( functiondefinition ( simplename create dividend with checkpoint ) simplename create dividend with checkpoint ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename maturity ) simplename maturity ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename expiry ) simplename expiry ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename checkpoint id ) simplename checkpoint id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename expiry ) simplename expiry ( simplename maturity ) simplename maturity ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename expiry ) simplename expiry ( simplename now ) simplename now ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename checkpoint id ) simplename checkpoint id ( functioncall ( memberaccess ( functioncall ( simplename isecurity token ) simplename isecurity token ( simplename security token ) simplename security token ) functioncall ( simplename current checkpoint id ) simplename current checkpoint id ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename dividend index ) simplename dividend index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename dividends ) simplename dividends ( simplename length ) simplename length ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename current supply ) simplename current supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( simplename isecurity token ) simplename isecurity token ( simplename security token ) simplename security token ) functioncall ( simplename total supply at ) simplename total supply at ) memberaccess ( simplename checkpoint id ) simplename checkpoint id ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( functioncall ( simplename erc20 ) simplename erc20 ( simplename token ) simplename token ) functioncall ( simplename transfer from ) simplename transfer from ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename amount ) simplename amount ) functioncall ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename dividends ) simplename dividends ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename dividend ) simplename dividend ( simplename checkpoint id ) simplename checkpoint id ( simplename now ) simplename now ( simplename maturity ) simplename maturity ( simplename expiry ) simplename expiry ( simplename token ) simplename token ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename current supply ) simplename current supply ( booleanliteral false ) booleanliteral false ) functioncall ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename erc20 dividend deposited ) simplename erc20 dividend deposited ( memberaccess ( simplename msg ) simplename msg ( simplename
candidate: Creates a dividend with their dividend with a dividend and dividend payment .
ref: Creates a dividend with a provided checkpoint .

1078:
src: ( functiondefinition ( simplename change frozen balance ) simplename change frozen balance ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename recipient ) simplename recipient ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename defrosted amount ) simplename defrosted amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename recipient ) simplename recipient ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename defrosted amount ) simplename defrosted amount ( indexaccess ( simplename frozen balance ) simplename frozen balance ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( indexaccess ( simplename frostbite ) simplename frostbite ( simplename recipient ) simplename recipient ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename frozen balance ) simplename frozen balance ( simplename recipient ) simplename recipient ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename frozen balance ) simplename frozen balance ( simplename recipient ) simplename recipient ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename defrosted amount ) simplename defrosted amount ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename frozen balance changed ) simplename frozen balance changed ( simplename recipient ) simplename recipient ( simplename defrosted amount ) simplename defrosted amount ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to change the balance of a recipient account .
ref: <UNK> function allows the owner of the smart contract to change individual particular frozen balances .

1079:
src: ( functiondefinition ( simplename invest ) simplename invest ( visibility default ) visibility default ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid investment ) simplename valid investment ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename invested amount ) simplename invested amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename investments ) simplename investments ( simplename beneficiary ) simplename beneficiary ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename invested amount ) simplename invested amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename investments ) simplename investments ( simplename beneficiary ) simplename beneficiary ) indexaccess ( binaryoperation + ) binaryoperation + ( simplename invested amount ) simplename invested amount ( simplename wei amount ) simplename wei amount ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( memberaccess ( simplename investors ) simplename investors ( simplename push ) simplename push ) memberaccess ( simplename beneficiary ) simplename beneficiary ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename number of investors ) simplename number of investors ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename investments ) simplename investments ( simplename beneficiary ) simplename beneficiary ) indexaccess ( simplename wei amount ) simplename wei amount ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token investment ) simplename token investment ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Allow anonymous contributions to this crowdsale .
ref: Participate in the crowdsale .

1080:
src: ( functiondefinition ( simplename get airdrop ) simplename get airdrop ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( functioncall ( memberaccess ( simplename total supply ) simplename total supply ( simplename add ) simplename add ) memberaccess ( simplename drop amount ) simplename drop amount ) functioncall ( simplename actual cap ) simplename actual cap ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename drop amount ) simplename drop amount ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename when not locked ) simplename when not locked ) modifierinvocation ( modifierinvocation ( simplename can mint ) simplename can mint ) modifierinvocation ( modifierinvocation ( simplename when dropable ) simplename when dropable ) modifierinvocation ) functiondefinition
candidate: Function to get airdrop .
ref: get airdrop function one can get airdrop by themselves as long as they are willing to pay gas .

1081:
src: ( functiondefinition ( simplename view funds ) simplename view funds ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename wallet ) simplename wallet ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( memberaccess ( indexaccess ( simplename <UNK> ) simplename <UNK> ( simplename wallet ) simplename wallet ) indexaccess ( simplename token amount ) simplename token amount ) memberaccess ) returnstatement ) block ) functiondefinition
candidate: return the amount of tokens for a given address .
ref: Release / Refund <UNK> .

1082:
src: ( functiondefinition ( simplename deliver tokens ) simplename deliver tokens ( visibility internal ) visibility internal ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token amount ) simplename token amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename pausable ) simplename pausable ( simplename token ) simplename token ) functioncall ( simplename unpause ) simplename unpause ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer from ) simplename transfer from ) memberaccess ( simplename token wallet ) simplename token wallet ( simplename beneficiary ) simplename beneficiary ( simplename token amount ) simplename token amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename pausable ) simplename pausable ( simplename token ) simplename token ) functioncall ( simplename pause ) simplename pause ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfer tokens from the beneficiary address to receive the from the beneficiary address .
ref: Overrides parent behavior by transferring tokens from wallet .

1083:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility private ) visibility private ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename to ) simplename to ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename person index to owner ) simplename person index to owner ( simplename token id ) simplename token id ) indexaccess ( simplename to ) simplename to ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename person owner history ) simplename person owner history ( simplename token id ) simplename token id ) indexaccess ( simplename push ) simplename push ) memberaccess ( simplename to ) simplename to ) functioncall ) expressionstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename from ) simplename from ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( indexaccess ( simplename ownership token count ) simplename ownership token count ( simplename from ) simplename from ) indexaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( simplename person index to approved ) simplename person index to approved ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename token id ) simplename token id ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Assigns ownership of a specific Person to an address .
ref: Assigns ownership of a specific Person to an address .

1084:
src: ( functiondefinition ( simplename wei allowed to receive ) simplename wei allowed to receive ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename <UNK> amount ) simplename <UNK> amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename wei funding cap ) simplename wei funding cap ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( returnstatement ( simplename <UNK> amount ) simplename <UNK> amount ) returnstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total ) simplename total ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename <UNK> amount ) simplename <UNK> amount ( simplename add ) simplename add ) memberaccess ( simplename wei raised ) simplename wei raised ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation < ) binaryoperation < ( simplename total ) simplename total ( simplename wei funding cap ) simplename wei funding cap ( returnstatement ( simplename <UNK> amount ) simplename <UNK> amount ) returnstatement ( returnstatement ( functioncall ( memberaccess ( simplename wei funding cap ) simplename wei funding cap ( simplename sub ) simplename sub ) memberaccess ( simplename wei raised ) simplename wei raised ) functioncall ) returnstatement ) ifstatement ) block ) functiondefinition
candidate: Function to check the amount of tokens that an owner allowed to a spender .
ref: We set an upper bound for the sold tokens by limiting ether raised .

1085:
src: ( functiondefinition ( simplename token creation cap update ) simplename token creation cap update ( visibility external ) visibility external ( variabledeclaration ( simplename new val ) simplename new val ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token creation cap ) simplename token creation cap ( simplename new val ) simplename new val ) expressionstatement ) block ( modifierinvocation ( simplename is owner ) simplename is owner ) modifierinvocation ) functiondefinition
candidate: function for updating the USD cap for a new value .
ref: Emission cap setting up .

1086:
src: ( functiondefinition ( simplename token fallback ) simplename token fallback ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename initialized ) simplename initialized ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename is contract ) simplename is contract ( simplename from ) simplename from ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename elyxr balance ) simplename elyxr balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename my tokens ) simplename my tokens ) memberaccess ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename eggs bought ) simplename eggs bought ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename calculate egg buy ) simplename calculate egg buy ( simplename value ) simplename value ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename elyxr balance ) simplename elyxr balance ( simplename value ) simplename value ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename eggs bought ) simplename eggs bought ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename sub ) simplename sub ) memberaccess ( simplename eggs bought ) simplename eggs bought ( functioncall ( simplename dev fee ) simplename dev fee ( simplename eggs bought ) simplename eggs bought ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename reinvest ) simplename reinvest ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token contract ) simplename token contract ( simplename transfer ) simplename transfer ) memberaccess ( simplename ceo address ) simplename ceo address ( functioncall ( simplename dev fee ) simplename dev fee ( simplename value ) simplename value ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename claimed eggs ) simplename claimed eggs ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( simplename safe math ) simplename safe math ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename claimed eggs ) simplename claimed eggs ( simplename from ) simplename from ) indexaccess ( simplename eggs bought ) simplename eggs bought ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only token contract ) simplename only token contract ) modifierinvocation ) functiondefinition
candidate: Standard ERC677 function that will handle incoming token transfers .
ref: Standard ERC677 function that will handle incoming token transfers .

1087:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename set allowance ) simplename set allowance ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Approve spender to spend the specified amount of tokens on behalf of msg . sender .
ref: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .

1088:
src: ( functiondefinition ( simplename add token ) simplename add token ( visibility public ) visibility public ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price ) simplename price ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation != ) binaryoperation != ( simplename token ) simplename token ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( simplename amount ) simplename amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename assert ) simplename assert ( binaryoperation > ) binaryoperation > ( simplename price ) simplename price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename is new token ) simplename is new token ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( booleanliteral true ) booleanliteral true ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename allowed tokens ) simplename allowed tokens ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename allowed tokens ) simplename allowed tokens ( simplename i ) simplename i ) indexaccess ( simplename token ) simplename token ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is new token ) simplename is new token ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ) ifstatement ) block ) forstatement ( ifstatement ( simplename is new token ) simplename is new token ( block ( expressionstatement ( functioncall ( memberaccess ( simplename allowed tokens ) simplename allowed tokens ( simplename push ) simplename push ) memberaccess ( simplename token ) simplename token ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token allowed ) simplename token allowed ( simplename token ) simplename token ) indexaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token price ) simplename token price ( simplename token ) simplename token ) indexaccess ( simplename price ) simplename price ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename token amount ) simplename token amount ( simplename token ) simplename token ) indexaccess ( simplename amount ) simplename amount ) expressionstatement ) block ( modifierinvocation ( simplename only manager ) simplename only manager ) modifierinvocation ) functiondefinition
candidate: Transfer amount of tokens to a new token .
ref: _price is price of amount of token .

1089:
src: ( functiondefinition ( simplename block pending tx ) simplename block pending tx ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename tx idx ) simplename tx idx ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename re mutex ) simplename re mutex ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation || ) binaryoperation || ( binaryoperation >= ) binaryoperation >= ( memberaccess ( indexaccess ( simplename holders ) simplename holders ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename token balance ) simplename token balance ) memberaccess ( binaryoperation / ) binaryoperation / ( simplename total supply ) simplename total supply ( simplename <UNK> ) simplename <UNK> ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( indexaccess ( simplename pending txs ) simplename pending txs ( simplename ptx tail ) simplename ptx tail ) indexaccess ( simplename from ) simplename from ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename trustee ) simplename trustee ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename pending txs ) simplename pending txs ( simplename tx idx ) simplename tx idx ) indexaccess ( simplename blocked ) simplename blocked ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename transaction blocked ) simplename transaction blocked ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename tx idx ) simplename tx idx ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: _value number of tokens to _to .
ref: To block a pending transaction .

1090:
src: ( functiondefinition ( simplename new carnita ) simplename new carnita ( visibility internal ) visibility internal ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename carnitas ) simplename carnitas ( simplename last carnita ) simplename last carnita ) indexaccess ( simplename active ) simplename active ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename temp ) simplename temp ( simpletype ( simplename carnita ) simplename carnita ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename temp ) simplename temp ( simplename max people ) simplename max people ) memberaccess ( simplename current people ) simplename current people ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename temp ) simplename temp ( simplename active ) simplename active ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename temp ) simplename temp ( simplename raised ) simplename raised ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename temp ) simplename temp ( simplename min ) simplename min ) memberaccess ( simplename price carnita ) simplename price carnita ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename carnitas ) simplename carnitas ( simplename push ) simplename push ) memberaccess ( simplename temp ) simplename temp ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename last carnita ) simplename last carnita ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) functiondefinition
candidate: admin initiates that game contract was created .
ref: generate new <UNK> .

1091:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename safe sub ) simplename safe sub ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( simplename safe add ) simplename safe add ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename tokens ) simplename tokens ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename check lock ) simplename check lock ( simplename from ) simplename from ) modifierinvocation ) functiondefinition
candidate: Transfer tokens from the from account to the to account .
ref: Transfer tokens from the from account to the to account .

1092:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename pre validate purchase ) simplename pre validate purchase ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename left ) simplename left ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get token amount ) simplename get token amount ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei earned ) simplename wei earned ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename sub ) simplename sub ) memberaccess ( simplename left ) simplename left ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus ) simplename bonus ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get bonus ) simplename get bonus ( simplename tokens ) simplename tokens ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename with bonus ) simplename with bonus ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename add ) simplename add ) memberaccess ( simplename bonus ) simplename bonus ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename left ) simplename left ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename send ) simplename send ) memberaccess ( simplename left ) simplename left ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei earned ) simplename wei earned ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename process purchase ) simplename process purchase ( simplename beneficiary ) simplename beneficiary ( simplename with bonus ) simplename with bonus ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename purchase ) simplename purchase ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( simplename wei earned ) simplename wei earned ( simplename tokens ) simplename tokens ( simplename bonus ) simplename bonus ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) emitstatement ( expressionstatement ( functioncall ( simplename update purchasing state ) simplename update purchasing state ( simplename beneficiary ) simplename beneficiary ( simplename wei earned ) simplename wei earned ( simplename with bonus ) simplename
candidate: low level token purchase * * * DO NOT OVERRIDE .
ref: low level token purchase * * * DO NOT OVERRIDE .

1093:
src: ( functiondefinition ( simplename startmetadollar ) simplename startmetadollar ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre ico is running ) simplename pre ico is running ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename minimal goal reached ) simplename minimal goal reached ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename ico is closed ) simplename ico is closed ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename token balance of ) simplename token balance of ( simplename this ) simplename this ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename owner ) simplename owner ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename this ) simplename this ) indexaccess ( simplename supervisor ) simplename supervisor ) indexaccess ( simplename total supply ) simplename total supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current token price ) simplename current token price ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename pre icoprice ) simplename pre icoprice ( binaryoperation * ) binaryoperation * ( tupleexpression ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) tupleexpression ( simplename pre mtd rate ) simplename pre mtd rate ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename icoprice ) simplename icoprice ( binaryoperation * ) binaryoperation * ( tupleexpression ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) tupleexpression ( simplename mtd rate ) simplename mtd rate ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename sell price ) simplename sell price ( binaryoperation * ) binaryoperation * ( tupleexpression ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) tupleexpression ( simplename sell rate ) simplename sell rate ) expressionstatement ( expressionstatement ( functioncall ( simplename update prices ) simplename update prices ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Constructor of the contract .
ref: Constructor of the contract .

1094:
src: ( functiondefinition ( simplename transfer ) simplename transfer ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename to address ) simplename to address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename regular phase ) simplename regular phase ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename customer address ) simplename customer address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount of front end tokens ) simplename amount of front end tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename amount of tokens ) simplename amount of tokens ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename amount of tokens ) simplename amount of tokens ( simplename min token transfer ) simplename min token transfer ( binaryoperation <= ) binaryoperation <= ( simplename amount of tokens ) simplename amount of tokens ( indexaccess ( simplename front token balance ledger ) simplename front token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( functioncall ( simplename my dividends ) simplename my dividends ( booleanliteral true ) booleanliteral true ) functioncall ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( simplename withdraw ) simplename withdraw ( simplename customer address ) simplename customer address ) functioncall ) expressionstatement ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount of div tokens ) simplename amount of div tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( functioncall ( memberaccess ( simplename amount of front end tokens ) simplename amount of front end tokens ( simplename mul ) simplename mul ) memberaccess ( functioncall ( simplename get user average dividend rate ) simplename get user average dividend rate ( simplename customer address ) simplename customer address ) functioncall ) functioncall ( simplename div ) simplename div ) memberaccess ( simplename magnitude ) simplename magnitude ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename front token balance ledger ) simplename front token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename front token balance ledger ) simplename front token balance ledger ( simplename customer address ) simplename customer address ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename amount of front end tokens ) simplename amount of front end tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename front token balance ledger ) simplename front token balance ledger ( simplename to address ) simplename to address ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename front token balance ledger ) simplename front token balance ledger ( simplename to address ) simplename to address ) indexaccess ( simplename add )
candidate: Transfer tokens from the caller to a new holder .
ref: Transfer tokens from the caller to a new holder .

1095:
src: ( functiondefinition ( simplename extended any asset has changes ) simplename extended any asset has changes ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( ifstatement ( simplename initialized ) simplename initialized ( block ) block ) ifstatement ( returnstatement ( booleanliteral false ) booleanliteral false ) returnstatement ) block ) functiondefinition
candidate: Returns true if the slice is empty ( has a length of 0 ) .
ref: use this when extending has changes .

1096:
src: ( modifierdefinition ( simplename only bonding manager or jobs manager ) simplename only bonding manager or jobs manager ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename get contract ) simplename get contract ) memberaccess ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) functioncall ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( memberaccess ( simplename controller ) simplename controller ( simplename get contract ) simplename get contract ) memberaccess ( functioncall ( simplename keccak256 ) simplename keccak256 ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Checks if sender is call a function with this modifier .
ref: Checks if caller is either BondingManager or JobsManager .

1097:
src: ( functiondefinition ( simplename create token contract ) simplename create token contract ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simpletype ( simplename mintable token ) simplename mintable token ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( simpletype ( simplename <UNK> token ) simplename <UNK> token ) simpletype ) functioncall ) returnstatement ) block ) functiondefinition
candidate: creates the token to be sold .
ref: creates the token to be sold .

1098:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility internal ) visibility internal ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename approved ) simplename approved ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename property index to approved ) simplename property index to approved ( simplename token id ) simplename token id ) indexaccess ( simplename approved ) simplename approved ) expressionstatement ) block ) functiondefinition
candidate: Marks an address as being approved for transferFrom ( ) , overwriting any previous approval .
ref: Marks an address as being approved for transferFrom ( ) , overwriting any previous approval .

1099:
src: ( functiondefinition ( simplename <UNK> b ) simplename <UNK> b ( visibility default ) visibility default ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename initial supply ) simplename initial supply ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename name ) simplename name ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename decimals ) simplename decimals ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename symbol ) simplename symbol ( stringliteral 「STR」 ) stringliteral 「STR」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename initial supply ) simplename initial supply ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total supply ) simplename total supply ( simplename initial supply ) simplename initial supply ) expressionstatement ) block ) functiondefinition
candidate: Initializes contract with initial supply tokens to the creator of the contract .
ref: Initializes contract with initial supply tokens to the creator of the contract .

1100:
src: ( functiondefinition ( simplename finish canvas if needed ) simplename finish canvas if needed ( visibility private ) visibility private ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename canvas ) simplename canvas ( simpletype ( simplename canvas ) simplename canvas ) simpletype ) variabledeclaration ( variabledeclaration ( simplename canvas id ) simplename canvas id ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( block ( ifstatement ( functioncall ( simplename is canvas finished ) simplename is canvas finished ( simplename canvas ) simplename canvas ) functioncall ( block ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( simplename active canvas count ) simplename active canvas count ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename canvas ) simplename canvas ( simplename state ) simplename state ) memberaccess ( simplename state initial bidding ) simplename state initial bidding ) expressionstatement ( emitstatement ( functioncall ( simplename canvas finished ) simplename canvas finished ( simplename canvas id ) simplename canvas id ) functioncall ) emitstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Finish canvas .
ref: Marks canvas as finished if all the pixels has been already set .

1101:
src: ( functiondefinition ( simplename sell ) simplename sell ( visibility internal ) visibility internal ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename num ethers before fee ) simplename num ethers before fee ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( functioncall ( simplename get ether for tokens ) simplename get ether for tokens ( simplename amount ) simplename amount ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename fee ) simplename fee ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename trickle ) simplename trickle ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename total bond supply ) simplename total bond supply ( indexaccess ( simplename bond holdings ) simplename bond holdings ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee ) simplename fee ( functioncall ( simplename flux feed ) simplename flux feed ( simplename num ethers before fee ) simplename num ethers before fee ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename trickle ) simplename trickle ( functioncall ( simplename div ) simplename div ( simplename fee ) simplename fee ( simplename trick tax ) simplename trick tax ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fee ) simplename fee ( functioncall ( simplename sub ) simplename sub ( simplename fee ) simplename fee ( simplename trickle ) simplename trickle ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename trickling ) simplename trickling ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( simplename add ) simplename add ( indexaccess ( simplename trickling ) simplename trickling ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename trickle ) simplename trickle ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename trickling sum ) simplename trickling sum ( functioncall ( simplename add ) simplename add ( simplename trickling sum ) simplename trickling sum ( simplename trickle ) simplename trickle ) functioncall ) expressionstatement ) block ) ifstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename num ethers ) simplename num ethers ( simpletype ( simplename var ) simplename var ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( simplename num ethers before fee ) simplename num ethers before fee ( tupleexpression ( binaryoperation + ) binaryoperation + ( simplename fee ) simplename fee ( simplename trickle ) simplename trickle ) tupleexpression ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename mint ) simplename mint ( functioncall ( simplename mul ) simplename mul ( functioncall ( simplename div ) simplename div ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename average buy in price ) simplename average buy in price ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename
candidate: Sell function that takes tokens and converts them into Ether .
ref: Sell function that takes tokens and converts them into Ether .

1102:
src: ( functiondefinition ( simplename change token address ) simplename change token address ( visibility external ) visibility external ( variabledeclaration ( simplename token ) simplename token ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename token ) simplename token ( functioncall ( simplename erc20 ) simplename erc20 ( simplename token ) simplename token ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to change the token address .
ref: Last minute add just in case I somehow manage to set the wrong token address on deployment .

1103:
src: ( functiondefinition ( simplename re load core ) simplename re load core ( visibility private ) visibility private ( variabledeclaration ( simplename p id ) simplename p id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename aff id ) simplename aff id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename team ) simplename team ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename eth ) simplename eth ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename event data ) simplename event data ( simpletype ( simplename cae4 ddatasets event returns ) simplename cae4 ddatasets event returns ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename r id ) simplename r id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename r id ) simplename r id ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now ) simplename now ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( simplename now ) simplename now ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( binaryoperation + ) binaryoperation + ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename strt ) simplename strt ) memberaccess ( simplename rnd gap ) simplename rnd gap ( tupleexpression ( binaryoperation || ) binaryoperation || ( binaryoperation <= ) binaryoperation <= ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( tupleexpression ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end ) simplename end ) memberaccess ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename plyr ) simplename plyr ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) tupleexpression ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename plyr ) simplename plyr ( simplename p id ) simplename p id ) indexaccess ( simplename gen ) simplename gen ) memberaccess ( functioncall ( memberaccess ( functioncall ( simplename withdraw earnings ) simplename withdraw earnings ( simplename p id ) simplename p id ) functioncall ( simplename sub ) simplename sub ) memberaccess ( simplename eth ) simplename eth ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename core ) simplename core ( simplename r id ) simplename r id ( simplename p id ) simplename p id ( simplename eth ) simplename eth ( simplename aff id ) simplename aff id ( simplename team ) simplename team ( simplename event data ) simplename event data ) functioncall ) expressionstatement ) block ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation > ) binaryoperation > ( simplename now ) simplename now ( memberaccess ( indexaccess ( simplename round ) simplename round ( simplename r id ) simplename r id ) indexaccess ( simplename end )
candidate: logic runs whenever a reload order is executed .
ref: logic runs whenever a reload order is executed .

1104:
src: ( functiondefinition ( simplename link to gateway ) simplename link to gateway ( visibility external ) visibility external ( variabledeclaration ( simplename gateway interface address ) simplename gateway interface address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename source code url ) simplename source code url ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename gateway interface address ) simplename gateway interface address ( simplename gateway interface address ) simplename gateway interface address ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename source code url ) simplename source code url ( simplename source code url ) simplename source code url ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename gateway interface entity ) simplename gateway interface entity ( functioncall ( simplename <UNK> interface ) simplename <UNK> interface ( simplename gateway interface address ) simplename gateway interface address ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename gateway interface entity ) simplename gateway interface entity ( simplename request code upgrade ) simplename request code upgrade ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( simplename this ) simplename this ) functioncall ( simplename source code url ) simplename source code url ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename require no parent ) simplename require no parent ) modifierinvocation ( modifierinvocation ( simplename require not initialised ) simplename require not initialised ) modifierinvocation ( modifierinvocation ( simplename only deployer ) simplename only deployer ) modifierinvocation ) functiondefinition
candidate: Authorizes an address .
ref: Initialize Application and it's assets .

1105:
src: ( functiondefinition ( simplename process purchase ) simplename process purchase ( visibility public ) visibility public ( variabledeclaration ( simplename results ) simplename results ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename manager ) simplename manager ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename results ) simplename results ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename user address ) simplename user address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( binaryoperation >> ) binaryoperation >> ( indexaccess ( simplename results ) simplename results ( simplename i ) simplename i ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename user ) simplename user ( simpletype ( simplename info ) simplename info ) simpletype ) variabledeclaration ( indexaccess ( simplename users ) simplename users ( simplename user address ) simplename user address ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename user ) simplename user ( simplename wei paid ) simplename wei paid ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( tupleexpression ( binaryoperation & ) binaryoperation & ( indexaccess ( simplename results ) simplename results ( simplename i ) simplename i ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename wei liquid ) simplename wei liquid ( memberaccess ( simplename user ) simplename user ( simplename wei paid ) simplename wei paid ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename transfer ) simplename transfer ) memberaccess ( simplename user address ) simplename user address ( memberaccess ( simplename user ) simplename user ( simplename <UNK> vested ) simplename <UNK> vested ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename release ) simplename release ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( memberaccess ( simplename user ) simplename user ( simplename <UNK> vested ) simplename <UNK> vested ) memberaccess ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename <UNK> sold ) simplename <UNK> sold ( memberaccess ( simplename user ) simplename user ( simplename <UNK> vested ) simplename <UNK> vested ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename wei refund ) simplename wei refund ( memberaccess ( simplename user ) simplename user ( simplename wei paid ) simplename wei paid ) memberaccess
candidate: process a batch from previous array .
ref: on kyc result .

1106:
src: ( modifierdefinition ( simplename only oscar ) simplename only oscar ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename address oscar manager ) simplename address oscar manager ( block ( expressionstatement ( functioncall ( simplename revert ) simplename revert ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to check of smart contract .
ref: only Oscar can do this action .

1107:
src: ( functiondefinition ( simplename get call data ) simplename get call data ( visibility default ) visibility default ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename self ) simplename self ( simpletype ( simplename call database ) simplename call database ) simpletype ) variabledeclaration ( variabledeclaration ( simplename call key ) simplename call key ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( block ( returnstatement ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename data registry ) simplename data registry ) memberaccess ( memberaccess ( indexaccess ( memberaccess ( simplename self ) simplename self ( simplename calls ) simplename calls ) memberaccess ( simplename call key ) simplename call key ) indexaccess ( simplename data hash ) simplename data hash ) memberaccess ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Get data info about an data .
ref: Data Registry API .

1108:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( simplename is crowdsale paused ) simplename is crowdsale paused ( booleanliteral false ) booleanliteral false ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename valid purchase ) simplename valid purchase ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename wei amount ) simplename wei amount ( simplename mul ) simplename mul ) memberaccess ( simplename rate per wei ) simplename rate per wei ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus ) simplename bonus ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename determine bonus ) simplename determine bonus ( simplename tokens ) simplename tokens ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename tokens ) simplename tokens ( functioncall ( memberaccess ( simplename tokens ) simplename tokens ( simplename add ) simplename add ) memberaccess ( simplename bonus ) simplename bonus ) functioncall ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( memberaccess ( indexaccess ( simplename users buying information ) simplename users buying information ( simplename beneficiary ) simplename beneficiary ) indexaccess ( simplename recurring buyer ) simplename recurring buyer ) memberaccess ( booleanliteral false ) booleanliteral false ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename info ) simplename info ( functioncall ( simplename user information ) simplename user information ( simplename user address ) simplename user address ( simplename tokens to be sent ) simplename tokens to be sent ( simplename ethers to be sent ) simplename ethers to be sent ( simplename is kycapproved ) simplename is kycapproved ( simplename recurring buyer ) simplename recurring buyer ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ( simplename wei amount ) simplename wei amount ( booleanliteral false ) booleanliteral false ( booleanliteral true ) booleanliteral true ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename users buying information ) simplename users buying information ( simplename beneficiary ) simplename beneficiary ) indexaccess ( simplename info ) simplename info ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename all users ) simplename all users ( simplename push ) simplename push ) memberaccess ( simplename beneficiary ) simplename beneficiary ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename info ) simplename info ( indexaccess ( simplename users buying information ) simplename users buying information
candidate: low level token purchase function .
ref: low level token purchase function .

1109:
src: ( functiondefinition ( simplename proof of work ) simplename proof of work ( visibility public ) visibility public ( variabledeclaration ( simplename nonce ) simplename nonce ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename n ) simplename n ( simpletype ( simplename bytes8 ) simplename bytes8 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes8 ) simplename bytes8 ) simpletype ) simpletypeexpression ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename nonce ) simplename nonce ( simplename current challenge ) simplename current challenge ) functioncall ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename n ) simplename n ( functioncall ( simpletypeexpression ( simpletype ( simplename bytes8 ) simplename bytes8 ) simpletype ) simpletypeexpression ( simplename difficulty ) simplename difficulty ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename time since last proof ) simplename time since last proof ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename now ) simplename now ( simplename time of last proof ) simplename time of last proof ) tupleexpression ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename time since last proof ) simplename time since last proof ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balance of ) simplename balance of ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( binaryoperation / ) binaryoperation / ( simplename time since last proof ) simplename time since last proof ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename difficulty ) simplename difficulty ( binaryoperation + ) binaryoperation + ( binaryoperation / ) binaryoperation / ( binaryoperation * ) binaryoperation * ( simplename difficulty ) simplename difficulty ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename time since last proof ) simplename time since last proof ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename time of last proof ) simplename time of last proof ( simplename now ) simplename now ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current challenge ) simplename current challenge ( functioncall ( simplename keccak256 ) simplename keccak256 ( simplename nonce ) simplename nonce ( simplename current challenge ) simplename current challenge ( functioncall ( memberaccess ( simplename block ) simplename block ( simplename blockhash ) simplename blockhash ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename block ) simplename block ( simplename number ) simplename number ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Public function used to return the info about the game .
ref: <UNK> starts <UNK> low .

1110:
src: ( modifierdefinition ( simplename when redemption not paused ) simplename when redemption not paused ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( functioncall ( simplename redemption paused ) simplename redemption paused ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier to make a function callable only when the contract is not paused .
ref: Modifier to make a function callable only when the contract redemption is not paused .

1111:
src: ( functiondefinition ( simplename mint ) simplename mint ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename start ) simplename start ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename cliff ) simplename cliff ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename duration ) simplename duration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename vesting ) simplename vesting ( simpletype ( simplename vesting ) simplename vesting ) simpletype ) variabledeclaration ( indexaccess ( simplename vestings ) simplename vestings ( simplename beneficiary ) simplename beneficiary ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename vesting ) simplename vesting ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename vesting status ) simplename vesting status ( simplename <UNK> ) simplename <UNK> ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename start ) simplename start ) memberaccess ( simplename start ) simplename start ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename cliff ) simplename cliff ) memberaccess ( simplename cliff ) simplename cliff ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename duration ) simplename duration ) memberaccess ( simplename duration ) simplename duration ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename total amount ) simplename total amount ) memberaccess ( simplename amount ) simplename amount ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename released amount ) simplename released amount ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename vesting ) simplename vesting ( simplename status ) simplename status ) memberaccess ( memberaccess ( simplename vesting status ) simplename vesting status ( simplename active ) simplename active ) memberaccess ) expressionstatement ( emitstatement ( functioncall ( simplename mint ) simplename mint ( simplename beneficiary ) simplename beneficiary ( simplename start ) simplename start ( simplename cliff ) simplename cliff ( simplename duration ) simplename duration ( simplename amount ) simplename amount ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: mint tokens for a vesting .
ref: Function to mint token <UNK> to the given beneficiary with certain given vesting parameters .

1112:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename started ) simplename started ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename finished ) simplename finished ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename beneficiary ) simplename beneficiary ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( indexaccess ( simplename whitelist ) simplename whitelist ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( indexaccess ( simplename whitelist ) simplename whitelist ( simplename beneficiary ) simplename beneficiary ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation < ) binaryoperation < ( functioncall ( memberaccess ( simplename fida token ) simplename fida token ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ( binaryoperation * ) binaryoperation * ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename decimals ) simplename decimals ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount tokens ) simplename amount tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get amount fida ) simplename get amount fida ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename amount tokens ) simplename amount tokens ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename decimals ) simplename decimals ) functioncall ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename earlybird ended ) simplename earlybird ended ( block ( expressionstatement ( functioncall ( simplename invest as earlybird ) simplename invest as earlybird ( simplename beneficiary ) simplename beneficiary ( simplename amount tokens ) simplename amount tokens ) functioncall ) expressionstatement ) block ( block ( expressionstatement ( functioncall ( simplename invest as bonus program ) simplename invest as bonus program ( simplename beneficiary ) simplename beneficiary ( simplename amount tokens ) simplename amount tokens ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( memberaccess ( simplename wallet ) simplename wallet ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: low level token purchase function .
ref: Public payable function to buy tokens during sale or emission .

1113:
src: ( functiondefinition ( simplename token emission ) simplename token emission ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename return val ) simplename return val ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename reciever ) simplename reciever ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename reciever ) simplename reciever ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename return val ) simplename return val ( functioncall ( simplename emission ) simplename emission ( simplename reciever ) simplename reciever ( simplename amount ) simplename amount ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename is manager or owner ) simplename is manager or owner ) modifierinvocation ( modifierinvocation ( simplename is emission on ) simplename is emission on ) modifierinvocation ) functiondefinition
candidate: function that allows owner to mint tokens .
ref: emission to definit 1 address .

1114:
src: ( functiondefinition ( simplename set service name ) simplename set service name ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename namespace ) simplename namespace ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename fee ) simplename fee ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename set name ) simplename set name ( simplename namespace ) simplename namespace ( simplename name ) simplename name ) functioncall ) expressionstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename fee ) simplename fee ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename fee ) simplename fee ) functioncall ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: Set a new service name .
ref: set name for msg . sender .

1115:
src: ( functiondefinition ( simplename remove child ) simplename remove child ( visibility private ) visibility private ( variabledeclaration ( simplename from token id ) simplename from token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename child contract ) simplename child contract ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename child token id ) simplename child token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token index ) simplename last token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( indexaccess ( indexaccess ( simplename child tokens ) simplename child tokens ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename last token ) simplename last token ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( indexaccess ( simplename child tokens ) simplename child tokens ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename last token index ) simplename last token index ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename child token id ) simplename child token id ( simplename last token ) simplename last token ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token index ) simplename token index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( indexaccess ( indexaccess ( simplename child token index ) simplename child token index ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename child token id ) simplename child token id ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( indexaccess ( simplename child tokens ) simplename child tokens ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename token index ) simplename token index ) indexaccess ( simplename last token ) simplename last token ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( indexaccess ( simplename child token index ) simplename child token index ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename last token ) simplename last token ) indexaccess ( simplename token index ) simplename token index ) expressionstatement ) block ) ifstatement ( expressionstatement ( unaryoperation -- ) unaryoperation -- ( memberaccess ( indexaccess ( indexaccess ( simplename child tokens ) simplename child tokens ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract ) indexaccess ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( indexaccess ( indexaccess ( simplename child token index ) simplename child token index ( simplename from token id ) simplename from token id ) indexaccess ( simplename child contract ) simplename child contract
candidate: remove a child contract only .
ref: ERC998ERC721 Top Down Composable .

1116:
src: ( functiondefinition ( simplename add stock ) simplename add stock ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename stock id ) simplename stock id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename name ) simplename name ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( variabledeclaration ( simplename initial price ) simplename initial price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename price increase ) simplename price increase ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename dividend amount ) simplename dividend amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename num shares ) simplename num shares ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename stock id ) simplename stock id ( memberaccess ( simplename stocks ) simplename stocks ( simplename length ) simplename length ) memberaccess ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename stocks ) simplename stocks ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename stock ) simplename stock ( simplename name ) simplename name ( conditional ( binaryoperation == ) binaryoperation == ( simplename price increase ) simplename price increase ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename price increase ) simplename price increase ) conditional ( conditional ( binaryoperation == ) binaryoperation == ( simplename dividend amount ) simplename dividend amount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( simplename dividend amount ) simplename dividend amount ) conditional ( memberaccess ( simplename block ) simplename block ( simplename timestamp ) simplename timestamp ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename num shares ) simplename num shares ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename stock shares ) simplename stock shares ( simplename stock id ) simplename stock id ) indexaccess ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename shares ) simplename shares ( simplename length ) simplename length ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename shares ) simplename shares ( simplename push ) simplename push ) memberaccess ( functioncall ( simplename share ) simplename share ( simplename owner ) simplename owner ( simplename initial price ) simplename initial price ) functioncall ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( functioncall ( simplename company listed ) simplename company listed ( simplename name ) simplename name ( simplename initial price ) simplename initial price ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Add a new functions .
ref: Adds a new stock to the game .

1117:
src: ( functiondefinition ( simplename propose burning ) simplename propose burning ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename tokenamount ) simplename tokenamount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename tokenamount ) simplename tokenamount ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename proposed burn amnt ) simplename proposed burn amnt ( simplename tokenamount ) simplename tokenamount ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Allows the owner to propose the purchase of tokens .
ref: Allows the owner to propose the burning of tokens .

1118:
src: ( functiondefinition ( simplename verify ) simplename verify ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename transactor ) simplename transactor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename transactee ) simplename transactee ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation != ) binaryoperation != ( indexaccess ( indexaccess ( simplename verifications ) simplename verifications ( simplename transactor ) simplename transactor ) indexaccess ( simplename transactee ) simplename transactee ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: Internal interface : remove a request .
ref: Returns true if transactee has already <UNK> their address ownership to transactor in the past .

1119:
src: ( modifierdefinition ( simplename is emergency ) simplename is emergency ( block ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename emergency ) simplename emergency ( throwstatement throw ) throwstatement throw ) ifstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to allow only if the ICO is paused .
ref: checks only in emergency .

1120:
src: ( functiondefinition ( simplename execute transaction ) simplename execute transaction ( visibility public ) visibility public ( variabledeclaration ( simplename transaction id ) simplename transaction id ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation storage ) storagelocation storage ( simplename txid ) simplename txid ( simpletype ( simplename transaction ) simplename transaction ) simpletype ) variabledeclaration ( indexaccess ( simplename transactions ) simplename transactions ( simplename transaction id ) simplename transaction id ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename confirmed ) simplename confirmed ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( functioncall ( simplename is confirmed ) simplename is confirmed ( simplename transaction id ) simplename transaction id ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation || ) binaryoperation || ( simplename confirmed ) simplename confirmed ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( memberaccess ( memberaccess ( simplename txid ) simplename txid ( simplename data ) simplename data ) memberaccess ( simplename length ) simplename length ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simplename is under limit ) simplename is under limit ( memberaccess ( simplename txid ) simplename txid ( simplename value ) simplename value ) memberaccess ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename txid ) simplename txid ( simplename executed ) simplename executed ) memberaccess ( booleanliteral true ) booleanliteral true ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename confirmed ) simplename confirmed ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename spent today ) simplename spent today ( memberaccess ( simplename txid ) simplename txid ( simplename value ) simplename value ) memberaccess ) expressionstatement ) ifstatement ( ifstatement ( functioncall ( functioncall ( memberaccess ( memberaccess ( memberaccess ( simplename txid ) simplename txid ( simplename destination ) simplename destination ) memberaccess ( simplename call ) simplename call ) memberaccess ( simplename value ) simplename value ) memberaccess ( memberaccess ( simplename txid ) simplename txid ( simplename value ) simplename value ) memberaccess ) functioncall ( memberaccess ( simplename txid ) simplename txid ( simplename data ) simplename data ) memberaccess ) functioncall ( emitstatement ( functioncall ( simplename execution ) simplename execution ( simplename transaction id ) simplename transaction id ) functioncall ) emitstatement ( block ( emitstatement ( functioncall ( simplename execution failure ) simplename execution failure ( simplename transaction id ) simplename transaction id ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( simplename txid ) simplename txid ( simplename executed ) simplename executed ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( ifstatement ( unaryoperation ! ) unaryoperation ! ( simplename confirmed ) simplename confirmed ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename spent today ) simplename spent today ( memberaccess ( simplename txid ) simplename txid ( simplename value ) simplename value ) memberaccess ) expressionstatement ) ifstatement ) block ) ifstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename not executed ) simplename not executed ( simplename transaction id ) simplename transaction id ) modifierinvocation ) functiondefinition
candidate: Allows anyone to execute a confirmed transaction or ether withdraws until daily limit is reached .
ref: Allows anyone to execute a confirmed transaction or ether withdraws until daily limit is reached .

1121:
src: ( modifierdefinition ( simplename is operational ) simplename is operational ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename operational ) simplename operational ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Modifier that requires the operational status for holder .
ref: Reverts if not operational .

1122:
src: ( functiondefinition ( simplename buy tokens ) simplename buy tokens ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename beneficiary ) simplename beneficiary ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename wei amount ) simplename wei amount ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename pre validate purchase ) simplename pre validate purchase ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get token amount ) simplename get token amount ( simplename wei amount ) simplename wei amount ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename wei raised ) simplename wei raised ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename add ) simplename add ) memberaccess ( simplename wei amount ) simplename wei amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename process purchase ) simplename process purchase ( simplename beneficiary ) simplename beneficiary ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename token purchase ) simplename token purchase ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename beneficiary ) simplename beneficiary ( simplename wei amount ) simplename wei amount ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename forward funds ) simplename forward funds ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: low level token purchase * * * DO NOT OVERRIDE .
ref: low level token purchase * * * DO NOT OVERRIDE .

1123:
src: ( modifierdefinition ( simplename only hirer or contractor ) simplename only hirer or contractor ( variabledeclaration ( simplename hirer ) simplename hirer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename contractor ) simplename contractor ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation || ) binaryoperation || ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename hirer ) simplename hirer ( binaryoperation == ) binaryoperation == ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename contractor ) simplename contractor ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: modifier to ensure only the Called by the execution of the Standard .
ref: modifier to ensure only the Contractor can execute .

1124:
src: ( functiondefinition ( simplename create request ) simplename create request ( visibility internal ) visibility internal ( returnparameters ( variabledeclaration ( simplename request id ) simplename request id ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename fees ) simplename fees ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename payer ) simplename payer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename payees ) simplename payees ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename payees payment address ) simplename payees payment address ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename expected amounts ) simplename expected amounts ( array ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename payer refund address ) simplename payer refund address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total expected amounts ) simplename total expected amounts ( simpletype ( simplename int256 ) simplename int256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint8 ) simplename uint8 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename expected amounts ) simplename expected amounts ( simplename length ) simplename length ) memberaccess ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename i ) simplename i ( functioncall ( memberaccess ( simplename i ) simplename i ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename expected amounts ) simplename expected amounts ( simplename i ) simplename i ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename total expected amounts ) simplename total expected amounts ( functioncall ( memberaccess ( simplename total expected amounts ) simplename total expected amounts ( simplename add ) simplename add ) memberaccess ( indexaccess ( simplename expected amounts ) simplename expected amounts ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename fees ) simplename fees ( functioncall ( simplename collect estimation ) simplename collect estimation ( simplename total expected amounts ) simplename total expected amounts ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( simplename collect for reqburning ) simplename collect for reqburning ( simplename fees ) simplename fees ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename request id ) simplename request id ( functioncall ( memberaccess ( simplename request core ) simplename request core ( simplename create request ) simplename create request ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename payees ) simplename payees
candidate: Function to create a request as request as request in the Core .
ref: Internal function to create a request .

1125:
src: ( functiondefinition ( simplename name ) simplename name ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename string ) simplename string ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( simplename m name ) simplename m name ) returnstatement ) block ) functiondefinition
candidate: the name of the token .
ref: the name of the token .

1126:
src: ( functiondefinition ( simplename freeze ) simplename freeze ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( memberaccess ( simplename rcd ) simplename rcd ( simplename pause ) simplename pause ) memberaccess ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename manager only ) simplename manager only ) modifierinvocation ) functiondefinition
candidate: Enable the transfers of token .
ref: Disable token transfers .

1127:
src: ( functiondefinition ( simplename unlock ) simplename unlock ( visibility external ) visibility external ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is locked ) simplename is locked ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: To enable transfer of tokens .
ref: unlock the tokens .

1128:
src: ( functiondefinition ( simplename send tokens ) simplename send tokens ( visibility private ) visibility private ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename tokens ) simplename tokens ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename token wallet ) simplename token wallet ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token wallet ) simplename token wallet ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename tokens ) simplename tokens ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename token wallet ) simplename token wallet ( simplename to ) simplename to ( simplename tokens ) simplename tokens ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename multi sig ) simplename multi sig ( simplename transfer ) simplename transfer ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) functioncall ) expressionstatement ) block ) functiondefinition
candidate: Transfer the specified amount of tokens to the specified address .
ref: Low-level function for tokens transfer .

1129:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename value ) simplename value ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( binaryoperation + ) binaryoperation + ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename value ) simplename value ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename from ) simplename from ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename sub ) simplename sub ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value
candidate: Transfer tokens from one address to another .
ref: Transfer tokens from one address to another .

1130:
src: ( functiondefinition ( simplename owner withdrawal ) simplename owner withdrawal ( visibility public ) visibility public ( variabledeclaration ( simplename amt ) simplename amt ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( tupleexpression ( functioncall ( memberaccess ( simplename amt ) simplename amt ( simplename add ) simplename add ) memberaccess ( simplename owner withdrawn ) simplename owner withdrawn ) functioncall ) tupleexpression ( functioncall ( memberaccess ( tupleexpression ( functioncall ( memberaccess ( simplename wei raised ) simplename wei raised ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) tupleexpression ( simplename mul ) simplename mul ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( ifstatement ( functioncall ( memberaccess ( simplename owner ) simplename owner ( simplename send ) simplename send ) memberaccess ( simplename amt ) simplename amt ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename owner withdrawn ) simplename owner withdrawn ( functioncall ( memberaccess ( simplename owner withdrawn ) simplename owner withdrawn ( simplename add ) simplename add ) memberaccess ( simplename amt ) simplename amt ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename fund transfer ) simplename fund transfer ( simplename owner ) simplename owner ( simplename amt ) simplename amt ) functioncall ) expressionstatement ) block ) ifstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Transfer the funds to the owner .
ref: Function for withdrawing eth by the owner .

1131:
src: ( functiondefinition ( simplename balance of ) simplename balance of ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename balance ) simplename balance ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename token owner ) simplename token owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( indexaccess ( simplename balances ) simplename balances ( simplename token owner ) simplename token owner ) indexaccess ( simplename safe add ) simplename safe add ) memberaccess ( memberaccess ( indexaccess ( simplename mined balances ) simplename mined balances ( simplename token owner ) simplename token owner ) indexaccess ( simplename left ) simplename left ) memberaccess ) functioncall ) returnstatement ) block ) functiondefinition
candidate: return the amount of tokens for a given address .
ref: Get the token balance for account tokenOwner .

1132:
src: ( functiondefinition ( simplename delivery token ) simplename delivery token ( visibility public ) visibility public ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename b ) simplename b ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename sum ) simplename sum ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename ico supply ) simplename ico supply ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( simplename a ) simplename a ) variabledeclarationstatement ( binaryoperation <= ) binaryoperation <= ( simplename i ) simplename i ( simplename b ) simplename b ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( ifstatement ( indexaccess ( simplename approved investor list ) simplename approved investor list ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename requested units ) simplename requested units ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( indexaccess ( simplename deposit ) simplename deposit ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ( simplename original buy price ) simplename original buy price ) tupleexpression ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation <= ) binaryoperation <= ( simplename requested units ) simplename requested units ( simplename ico supply ) simplename ico supply ( binaryoperation > ) binaryoperation > ( simplename requested units ) simplename requested units ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( simplename balances ) simplename balances ( simplename owner ) simplename owner ) indexaccess ( simplename requested units ) simplename requested units ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( indexaccess ( simplename balances ) simplename balances ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ( simplename requested units ) simplename requested units ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( simplename ico supply ) simplename ico supply ( simplename requested units ) simplename requested units ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename owner ) simplename owner ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ( simplename requested units ) simplename requested units ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename sum ) simplename sum ( indexaccess ( simplename deposit ) simplename deposit ( indexaccess ( simplename buyers ) simplename buyers ( simplename i ) simplename i ) indexaccess ) indexaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess
candidate: Set token for all investors .
ref: delivery token for buyer .

1133:
src: ( functiondefinition ( simplename change enabled address status ) simplename change enabled address status ( visibility public ) visibility public ( variabledeclaration ( simplename address ) simplename address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename status ) simplename status ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename address ) simplename address ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename enabled addresses ) simplename enabled addresses ( simplename address ) simplename address ) indexaccess ( simplename status ) simplename status ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Set enabled status of the crowdsale .
ref: Only builder owner methods .

1134:
src: ( functiondefinition ( simplename apply settings ) simplename apply settings ( visibility default ) visibility default ( variabledeclaration ( simplename q state ) simplename q state ( simpletype ( simplename setting state value ) simplename setting state value ) simpletype ) variabledeclaration ( variabledeclaration ( simplename threshold ) simplename threshold ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename vest ) simplename vest ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename rw ) simplename rw ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( variabledeclaration ( simplename opt gas ) simplename opt gas ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( ifstatement ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename owner ) simplename owner ( returnstatement ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename payout threshold ) simplename payout threshold ( simplename threshold ) simplename threshold ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename rw gas ) simplename rw gas ( simplename rw ) simplename rw ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename opt in gas ) simplename opt in gas ( simplename opt gas ) simplename opt gas ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename settings state ) simplename settings state ( memberaccess ( simplename setting state value ) simplename setting state value ( simplename locked release ) simplename locked release ) memberaccess ( returnstatement ) returnstatement ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename settings state ) simplename settings state ( simplename q state ) simplename q state ) expressionstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename q state ) simplename q state ( memberaccess ( simplename setting state value ) simplename setting state value ( simplename locked release ) simplename locked release ) memberaccess ( block ( expressionstatement ( functioncall ( simplename stat event ) simplename stat event ( stringliteral 「STR」 ) stringliteral 「STR」 ) functioncall ) expressionstatement ( returnstatement ) returnstatement ) block ) ifstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( simplename num accounts ) simplename num accounts ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename a ) simplename a ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename holder indexes ) simplename holder indexes ( simplename i ) simplename i ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation != ) binaryoperation != ( simplename a ) simplename a ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename holder accounts ) simplename holder accounts ( simplename a ) simplename a ) indexaccess ( simplename tokens ) simplename tokens ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename
candidate: use this to reset everything , will never be called after lockRelease .
ref: use this to reset everything , will never be called after lockRelease .

1135:
src: ( functiondefinition ( simplename remove auction ) simplename remove auction ( visibility internal ) visibility internal ( variabledeclaration ( simplename nft address ) simplename nft address ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( unaryoperation delete ) unaryoperation delete ( indexaccess ( indexaccess ( simplename auctions ) simplename auctions ( simplename nft address ) simplename nft address ) indexaccess ( simplename token id ) simplename token id ) indexaccess ) expressionstatement ) block ) functiondefinition
candidate: Removes an auction from the list of open auctions .
ref: Removes an auction from the list of open auctions .

1136:
src: ( functiondefinition ( simplename modify metadata hashes ) simplename modify metadata hashes ( visibility public ) visibility public ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new name hash ) simplename new name hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new description hash ) simplename new description hash ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename new file hashes ) simplename new file hashes ( array ( simpletype ( simplename bytes32 ) simplename bytes32 ) simpletype ) array ) variabledeclaration ( variabledeclaration ( simplename data ) simplename data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( returnstatement ( functioncall ( memberaccess ( simplename super ) simplename super ( simplename modify metadata hashes ) simplename modify metadata hashes ) memberaccess ( simplename token id ) simplename token id ( simplename new name hash ) simplename new name hash ( simplename new description hash ) simplename new description hash ( simplename new file hashes ) simplename new file hashes ( simplename data ) simplename data ) functioncall ) returnstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename can pay fees ) simplename can pay fees ( simplename modification fee ) simplename modification fee ) modifierinvocation ) functiondefinition
candidate: Function to modify the metadata for the given token .
ref: Make <UNK> ( ) pausable .

1137:
src: ( functiondefinition ( simplename finish burning ) simplename finish burning ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename burn finished ) simplename burn finished ( booleanliteral true ) booleanliteral true ) expressionstatement ( emitstatement ( functioncall ( simplename burn finished ) simplename burn finished ) functioncall ) emitstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Function to stop minting new tokens .
ref: Function to stop burning tokens .

1138:
src: ( functiondefinition ( simplename withdraw dth shop ) simplename withdraw dth shop ( visibility external ) visibility external ( variabledeclaration ( simplename receiver ) simplename receiver ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename tosend ) simplename tosend ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename dth shop balance ) simplename dth shop balance ( simplename receiver ) simplename receiver ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename dth ) simplename dth ( simplename transfer ) simplename transfer ) memberaccess ( simplename receiver ) simplename receiver ( simplename tosend ) simplename tosend ) functioncall ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: withdraw DTH when a shop register .
ref: withdraw DTH when shop delete .

1139:
src: ( modifierdefinition ( simplename accepting payments ) simplename accepting payments ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( simplename is accepting payments ) simplename is accepting payments ) functioncall ) expressionstatement ( expressionstatement ( simplename _ ) simplename _ ) expressionstatement ) block ) modifierdefinition
candidate: Allows a function to be executed only by the owner .
ref: modifier to check if payments being accepted .

1140:
src: ( functiondefinition ( simplename transaction switch ) simplename transaction switch ( visibility external ) visibility external ( variabledeclaration ( simplename transactions active ) simplename transactions active ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename transactions active ) simplename transactions active ( simplename transactions active ) simplename transactions active ) expressionstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Sets new transactions .
ref: Allow / Deny transfer of tokens .

1141:
src: ( functiondefinition ( simplename approve and call ) simplename approve and call ( visibility external ) visibility external ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( variabledeclaration ( simplename extra data ) simplename extra data ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( functioncall ( simplename approve and call receiver ) simplename approve and call receiver ( simplename spender ) simplename spender ) functioncall ( simplename receive approval ) simplename receive approval ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename value ) simplename value ( simplename this ) simplename this ( simplename extra data ) simplename extra data ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Approves and then calls the receiving contract .
ref: Approves and then calls the receiving contract .

1142:
src: ( functiondefinition ( simplename tokens of owner ) simplename tokens of owner ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner tokens ) simplename owner tokens ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token count ) simplename token count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename result ) simplename result ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( simplename token count ) simplename token count ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total cars ) simplename total cars ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename total supply ) simplename total supply ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result index ) simplename result index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename car id ) simplename car id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename car id ) simplename car id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation <= ) binaryoperation <= ( simplename car id ) simplename car id ( simplename total cars ) simplename total cars ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename car id ) simplename car id ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename car index to owner ) simplename car index to owner ( simplename car id ) simplename car id ) indexaccess ( simplename owner ) simplename owner ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename result ) simplename result ( simplename result index ) simplename result index ) indexaccess ( simplename car id ) simplename car id ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename result index ) simplename result index ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename result ) simplename result ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: This method MUST NEVER be called by smart contract code .
ref: This method MUST NEVER be called by smart contract code .

1143:
src: ( functiondefinition ( simplename tokens of owner ) simplename tokens of owner ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename owner tokens ) simplename owner tokens ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename owner ) simplename owner ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token count ) simplename token count ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename balance of ) simplename balance of ( simplename owner ) simplename owner ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename token count ) simplename token count ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( returnstatement ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) returnstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename result ) simplename result ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ) variabledeclaration ( functioncall ( simplename new ) simplename new ( array ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) array ( simplename token count ) simplename token count ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename total game items ) simplename total game items ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename total supply ) simplename total supply ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename result index ) simplename result index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( variabledeclarationstatement ( variabledeclaration ( simplename game item id ) simplename game item id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) variabledeclarationstatement ( forstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename game item id ) simplename game item id ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( binaryoperation <= ) binaryoperation <= ( simplename game item id ) simplename game item id ( simplename total game items ) simplename total game items ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename game item id ) simplename game item id ) expressionstatement ( block ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( simplename game item index to owner ) simplename game item index to owner ( simplename game item id ) simplename game item id ) indexaccess ( simplename owner ) simplename owner ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename result ) simplename result ( simplename result index ) simplename result index ) indexaccess ( simplename game item id ) simplename game item id ) expressionstatement ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename result index ) simplename result index ) expressionstatement ) block ) ifstatement ) block ) forstatement ( returnstatement ( simplename result ) simplename result ) returnstatement ) block ) ifstatement ) block ) functiondefinition
candidate: This method MUST NEVER be called by smart contract code .
ref: This method MUST NEVER be called by smart contract code .

1144:
src: ( functiondefinition ( simplename unlock ) simplename unlock ( visibility public ) visibility public ( variabledeclaration ( simplename token id ) simplename token id ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( memberaccess ( indexaccess ( simplename cards ) simplename cards ( simplename token id ) simplename token id ) indexaccess ( simplename is locked ) simplename is locked ) memberaccess ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename cards ) simplename cards ( simplename token id ) simplename token id ) indexaccess ( simplename is locked ) simplename is locked ) memberaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ) block ( modifierinvocation ( simplename owner only ) simplename owner only ) modifierinvocation ) functiondefinition
candidate: unlock the token .
ref: Unlock a <UNK> and make it usable .

1145:
src: ( functiondefinition ( simplename remove from private sale whitelist ) simplename remove from private sale whitelist ( visibility public ) visibility public ( variabledeclaration ( simplename bidder addresses ) simplename bidder addresses ( array ( simpletype ( simplename address ) simplename address ) simpletype ) array ) variabledeclaration ( block ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename i ) simplename i ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename i ) simplename i ( memberaccess ( simplename bidder addresses ) simplename bidder addresses ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename i ) simplename i ) expressionstatement ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename privatesalewhitelist ) simplename privatesalewhitelist ( indexaccess ( simplename bidder addresses ) simplename bidder addresses ( simplename i ) simplename i ) indexaccess ) indexaccess ( booleanliteral false ) booleanliteral false ) expressionstatement ( expressionstatement ( functioncall ( simplename removed from private sale whitelist ) simplename removed from private sale whitelist ( indexaccess ( simplename bidder addresses ) simplename bidder addresses ( simplename i ) simplename i ) indexaccess ) functioncall ) expressionstatement ) block ) forstatement ) block ( modifierinvocation ( simplename is owner ) simplename is owner ) modifierinvocation ) functiondefinition
candidate: Removes account addresses from whitelist .
ref: Removes presale account addresses from privatesalewhitelist .

1146:
src: ( functiondefinition ( simplename convert to mini ttc ) simplename convert to mini ttc ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename amount ) simplename amount ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( returnstatement ( binaryoperation * ) binaryoperation * ( simplename amount ) simplename amount ( tupleexpression ( binaryoperation ** ) binaryoperation ** ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( functioncall ( memberaccess ( simplename token reward ) simplename token reward ( simplename decimals ) simplename decimals ) memberaccess ) functioncall ) functioncall ) tupleexpression ) returnstatement ) block ) functiondefinition
candidate: The method that allows the owner to claim the method from the bonus amount in wei .
ref: Given an amount in TTC , this method returns the equivalent amount in <UNK> .

1147:
src: ( functiondefinition ( simplename claim day ) simplename claim day ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename day index ) simplename day index ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( binaryoperation >= ) binaryoperation >= ( simplename day index ) simplename day index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation < ) binaryoperation < ( simplename day index ) simplename day index ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename buyer ) simplename buyer ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename seller ) simplename seller ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( indexaccess ( simplename token owner ) simplename token owner ( simplename day index ) simplename day index ) indexaccess ) variabledeclarationstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename seller ) simplename seller ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename amount paid ) simplename amount paid ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename purchase price ) simplename purchase price ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( indexaccess ( simplename day index to price ) simplename day index to price ( simplename day index ) simplename day index ) indexaccess ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename purchase price ) simplename purchase price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename purchase price ) simplename purchase price ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( simplename amount paid ) simplename amount paid ( simplename purchase price ) simplename purchase price ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename change to return ) simplename change to return ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename amount paid ) simplename amount paid ( simplename purchase price ) simplename purchase price ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename change to return ) simplename change to return ( functioncall ( memberaccess ( simplename amount paid ) simplename amount paid ( simplename sub ) simplename sub ) memberaccess
candidate: Claim a Day for day .
ref: Claim a Day for Your Very Own ! .

1148:
src: ( functiondefinition ( simplename get timebased bonus rate ) simplename get timebased bonus rate ( visibility internal ) visibility internal ( statemutability constant ) statemutability constant ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus rate ) simplename bonus rate ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename stage ) simplename stage ( memberaccess ( simplename stage ) simplename stage ( simplename presale ) simplename presale ) memberaccess ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus rate ) simplename bonus rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename now time ) simplename now time ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( simplename get now ) simplename get now ) functioncall ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus first week ) simplename bonus first week ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename start time ) simplename start time ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus second week ) simplename bonus second week ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename bonus first week ) simplename bonus first week ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus third week ) simplename bonus third week ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename bonus second week ) simplename bonus second week ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bonus fourth week ) simplename bonus fourth week ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename bonus third week ) simplename bonus third week ( tupleexpression ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) tupleexpression ) variabledeclarationstatement ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename now time ) simplename now time ( simplename bonus first week ) simplename bonus first week ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus rate ) simplename bonus rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename now time ) simplename now time ( simplename bonus second week ) simplename bonus second week ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename bonus rate ) simplename bonus rate ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( ifstatement ( binaryoperation <= ) binaryoperation <= ( simplename now time ) simplename now time ( simplename
candidate: Get the ICO rate .
ref: Get the time-based bonus rate .

1149:
src: ( functiondefinition ( simplename decimals ) simplename decimals ( visibility public ) visibility public ( statemutability pure ) statemutability pure ( returnparameters ( variabledeclaration ( simplename result ) simplename result ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) returnstatement ) block ) functiondefinition
candidate: number of decimals for this token .
ref: number of decimals for this token .

1150:
src: ( functiondefinition ( simplename pause refund ) simplename pause refund ( visibility default ) visibility default ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename refund paused ) simplename refund paused ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( functioncall ( simplename pause refund ) simplename pause refund ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ( modifierinvocation ( simplename when refund not paused ) simplename when refund not paused ) modifierinvocation ) functiondefinition
candidate: called by the owner to pause , triggers stopped state .
ref: called by the owner to pause , triggers stopped state .

1151:
src: ( functiondefinition ( simplename transfer from ) simplename transfer from ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simplename success ) simplename success ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename from ) simplename from ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename to ) simplename to ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation != ) binaryoperation != ( simplename to ) simplename to ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation <= ) binaryoperation <= ( simplename value ) simplename value ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ) functioncall ) expressionstatement ( variabledeclarationstatement ( variabledeclaration ( storagelocation memory ) storagelocation memory ( simplename empty ) simplename empty ( simpletype ( simplename bytes ) simplename bytes ) simpletype ) variabledeclaration ) variabledeclarationstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename from ) simplename from ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation -= ) binaryoperation -= ( indexaccess ( indexaccess ( simplename allowances ) simplename allowances ( simplename from ) simplename from ) indexaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( functioncall ( memberaccess ( indexaccess ( simplename balance of ) simplename balance of ( simplename to ) simplename to ) indexaccess ( simplename add ) simplename add ) memberaccess ( simplename value ) simplename value ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename erc223 transfer ) simplename erc223 transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ( simplename empty ) simplename empty ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename transfer ) simplename transfer ( simplename from ) simplename from ( simplename to ) simplename to ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ) functiondefinition
candidate: Transfer tokens from other address .
ref: Send _value tokens to _to from _from on the condition it is approved by _from .

1152:
src: ( functiondefinition ( simplename place bet ) simplename place bet ( visibility public ) visibility public ( statemutability payable ) statemutability payable ( variabledeclaration ( simplename index ) simplename index ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation >= ) binaryoperation >= ( memberaccess ( simplename msg ) simplename msg ( simplename value ) simplename value ) memberaccess ( simplename minimum bet amount ) simplename minimum bet amount ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename stop match betting ) simplename stop match betting ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( unaryoperation ! ) unaryoperation ! ( simplename match completed ) simplename match completed ) functioncall ) expressionstatement ( ifstatement ( binaryoperation && ) binaryoperation && ( binaryoperation == ) binaryoperation == ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( binaryoperation == ) binaryoperation == ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( functioncall ( memberaccess ( simplename betters ) simplename betters ( simplename push ) simplename push ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) functioncall ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( simplename index ) simplename index ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( simplename index ) simplename index ) indexaccess ( simplename total participants ) simplename total participants ) memberaccess ( functioncall ( memberaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( simplename index ) simplename index ) indexaccess ( simplename total participants ) simplename total participants ) memberaccess ( simplename add ) simplename add ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ) block ) ifstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( simplename index ) simplename index ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( functioncall ( memberaccess ( indexaccess ( memberaccess ( indexaccess ( simplename teams ) simplename teams ( simplename index ) simplename index ) indexaccess ( simplename betting contribution ) simplename betting contribution ) memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename add ) simplename add ) memberaccess ( memberaccess ( simplename msg ) simplename msg
candidate: place a bet on a set .
ref: Allows a user to place Bet on the match .

1153:
src: ( functiondefinition ( simplename total supply ) simplename total supply ( visibility public ) visibility public ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ) returnparameters ( block ( returnstatement ( binaryoperation - ) binaryoperation - ( simplename total supply ) simplename total supply ( indexaccess ( simplename balances ) simplename balances ( functioncall ( simpletypeexpression ( simpletype ( simplename address ) simplename address ) simpletype ) simpletypeexpression ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) indexaccess ) returnstatement ) block ) functiondefinition
candidate: Gets the total amount of tokens stored by the contract .
ref: Total number of tokens in existence .

1154:
src: ( functiondefinition ( simplename approve ) simplename approve ( visibility public ) visibility public ( returnparameters ( variabledeclaration ( simpletype ( simplename bool ) simplename bool ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename spender ) simplename spender ( simpletype ( simplename address ) simplename address ) simpletype ) variabledeclaration ( variabledeclaration ( simplename value ) simplename value ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( block ( expressionstatement ( binaryoperation = ) binaryoperation = ( indexaccess ( indexaccess ( simplename allowed ) simplename allowed ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ) indexaccess ( simplename spender ) simplename spender ) indexaccess ( simplename value ) simplename value ) expressionstatement ( expressionstatement ( functioncall ( simplename approval ) simplename approval ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename spender ) simplename spender ( simplename value ) simplename value ) functioncall ) expressionstatement ( returnstatement ( booleanliteral true ) booleanliteral true ) returnstatement ) block ( modifierinvocation ( simplename only msg data size ) simplename only msg data size ( binaryoperation * ) binaryoperation * ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) modifierinvocation ) functiondefinition
candidate: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ref: Approve the passed address to spend the specified amount of tokens on behalf of msg . sender .

1155:
src: ( functiondefinition ( simplename get extra points ) simplename get extra points ( visibility internal ) visibility internal ( statemutability view ) statemutability view ( returnparameters ( variabledeclaration ( simplename extra points ) simplename extra points ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ) returnparameters ( variabledeclaration ( simplename extras ) simplename extras ( simpletype ( simplename uint32 ) simplename uint32 ) simpletype ) variabledeclaration ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename red cards ) simplename red cards ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( binaryoperation & ) binaryoperation & ( simplename extras ) simplename extras ( simplename extra mask brackets ) simplename extra mask brackets ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename extras ) simplename extras ( binaryoperation >> ) binaryoperation >> ( simplename extras ) simplename extras ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename yellow cards ) simplename yellow cards ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) variabledeclaration ( functioncall ( simpletypeexpression ( simpletype ( simplename uint16 ) simplename uint16 ) simpletype ) simpletypeexpression ( simplename extras ) simplename extras ) functioncall ) variabledeclarationstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename red cards ) simplename red cards ( memberaccess ( simplename extra results ) simplename extra results ( simplename red cards ) simplename red cards ) memberaccess ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename extra points ) simplename extra points ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ( ifstatement ( binaryoperation == ) binaryoperation == ( simplename yellow cards ) simplename yellow cards ( memberaccess ( simplename extra results ) simplename extra results ( simplename yellow cards ) simplename yellow cards ) memberaccess ( block ( expressionstatement ( binaryoperation += ) binaryoperation += ( simplename extra points ) simplename extra points ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ) ifstatement ) block ) functiondefinition
candidate: calculates how many tokens will be called by a specific day .
ref: calculates points won by <UNK> and red cards predictions .

1156:
src: ( functiondefinition ( simplename withdraw ) simplename withdraw ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( memberaccess ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename balance ) simplename balance ) functioncall ) expressionstatement ( emitstatement ( functioncall ( simplename withdrawn ) simplename withdrawn ( memberaccess ( simplename msg ) simplename msg ( simplename sender ) simplename sender ) memberaccess ( simplename balance ) simplename balance ) functioncall ) emitstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename balance ) simplename balance ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) expressionstatement ) block ( modifierinvocation ( simplename only whitelisted ) simplename only whitelisted ) modifierinvocation ) functiondefinition
candidate: Transfers the balance from your address .
ref: withdraws from the reward pot .

1157:
src: ( functiondefinition ( simplename finalize presale ) simplename finalize presale ( visibility external ) visibility external ( block ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation && ) binaryoperation && ( simplename is presale started ) simplename is presale started ( unaryoperation ! ) unaryoperation ! ( simplename is presale finalized ) simplename is presale finalized ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( functioncall ( memberaccess ( simplename presale finalize agent ) simplename presale finalize agent ( simplename is sane ) simplename is sane ) memberaccess ) functioncall ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename presale supply ) simplename presale supply ( simpletype ( simplename uint256 ) simplename uint256 ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename token ) simplename token ( simplename total supply ) simplename total supply ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename presale supply ) simplename presale supply ( functioncall ( memberaccess ( simplename presale supply ) simplename presale supply ( simplename div ) simplename div ) memberaccess ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( memberaccess ( simplename presale finalize agent ) simplename presale finalize agent ( simplename finalize presale ) simplename finalize presale ) memberaccess ( simplename presale supply ) simplename presale supply ) functioncall ) expressionstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename token wei ) simplename token wei ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( functioncall ( memberaccess ( simplename presale finalize agent ) simplename presale finalize agent ( simplename wei per token ) simplename wei per token ) memberaccess ) functioncall ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename pricing strategy ) simplename pricing strategy ( simplename set token price in wei ) simplename set token price in wei ) memberaccess ( simplename token wei ) simplename token wei ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename tokens per wei received ) simplename tokens per wei received ( simplename token wei ) simplename token wei ) functioncall ) expressionstatement ( expressionstatement ( functioncall ( simplename require ) simplename require ( binaryoperation > ) binaryoperation > ( simplename token wei ) simplename token wei ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) functioncall ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename current status ) simplename current status ( memberaccess ( simplename status ) simplename status ( simplename unknown ) simplename unknown ) memberaccess ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename is presale finalized ) simplename is presale finalized ( booleanliteral true ) booleanliteral true ) expressionstatement ( expressionstatement ( binaryoperation = ) binaryoperation = ( simplename presale end time ) simplename presale end time ( simplename now ) simplename now ) expressionstatement ( expressionstatement ( functioncall ( simplename presale finalized ) simplename presale finalized ( simplename presale end time ) simplename presale end time ) functioncall ) expressionstatement ) block ( modifierinvocation ( simplename when not paused ) simplename when not paused ) modifierinvocation ( modifierinvocation ( simplename only owner ) simplename only owner ) modifierinvocation ) functiondefinition
candidate: Finalize a succcesful crowdsale .
ref: Finalize presale , calculate token price , track finalize time .

1158:
src: ( functiondefinition ( simplename perform payout ) simplename perform payout ( visibility private ) visibility private ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename losing chunk ) simplename losing chunk ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation - ) binaryoperation - ( memberaccess ( simplename this ) simplename this ( simplename balance ) simplename balance ) memberaccess ( indexaccess ( simplename total amounts bet ) simplename total amounts bet ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename winning country ) simplename winning country ) functioncall ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bookie payout ) simplename bookie payout ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation / ) binaryoperation / ( simplename losing chunk ) simplename losing chunk ( simplename bookie pool commission ) simplename bookie pool commission ) variabledeclarationstatement ( expressionstatement ( functioncall ( memberaccess ( simplename bookie ) simplename bookie ( simplename transfer ) simplename transfer ) memberaccess ( simplename bookie payout ) simplename bookie payout ) functioncall ) expressionstatement ( forstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename k ) simplename k ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( numberliteral 「NUM」 ) numberliteral 「NUM」 ) variabledeclarationstatement ( binaryoperation < ) binaryoperation < ( simplename k ) simplename k ( memberaccess ( simplename betters ) simplename betters ( simplename length ) simplename length ) memberaccess ( expressionstatement ( unaryoperation ++ ) unaryoperation ++ ( simplename k ) simplename k ) expressionstatement ( block ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename bet on winner ) simplename bet on winner ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( indexaccess ( memberaccess ( indexaccess ( simplename better info ) simplename better info ( indexaccess ( simplename betters ) simplename betters ( simplename k ) simplename k ) indexaccess ) indexaccess ( simplename amounts bet ) simplename amounts bet ) memberaccess ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename winning country ) simplename winning country ) functioncall ) indexaccess ) variabledeclarationstatement ( variabledeclarationstatement ( binaryoperation = ) binaryoperation = ( variabledeclaration ( simplename payout ) simplename payout ( simpletype ( simplename uint ) simplename uint ) simpletype ) variabledeclaration ( binaryoperation + ) binaryoperation + ( simplename bet on winner ) simplename bet on winner ( tupleexpression ( binaryoperation / ) binaryoperation / ( tupleexpression ( binaryoperation * ) binaryoperation * ( simplename bet on winner ) simplename bet on winner ( tupleexpression ( binaryoperation - ) binaryoperation - ( simplename losing chunk ) simplename losing chunk ( simplename bookie payout ) simplename bookie payout ) tupleexpression ) tupleexpression ( indexaccess ( simplename total amounts bet ) simplename total amounts bet ( functioncall ( simpletypeexpression ( simpletype ( simplename uint ) simplename uint ) simpletype ) simpletypeexpression ( simplename winning country ) simplename winning country ) functioncall ) indexaccess ) tupleexpression ) variabledeclarationstatement ( ifstatement ( binaryoperation > ) binaryoperation > ( simplename payout ) simplename payout ( numberliteral 「NUM」 ) numberliteral 「NUM」 ( expressionstatement ( functioncall ( memberaccess ( indexaccess ( simplename betters ) simplename betters ( simplename k ) simplename k ) indexaccess ( simplename transfer ) simplename transfer ) memberaccess ( simplename payout ) simplename payout ) functioncall ) expressionstatement ) ifstatement ) block ) forstatement ( expressionstatement ( binaryoperation
candidate: Performs payout based on winning team .
ref: Performs payout based on winning team .

